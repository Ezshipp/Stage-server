var customermod = function () {

    this.crypto = require('crypto');
    this.uuid = require('uuid');
    this.rand = require('csprng');
    this.ApiResponce = require("../Models/Apiresponce.js");
    this.ApiMessages = require("../Models/Apimessages.js");
    this.Config = require("../Config/config.js");
    this.config = require("../Config/config.js");
    this.Counters = require('../Models/Counters.js');
    this.Customers = require('../Models/Customers.js');
    this.CUSTOMERSESSION = require('../Models/CUSTOMERSESSION.js');
    this.CustomerPasswordTries = require('../Models/CustomerPasswordTries.js');
    this.Cookie = require('../Models/Cookie.js');
    this.COOKIE_TOKEN_SECURITY = require('../Models/COOKIE_TOKEN_SECURITY.js');
    this.CustomerForgotPasswordTries = require('../Models/CustomerForgotPasswordTries.js');
    this.Drivers = require('../Models/Drivers.js');
    this.Driver_Salaries_Logs = require('../Models/Driver_Salaries_Logs.js');
    this.Orders = require('../Models/Orders.js');
    this.ZONES = require('../Models/ZONES.js');
    this.OTP = require('../Models/OTP.js');
    this.Guest_OTP = require('../Models/Guest_OTP.js');
    this.Recursive_Order_MemberShip = require('../Models/Recursive_Order_MemberShip.js');
    this.Orders_Images = require('../Models/Orders_Images.js');
    this.Vendors = require('../Models/Vendors.js');
    this.Vendors_Price = require('../Models/Vendors_Price.js');
    this.Vendors_Orders = require('../Models/Vendors_Orders.js');
    this.Vendor_Orders_Detail = require('../Models/Vendor_Orders_Detail.js');
    this.can_reason = require('../Models/can_reason.js');
    this.Offers = require('../Models/Offers.js');
    this.Offers_Percentage = require('../Models/Offers_Percentage.js');
    this.Offers_Used_Customers = require('../Models/Offers_Used_Customers.js');
    this.Country = require('../Models/Country.js');
    this.City = require('../Models/City.js');
    this.Referral_Relation = require('../Models/Referral_Relation.js');
    this.Offers_Lottery = require('../Models/Offers_Lottery.js');
    this.admin_users = require('../Models/admin_users.js');
    this.Admin_Logs = require('../Models/Admin_Logs.js');
    this.operators = require('../Models/operators.js');
    this.Customer_Premium_Pricing = require('../Models/Customer_Premium_Pricing.js');
    this.Driver_Expenses = require("../Models/Driver_Expenses.js");
    this.Address_Logs = require("../Models/Address_Logs.js");
    this.Store_Entity = require("../Models/Store_Entity.js");
    this.Store_Branch = require("../Models/Store_Branch.js");
    this.Customer_Invoicing = require("../Models/Customer_Invoicing.js");
    this.Customer_Invoicing = require("../Models/Customer_Invoicing.js");
    this.Store_Admin_Sessions = require("../Models/Store_Admin_Sessions.js");
    this.Ezshipp_Employee_Paid_Salaries = require("../Models/Ezshipp_Employee_Paid_Salaries.js");
    this.Promotional_Contacts = require("../Models/Promotional_Contacts.js");

    this.Customer_CODReport = require("../Models/Customer_CODReport.js");

    this.fcmmod = require('../CoreModules/fcmmod.js'); // Setting the Path for FCM Modules
    this.FCMMod = new this.fcmmod();
    this.moment = require('moment');
    this.msg91mod = require('../CoreModules/msg91mod.js'); // Setting the Path for Message91 Modules
    this.MSG91MOD = new this.msg91mod();
    this.ObjectID = require('mongodb').ObjectID;

    this.distance = require('google-distance-matrix');
    this.distance.key(this.config.Google_Api_Key);
    this.distance.units('imperial');
    this.distance.mode('driving');
    this.base64ImageToFile = require('base64image-to-file');
    this.knoxClient = require('knox').createClient({
        key: require('../Config/config.js').S3AccessKey,
        secret: require('../Config/config.js').S3Secret,
        bucket: require('../Config/config.js').S3Bucket
    });
    this.fs = require('fs');
    this.htmlToPdf = require('html-to-pdf');
};
var ApiResponce = require("../Models/Apiresponce.js");
var ApiMessages = require("../Models/Apimessages.js");
var Customers = require("../Models/Customers.js");
var admin_users = require("../Models/admin_users.js");
var Admin_Logs = require("../Models/Admin_Logs.js");
var operators = require("../Models/operators.js");
var Driver_Expenses = require("../Models/Driver_Expenses.js");
var razorpay = require('../CoreModules/razorpay');
var htmlToPdf = require('html-to-pdf');
var Orders = require('../Models/Orders.js');
var Drivers = require('../Models/Drivers.js');
var moment = require('moment');
var cron = require('cron');
var uuid = require('uuid');
var async = require('async');
var sync = require('sync');
customermod.prototype.Driver_Invoicing_Subtotal = function (DriverPriceData, data, callback) {
    var me = this;
    var moment = require('moment');
    var config = require("../Config/config.js");
    var Config = require("../Config/config.js");
    var mailgun = require('mailgun-js')({ apiKey: config.mailgun.api_key, domain: config.mailgun.domain });
    var generationDate = moment().utcOffset(330).format('DD/MM/YYYY');
    var headingData = '<tr>' +
        '<th class="th">' +
        '                <strong>Biker Name</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[0].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[1].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[2].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[3].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[4].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[5].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[6].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>Total Amount</strong>' +
        '            </th>' +
        '</tr>'
    var DriverCollection = '';
    var TotalAmount = 0;
    var DriverNamePhoneNumber;
    for (var i = 0; i < DriverPriceData.length; i++) {
        if (DriverPriceData[i].DriverPhoneNumber == '8801362790') {
            console.log("Biscuit");
        } else {
            TotalAmount += parseFloat(DriverPriceData[i].Total_Price);
            DriverNamePhoneNumber = DriverPriceData[i].DriverName + ' (' + DriverPriceData[i].DriverPhoneNumber + ')';
            DriverCollection += '        <tr>' +
                '            <td class="td" style="text-align:center;">' +
                DriverNamePhoneNumber +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[0].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[1].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[2].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[3].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[4].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[5].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[6].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].Total_Price +
                '            </td>' +
                '        </tr>';
        }
    }

    var html = '<!doctype html>' +
        '<html>' +
        '<head>' +
        '    <meta charset="utf-8">' +
        '    <style>' +
        '        body {' +
        '            background-color: #FFFFFF;' +
        '            color: #000000;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 13px;' +
        '            line-height: 1.1875;' +
        '            margin: 0;' +
        '            padding: 0;' +
        '            max-width: 520px;' +
        '        }' +
        '        #Line1 {' +
        '            border-width: 0;' +
        '            height: 78px;' +
        '            width: 8px;' +
        '        }' +
        '        a {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        a:visited {' +
        '            color: #800080;' +
        '        }' +
        '        a:active {' +
        '            color: #FF0000;' +
        '        }' +
        '        a:hover {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        h1 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 32px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h2 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 27px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h3 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 24px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h4 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 21px;' +
        '            font-style: italic;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h5 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 19px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h6 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        .table2 {' +
        '            margin-left: 5px;' +
        '            border: 1px solid #dddddd;' +
        '            width: 510px;' +
        '            margin-top: 10px;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 7px;' +
        '            font-style: bolder;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '        }' +
        '        .th {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '        .td {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '    </style>' +
        '</head>' +
        '<body>' +
        '    <table>' +
        '        <tr>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new.png" alt="" style="margin-left:10px;width: 90%;"></div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
        '                </div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
        '                </div>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="margin-left:62%;margin-top:10px;">' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Date:</strong>' + generationDate +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-From:</strong>' + data.from_date +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-To:</strong>' + data.to_date +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table class="table2">' +
        headingData +
        DriverCollection +
        '        <tr>' +
        '            <td colspan="8" style="text-align:right;">' +
        '                <strong>Total Bikers Amount</strong>' +
        '            </td>' +
        '            <td style="text-align:right;border-left: 1px solid #dddddd;">' +
        '                ₹' + TotalAmount +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '</body>' +
        '</html>';

    var path = require('path');
    var os = require('os');
    console.log("Proessing PDF")
    var script = '<script>' +
        'function myFunction() {' +
        'var elmnt = document.getElementById("Table2");' +
        'var txt =  elmnt.offsetHeight;' +
        'var newheight = txt + 230;' +
        'var otherheight = txt+350;' +
        '    var something = document.getElementById("Table3");' +
        '    something.style.top = newheight+"px";' +
        '    var otherthing = document.getElementById("wb_Text6");' +
        '    otherthing.style.top = otherheight+"px"; ' +
        '}' +
        '</script>';
    var conversion = require("phantom-html-to-pdf")({
        phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
        tmpDir: os.tmpDir(),
        NumberOfWorkers: 4,
        waitForJS: true,
        waitForJSVarName: script,
        paperSize: {
            format: "A4", orientation: "portrait"
        },
        fitToPage: true,
        format: {
            quality: 100
        }
    });
    var optionsPDF = {
        html: html,
        footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
            '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
        fitToPage: true
    };
    console.log("Proessing PDF started")
    conversion(optionsPDF, function (err, res) {
        console.log("PDF process going")
        if (err) {
            console.log('Oh noes! Errorz!');
            console.log(err);
        } else {
            // if (parseInt(success.process_code) == 0) {
            console.log("response")
            console.log(res);
            var nfile = res.stream.path;
            console.log("path");
            console.log(nfile);
            // console.log(res.logs);
            // console.log(res.NumberOfPages);
            console.log("pdf done");

            var maildata = {
                from: config.mailgun.frommail,
                to: 'srinivas.seri@ezshipp.com',
                cc: ['sri.thokala@ezshipp.com', 'nikhil.bodanpally@ezshipp.com', 'manohar.ganumala@ezshipp.com'],
                bcc: 'uday@evontex.com',
                subject: "COD Subtotal Collection of Last Week",
                html: '<h3>Biker Subtotal Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
                attachment: nfile
            };
            // var maildata = {
            //     from: config.mailgun.frommail,
            //     to: 'uday@evontex.com',
            //     subject: "COD Subtotal Collection of Last Week",
            //     html: '<h3>Biker Subtotal Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
            //     attachment: nfile
            // };
            mailgun.messages().send(maildata, function (error, body) {
                callback('Driver Invoicing Generated and Mail Sent Successfully');
                me.fs.unlink(nfile, function () {
                    console.log("Pdf unlink successfully");
                })
            });
        }
    });
};
customermod.prototype.Driver_Invoicing_Delivery_Charges = function (DriverPriceData, data, callback) {
    var me = this;
    var moment = require('moment');
    var config = require("../Config/config.js");
    var Config = require("../Config/config.js");
    var mailgun = require('mailgun-js')({ apiKey: config.mailgun.api_key, domain: config.mailgun.domain });
    var generationDate = moment().utcOffset(330).format('DD/MM/YYYY');
    var headingData = '<tr>' +
        '<th class="th">' +
        '                <strong>Biker Name</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[0].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[1].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[2].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[3].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[4].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[5].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[6].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>Total Amount</strong>' +
        '            </th>' +
        '</tr>'
    var DriverCollection = '';
    var TotalAmount = 0;
    var DriverNamePhoneNumber;
    for (var i = 0; i < DriverPriceData.length; i++) {
        if (DriverPriceData[i].DriverPhoneNumber == '8801362790') {
            console.log("Biscuit");
        } else {
            TotalAmount += parseFloat(DriverPriceData[i].Total_Price);
            DriverNamePhoneNumber = DriverPriceData[i].DriverName + ' (' + DriverPriceData[i].DriverPhoneNumber + ')';
            DriverCollection += '        <tr>' +
                '            <td class="td" style="text-align:center;">' +
                DriverNamePhoneNumber +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[0].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[1].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[2].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[3].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[4].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[5].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[6].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].Total_Price +
                '            </td>' +
                '        </tr>';
        }
    }

    var html = '<!doctype html>' +
        '<html>' +
        '<head>' +
        '    <meta charset="utf-8">' +
        '    <style>' +
        '        body {' +
        '            background-color: #FFFFFF;' +
        '            color: #000000;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 13px;' +
        '            line-height: 1.1875;' +
        '            margin: 0;' +
        '            padding: 0;' +
        '            max-width: 520px;' +
        '        }' +
        '        #Line1 {' +
        '            border-width: 0;' +
        '            height: 78px;' +
        '            width: 8px;' +
        '        }' +
        '        a {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        a:visited {' +
        '            color: #800080;' +
        '        }' +
        '        a:active {' +
        '            color: #FF0000;' +
        '        }' +
        '        a:hover {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        h1 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 32px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h2 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 27px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h3 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 24px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h4 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 21px;' +
        '            font-style: italic;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h5 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 19px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h6 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        .table2 {' +
        '            margin-left: 5px;' +
        '            border: 1px solid #dddddd;' +
        '            width: 510px;' +
        '            margin-top: 10px;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 7px;' +
        '            font-style: bolder;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '        }' +
        '        .th {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '        .td {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '    </style>' +
        '</head>' +
        '<body>' +
        '    <table>' +
        '        <tr>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new.png" alt="" style="margin-left:10px;width: 90%;"></div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
        '                </div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
        '                </div>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="margin-left:62%;margin-top:10px;">' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Date:</strong>' + generationDate +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-From:</strong>' + data.from_date +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-To:</strong>' + data.to_date +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table class="table2">' +
        headingData +
        DriverCollection +
        '        <tr>' +
        '            <td colspan="8" style="text-align:right;">' +
        '                <strong>Total Bikers Amount</strong>' +
        '            </td>' +
        '            <td style="text-align:right;border-left: 1px solid #dddddd;">' +
        '                ₹' + TotalAmount +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '</body>' +
        '</html>';

    var path = require('path');
    var os = require('os');
    console.log("Proessing PDF")
    var script = '<script>' +
        'function myFunction() {' +
        'var elmnt = document.getElementById("Table2");' +
        'var txt =  elmnt.offsetHeight;' +
        'var newheight = txt + 230;' +
        'var otherheight = txt+350;' +
        '    var something = document.getElementById("Table3");' +
        '    something.style.top = newheight+"px";' +
        '    var otherthing = document.getElementById("wb_Text6");' +
        '    otherthing.style.top = otherheight+"px"; ' +
        '}' +
        '</script>';
    var conversion = require("phantom-html-to-pdf")({
        phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
        tmpDir: os.tmpDir(),
        NumberOfWorkers: 4,
        waitForJS: true,
        waitForJSVarName: script,
        paperSize: {
            format: "A4", orientation: "portrait"
        },
        fitToPage: true,
        format: {
            quality: 100
        }
    });
    var optionsPDF = {
        html: html,
        footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
            '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
        fitToPage: true
    };
    console.log("Proessing PDF started")
    conversion(optionsPDF, function (err, res) {
        console.log("PDF process going")
        if (err) {
            console.log('Oh noes! Errorz!');
            console.log(err);
        } else {
            // if (parseInt(success.process_code) == 0) {
            console.log("response")
            console.log(res);
            var nfile = res.stream.path;
            console.log("path");
            console.log(nfile);
            // console.log(res.logs);
            // console.log(res.NumberOfPages);
            console.log("pdf done");

            var maildata = {
                from: config.mailgun.frommail,
                to: 'srinivas.seri@ezshipp.com',
                cc: ['sri.thokala@ezshipp.com', 'nikhil.bodanpally@ezshipp.com', 'manohar.ganumala@ezshipp.com'],
                bcc: 'uday@evontex.com',
                subject: "COD Shipping Collection of Last Week",
                html: '<h3>Biker Shipping Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
                attachment: nfile
            };
            // var maildata = {
            //     from: config.mailgun.frommail,
            //     to: 'uday@evontex.com',
            //     subject: "COD Shipping Collection of Last Week",
            //     html: '<h3>Biker Shipping Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
            //     attachment: nfile
            // };
            mailgun.messages().send(maildata, function (error, body) {
                callback('Driver Invoicing Generated and Mail Sent Successfully');
                me.fs.unlink(nfile, function () {
                    console.log("Pdf unlink successfully");
                })
            });
        }
    });
};

customermod.prototype.Driver_Invoicing_Additional_Weights = function (DriverPriceData, data, callback) {
    var me = this;
    var moment = require('moment');
    var config = require("../Config/config.js");
    var Config = require("../Config/config.js");
    var mailgun = require('mailgun-js')({ apiKey: config.mailgun.api_key, domain: config.mailgun.domain });
    var generationDate = moment().utcOffset(330).format('DD/MM/YYYY');
    var headingData = '<tr>' +
        '<th class="th">' +
        '                <strong>Biker Name</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[0].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[1].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[2].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[3].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[4].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[5].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[6].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>Total Amount</strong>' +
        '            </th>' +
        '</tr>'
    var DriverCollection = '';
    var TotalAmount = 0;
    var DriverNamePhoneNumber;
    for (var i = 0; i < DriverPriceData.length; i++) {
        if (DriverPriceData[i].DriverPhoneNumber == '8801362790') {
            console.log("Biscuit");
        } else {
            TotalAmount += parseFloat(DriverPriceData[i].Total_Price);
            DriverNamePhoneNumber = DriverPriceData[i].DriverName + ' (' + DriverPriceData[i].DriverPhoneNumber + ')';
            DriverCollection += '        <tr>' +
                '            <td class="td" style="text-align:center;">' +
                DriverNamePhoneNumber +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[0].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[1].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[2].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[3].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[4].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[5].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[6].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].Total_Price +
                '            </td>' +
                '        </tr>';
        }
    }

    var html = '<!doctype html>' +
        '<html>' +
        '<head>' +
        '    <meta charset="utf-8">' +
        '    <style>' +
        '        body {' +
        '            background-color: #FFFFFF;' +
        '            color: #000000;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 13px;' +
        '            line-height: 1.1875;' +
        '            margin: 0;' +
        '            padding: 0;' +
        '            max-width: 520px;' +
        '        }' +
        '        #Line1 {' +
        '            border-width: 0;' +
        '            height: 78px;' +
        '            width: 8px;' +
        '        }' +
        '        a {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        a:visited {' +
        '            color: #800080;' +
        '        }' +
        '        a:active {' +
        '            color: #FF0000;' +
        '        }' +
        '        a:hover {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        h1 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 32px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h2 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 27px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h3 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 24px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h4 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 21px;' +
        '            font-style: italic;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h5 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 19px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h6 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        .table2 {' +
        '            margin-left: 5px;' +
        '            border: 1px solid #dddddd;' +
        '            width: 510px;' +
        '            margin-top: 10px;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 7px;' +
        '            font-style: bolder;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '        }' +
        '        .th {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '        .td {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '    </style>' +
        '</head>' +
        '<body>' +
        '    <table>' +
        '        <tr>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new.png" alt="" style="margin-left:10px;width: 90%;"></div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
        '                </div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
        '                </div>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="margin-left:62%;margin-top:10px;">' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Date:</strong>' + generationDate +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-From:</strong>' + data.from_date +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-To:</strong>' + data.to_date +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table class="table2">' +
        headingData +
        DriverCollection +
        '        <tr>' +
        '            <td colspan="8" style="text-align:right;">' +
        '                <strong>Total Bikers Amount</strong>' +
        '            </td>' +
        '            <td style="text-align:right;border-left: 1px solid #dddddd;">' +
        '                ₹' + TotalAmount +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '</body>' +
        '</html>';

    var path = require('path');
    var os = require('os');
    console.log("Proessing PDF")
    var script = '<script>' +
        'function myFunction() {' +
        'var elmnt = document.getElementById("Table2");' +
        'var txt =  elmnt.offsetHeight;' +
        'var newheight = txt + 230;' +
        'var otherheight = txt+350;' +
        '    var something = document.getElementById("Table3");' +
        '    something.style.top = newheight+"px";' +
        '    var otherthing = document.getElementById("wb_Text6");' +
        '    otherthing.style.top = otherheight+"px"; ' +
        '}' +
        '</script>';
    var conversion = require("phantom-html-to-pdf")({
        phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
        tmpDir: os.tmpDir(),
        NumberOfWorkers: 4,
        waitForJS: true,
        waitForJSVarName: script,
        paperSize: {
            format: "A4", orientation: "portrait"
        },
        fitToPage: true,
        format: {
            quality: 100
        }
    });
    var optionsPDF = {
        html: html,
        footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
            '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
        fitToPage: true
    };
    console.log("Proessing PDF started")
    conversion(optionsPDF, function (err, res) {
        console.log("PDF process going")
        if (err) {
            console.log('Oh noes! Errorz!');
            console.log(err);
        } else {
            // if (parseInt(success.process_code) == 0) {
            console.log("response")
            console.log(res);
            var nfile = res.stream.path;
            console.log("path");
            console.log(nfile);
            // console.log(res.logs);
            // console.log(res.NumberOfPages);
            console.log("pdf done");

            var maildata = {
                from: config.mailgun.frommail,
                to: 'srinivas.seri@ezshipp.com',
                cc: ['sri.thokala@ezshipp.com', 'nikhil.bodanpally@ezshipp.com', 'manohar.ganumala@ezshipp.com'],
                bcc: 'uday@evontex.com',
                subject: "Additional Weight COD Collection of Last Week",
                html: '<h3>Biker Additional Weight COD Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
                attachment: nfile
            };
            // var maildata = {
            //     from: config.mailgun.frommail,
            //     to: 'uday@evontex.com',
            //     subject: "Additional Weight COD Collection of Last Week",
            //     html: '<h3>Biker Additional Weight COD Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
            //     attachment: nfile
            // };
            mailgun.messages().send(maildata, function (error, body) {
                callback('Driver Invoicing Generated and Mail Sent Successfully');
                me.fs.unlink(nfile, function () {
                    console.log("Pdf unlink successfully");
                })
            });
        }
    });
};
customermod.prototype.Driver_Week_Collection_Invoice = function (DriverPriceData, data, callback) {
    var me = this;
    var moment = require('moment');
    var config = require("../Config/config.js");
    var Config = require("../Config/config.js");
    var mailgun = require('mailgun-js')({ apiKey: config.mailgun.api_key, domain: config.mailgun.domain });
    var generationDate = moment().utcOffset(330).format('DD/MM/YYYY');
    var headingData = '<tr>' +
        '<th class="th">' +
        '                <strong>Biker Name</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[0].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[1].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[2].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[3].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[4].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[5].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>' + DriverPriceData[0].PriceDayWiseData[6].Date + '</strong>' +
        '            </th>' +
        '            <th class="th">' +
        '                <strong>Total Amount</strong>' +
        '            </th>' +
        '</tr>'
    var DriverCollection = '';
    var TotalAmount = 0;
    var DriverNamePhoneNumber;
    for (var i = 0; i < DriverPriceData.length; i++) {
        if (DriverPriceData[i].DriverPhoneNumber == '8801362790') {
            console.log("Biscuit");
        } else {
            TotalAmount += parseFloat(DriverPriceData[i].Total_Price);
            DriverNamePhoneNumber = DriverPriceData[i].DriverName + ' (' + DriverPriceData[i].DriverPhoneNumber + ')';
            DriverCollection += '        <tr>' +
                '            <td class="td" style="text-align:center;">' +
                DriverNamePhoneNumber +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[0].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[1].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[2].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[3].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[4].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[5].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].PriceDayWiseData[6].Price +
                '            </td>' +
                '            <td class="td" style="text-align:right;">' +
                '                ₹' + DriverPriceData[i].Total_Price +
                '            </td>' +
                '        </tr>';
        }
    }

    var html = '<!doctype html>' +
        '<html>' +
        '<head>' +
        '    <meta charset="utf-8">' +
        '    <style>' +
        '        body {' +
        '            background-color: #FFFFFF;' +
        '            color: #000000;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 13px;' +
        '            line-height: 1.1875;' +
        '            margin: 0;' +
        '            padding: 0;' +
        '            max-width: 520px;' +
        '        }' +
        '        #Line1 {' +
        '            border-width: 0;' +
        '            height: 78px;' +
        '            width: 8px;' +
        '        }' +
        '        a {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        a:visited {' +
        '            color: #800080;' +
        '        }' +
        '        a:active {' +
        '            color: #FF0000;' +
        '        }' +
        '        a:hover {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '        h1 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 32px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h2 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 27px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h3 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 24px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h4 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 21px;' +
        '            font-style: italic;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h5 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 19px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        h6 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '        .table2 {' +
        '            margin-left: 5px;' +
        '            border: 1px solid #dddddd;' +
        '            width: 510px;' +
        '            margin-top: 10px;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 7px;' +
        '            font-style: bolder;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '        }' +
        '        .th {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '        .td {' +
        '            border-left: 1px solid #dddddd;' +
        '            border-bottom: 1px solid #dddddd;' +
        '        }' +
        '    </style>' +
        '</head>' +
        '<body>' +
        '    <table>' +
        '        <tr>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new.png" alt="" style="margin-left:10px;width: 90%;"></div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
        '                </div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
        '                </div>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="margin-left:62%;margin-top:10px;">' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Date:</strong>' + generationDate +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-From:</strong>' + data.from_date +
        '            </td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td style="float:right;">' +
        '                <strong>Invoice-To:</strong>' + data.to_date +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table class="table2">' +
        headingData +
        DriverCollection +
        '        <tr>' +
        '            <td colspan="8" style="text-align:right;">' +
        '                <strong>Total Bikers Amount</strong>' +
        '            </td>' +
        '            <td style="text-align:right;border-left: 1px solid #dddddd;">' +
        '                ₹' + TotalAmount +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '</body>' +
        '</html>';

    var path = require('path');
    var os = require('os');
    console.log("Proessing PDF")
    var script = '<script>' +
        'function myFunction() {' +
        'var elmnt = document.getElementById("Table2");' +
        'var txt =  elmnt.offsetHeight;' +
        'var newheight = txt + 230;' +
        'var otherheight = txt+350;' +
        '    var something = document.getElementById("Table3");' +
        '    something.style.top = newheight+"px";' +
        '    var otherthing = document.getElementById("wb_Text6");' +
        '    otherthing.style.top = otherheight+"px"; ' +
        '}' +
        '</script>';
    var conversion = require("phantom-html-to-pdf")({
        phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
        tmpDir: os.tmpDir(),
        NumberOfWorkers: 4,
        waitForJS: true,
        waitForJSVarName: script,
        paperSize: {
            format: "A4", orientation: "portrait"
        },
        fitToPage: true,
        format: {
            quality: 100
        }
    });
    var optionsPDF = {
        html: html,
        footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
            '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
        fitToPage: true
    };
    console.log("Proessing PDF started")
    conversion(optionsPDF, function (err, res) {
        console.log("PDF process going")
        if (err) {
            console.log('Oh noes! Errorz!');
            console.log(err);
        } else {
            // if (parseInt(success.process_code) == 0) {
            console.log("response")
            console.log(res);
            var nfile = res.stream.path;
            console.log("path");
            console.log(nfile);
            // console.log(res.logs);
            // console.log(res.NumberOfPages);
            console.log("pdf done");

            var maildata = {
                from: config.mailgun.frommail,
                to: 'srinivas.seri@ezshipp.com',
                cc: ['sri.thokala@ezshipp.com', 'nikhil.bodanpally@ezshipp.com', 'manohar.ganumala@ezshipp.com'],
                bcc: 'uday@evontex.com',
                subject: "COD Collection of Last Week",
                html: '<h3>Biker COD Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
                attachment: nfile
            };
            // var maildata = {
            //     from: config.mailgun.frommail,
            //     to: 'uday@evontex.com',
            //     subject: "COD Collection of Last Week",
            //     html: '<h3>Biker COD Collection Amount from ' + data.from_date + ' to ' + data.to_date + '<h3>',
            //     attachment: nfile
            // };
            mailgun.messages().send(maildata, function (error, body) {
                callback('Driver Invoicing Generated and Mail Sent Successfully');
                me.fs.unlink(nfile, function () {
                    console.log("Pdf unlink successfully");
                })
            });
        }
    });
};
//Formatted String
customermod.prototype.Format_Beautify_String = function (string) {
    string = string.replace(/\s\s+/g, ' ');
    string = string.replace(/  +/g, ' ');
    string = string.replace(/^ /, '');
    string = string.replace(/\s\s*$/, '');
    string = titleString(string);
    function titleString(str) {
        var myArr = str.toLowerCase().split(" ");
        for (var a = 0; a < myArr.length; a++) {
            myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
        }
        return myArr.join(" ");
    }
    return string;
};
customermod.prototype.DriverWeekCollectionData_Subtotal = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var async = require('async');
    var moment = require('moment');
    function ActiveDrivers(callback) {
        process.nextTick(function () {
            Drivers.find({ acc_status: 3 }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function OrderPriceFunction(from_moment, to_moment, DriverData, callback) {
        process.nextTick(function () {
            var query;
            var DriverID = DriverData._id;
            query = {
                "Date": {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "status": 14,
                "Whether_Deleted": false,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query);
            var Total_Collection = 0;
            Orders.find(query).sort('driverseqId').exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var subtotal_amount = parseFloat(item.subtotal_amount);
                        Total_Collection += subtotal_amount;
                        resp();
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            })
        })
    }
    sync(function () {
        var DriverData = ActiveDrivers.sync(null);
        var DriverPriceData = [];
        async.each(DriverData, function (item, resp) {
            var Total_Price = 0;
            console.log(item);
            console.log(values);
            var PriceDayWiseData = [];
            var startDateMoment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var endDateMoment = moment(values.to_date, 'DD/MM/YYYY').add(1, 'days').subtract(330, 'minutes');
            var differenceDays = Math.abs(startDateMoment.diff(endDateMoment, 'days'));
            console.log(startDateMoment);
            console.log(endDateMoment);
            var startDay = 0;
            var endDay = 1;
            var from_moment;
            var to_moment;
            console.log(values);
            for (var day = 0; day < differenceDays; day++) {
                from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(startDay, 'days');
                to_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(endDay, 'days');
                var Price = OrderPriceFunction.sync(null, from_moment, to_moment, item);
                PriceDayWiseData.push({
                    Date: from_moment.utcOffset(330).format('dddd (DD/MM/YYYY)'),
                    Price: Price
                });
                Total_Price += Price;
                startDay++;
                endDay++;
            };
            var DriverID = item._id;
            var DriverName = me.Format_Beautify_String(item.name + ' ' + item.lname);
            var DriverPhoneNumber = item.phone;
            DriverPriceData.push({
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                PriceDayWiseData: PriceDayWiseData,
                Total_Price: Total_Price
            })
            resp();
        }, function (err) {
            if (!err) {
                callback(false, DriverPriceData);
            }
        })
    })
}
customermod.prototype.DriverWeekCollectionData_Delivery_Charges = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var async = require('async');
    var moment = require('moment');
    function ActiveDrivers(callback) {
        process.nextTick(function () {
            Drivers.find({ acc_status: 3 }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function OrderPriceFunction(from_moment, to_moment, DriverData, callback) {
        process.nextTick(function () {
            var query;
            var DriverID = DriverData._id;
            query = {
                "Date": {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query);
            var Total_Collection = 0;
            Orders.find(query).sort('driverseqId').exec(function (err, Result) {
                if (!err) {
                    async.each(Result, function (item, resp) {
                        var deliverycharge = parseFloat(item.deliverycharge);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = deliverycharge;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = 0;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            })
        })
    }
    sync(function () {
        var DriverData = ActiveDrivers.sync(null);
        var DriverPriceData = [];
        async.each(DriverData, function (item, resp) {
            var Total_Price = 0;
            console.log(item);
            console.log(values);
            var PriceDayWiseData = [];
            var startDateMoment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var endDateMoment = moment(values.to_date, 'DD/MM/YYYY').add(1, 'days').subtract(330, 'minutes');
            var differenceDays = Math.abs(startDateMoment.diff(endDateMoment, 'days'));
            console.log(startDateMoment);
            console.log(endDateMoment);
            var startDay = 0;
            var endDay = 1;
            var from_moment;
            var to_moment;
            console.log(values);
            for (var day = 0; day < differenceDays; day++) {
                from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(startDay, 'days');
                to_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(endDay, 'days');
                var Price = OrderPriceFunction.sync(null, from_moment, to_moment, item);
                PriceDayWiseData.push({
                    Date: from_moment.utcOffset(330).format('dddd (DD/MM/YYYY)'),
                    Price: Price
                });
                Total_Price += Price;
                startDay++;
                endDay++;
            };
            var DriverID = item._id;
            var DriverName = me.Format_Beautify_String(item.name + ' ' + item.lname);
            var DriverPhoneNumber = item.phone;
            DriverPriceData.push({
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                PriceDayWiseData: PriceDayWiseData,
                Total_Price: Total_Price
            })
            resp();
        }, function (err) {
            if (!err) {
                callback(false, DriverPriceData);
            }
        })
    })
}
customermod.prototype.DriverWeekCollectionData_Additional_Weights = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var async = require('async');
    var moment = require('moment');
    function ActiveDrivers(callback) {
        process.nextTick(function () {
            Drivers.find({ acc_status: 3 }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function OrderPriceFunction(from_moment, to_moment, DriverData, callback) {
        process.nextTick(function () {
            var query;
            var DriverID = DriverData._id;
            query = {
                "Date": {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "status": 14,
                "Whether_Deleted": false,
                "ExceededAmount": {
                    $nin: ["", "0", 0, null]
                },
                "$or": [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverData._id, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverData._id, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query);
            var Total_Collection = 0;
            Orders.find(query).sort('driverseqId').exec(function (err, Result) {
                if (!err) {
                    async.each(Result, function (item, resp) {
                        var ExceededAmount = parseFloat(item.ExceededAmount);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = ExceededAmount;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = 0;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            })
        })
    }
    sync(function () {
        var DriverData = ActiveDrivers.sync(null);
        var DriverPriceData = [];
        async.each(DriverData, function (item, resp) {
            var Total_Price = 0;
            console.log(item);
            console.log(values);
            var PriceDayWiseData = [];
            var startDateMoment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var endDateMoment = moment(values.to_date, 'DD/MM/YYYY').add(1, 'days').subtract(330, 'minutes');
            var differenceDays = Math.abs(startDateMoment.diff(endDateMoment, 'days'));
            console.log(startDateMoment);
            console.log(endDateMoment);
            var startDay = 0;
            var endDay = 1;
            var from_moment;
            var to_moment;
            console.log(values);
            for (var day = 0; day < differenceDays; day++) {
                from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(startDay, 'days');
                to_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(endDay, 'days');
                var Price = OrderPriceFunction.sync(null, from_moment, to_moment, item);
                PriceDayWiseData.push({
                    Date: from_moment.utcOffset(330).format('dddd (DD/MM/YYYY)'),
                    Price: Price
                });
                Total_Price += Price;
                startDay++;
                endDay++;
            };
            var DriverID = item._id;
            var DriverName = me.Format_Beautify_String(item.name + ' ' + item.lname);
            var DriverPhoneNumber = item.phone;
            DriverPriceData.push({
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                PriceDayWiseData: PriceDayWiseData,
                Total_Price: Total_Price
            })
            resp();
        }, function (err) {
            if (!err) {
                callback(false, DriverPriceData);
            }
        })
    })
}
customermod.prototype.DriverWeekCollectionData = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var async = require('async');
    var moment = require('moment');
    function ActiveDrivers(callback) {
        process.nextTick(function () {
            Drivers.find({ acc_status: 3 }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function OrderPriceFunction(from_moment, to_moment, DriverData, callback) {
        process.nextTick(function () {
            var query;
            var DriverID = DriverData._id;
            query = {
                "Date": {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query);
            var Price = 0;
            Orders.find(query).sort('driverseqId').exec(function (err, Result) {
                if (!err) {
                    async.each(Result, function (item, resp) {
                        var deliverycharge = parseFloat(item.deliverycharge);
                        var subtotal_amount = parseFloat(item.subtotal_amount);
                        Customers.findOne({ _id: item.userId }).exec(function (err, CustomerData) {
                            if (err) {
                                var tot_amt = deliverycharge + subtotal_amount;
                                Price += tot_amt;
                                resp();
                            } else {
                                if (CustomerData == null) {
                                    resp();
                                } else if (CustomerData != null) {
                                    if (CustomerData.Premium_User == true && CustomerData.Premium_Status == true) {
                                        if (item.Monthly_Invoice == true) {
                                            var tot_amt = subtotal_amount;
                                            Price += tot_amt;
                                            resp();
                                        } else if (item.Monthly_Invoice == false) {
                                            var tot_amt = deliverycharge + subtotal_amount;
                                            Price += tot_amt;
                                            resp();
                                        }
                                    } else {
                                        var tot_amt = deliverycharge + subtotal_amount;
                                        Price += tot_amt;
                                        resp();
                                    }
                                }
                            }
                        })
                    }, function (err) {
                        if (!err) {
                            callback(null, Price);
                        }
                    })
                }
            })
        })
    }
    sync(function () {
        var DriverData = ActiveDrivers.sync(null);
        var DriverPriceData = [];
        async.each(DriverData, function (item, resp) {
            var Total_Price = 0;
            console.log(item);
            console.log(values);
            var PriceDayWiseData = [];
            var startDateMoment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var endDateMoment = moment(values.to_date, 'DD/MM/YYYY').add(1, 'days').subtract(330, 'minutes');
            var differenceDays = Math.abs(startDateMoment.diff(endDateMoment, 'days'));
            console.log(startDateMoment);
            console.log(endDateMoment);
            var startDay = 0;
            var endDay = 1;
            var from_moment;
            var to_moment;
            console.log(values);
            for (var day = 0; day < differenceDays; day++) {
                from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(startDay, 'days');
                to_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(endDay, 'days');
                var Price = OrderPriceFunction.sync(null, from_moment, to_moment, item);
                PriceDayWiseData.push({
                    Date: from_moment.utcOffset(330).format('dddd (DD/MM/YYYY)'),
                    Price: Price
                });
                Total_Price += Price;
                startDay++;
                endDay++;
            };
            var DriverID = item._id;
            var DriverName = me.Format_Beautify_String(item.name + ' ' + item.lname);
            var DriverPhoneNumber = item.phone;
            DriverPriceData.push({
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                PriceDayWiseData: PriceDayWiseData,
                Total_Price: Total_Price
            })
            resp();
        }, function (err) {
            if (!err) {
                callback(false, DriverPriceData);
            }
        })
    })
}

//Find All Driver On going job lat longs

customermod.prototype.Find_ALL_Driver_Ongoing_Orders = function (values, DriverData, callback) {
    var me = this;
    var DriverID = values.DriverID;
    var async = require('async')
    var query = {
        Whether_Deleted: false,
        "eventLog.driverid": DriverID,
        "status": { $in: [7, 10, 11, 12, 15, 16, 18, 20] }
    }
    me.Orders.find(query, { eventLog: { $slice: -1 } }).sort({
        Date: -1
    }).exec(function (err, Result) {
        if (err) {
            console.log(err);
        } else {
            console.log(Result);
            var OrderData = [];
            async.eachSeries(Result, function (item, resp) {
                OrderData.push({
                    orderseqId: item.orderseqId,
                    customerName: item.customerName,
                    customerPhone: item.customerPhone,
                    receiverName: item.receiverName,
                    receiverPhone: item.receiverPhone,
                    status: item.status,
                    pickAddress: item.pickAddress,
                    dropAddress: item.dropAddress,
                    pickLatitude: item.pickLocation.Latitude,
                    pickLongitude: item.pickLocation.Longitude,
                    dropLatitude: item.dropLocation.Latitude,
                    dropLongitude: item.dropLocation.Longitude
                });
                resp();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            OrderData: OrderData
                        }
                    }));
                }
            })
        }
    })
};

// Find  All  Orders of Customers
customermod.prototype.VIEW_ALL_CUSTOMER_ORDERS = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    var sync = require('sync');
    function OrderCountFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                userId: values.CustomerID,
                Whether_Deleted: false
            };
            Orders.count(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                userId: values.CustomerID,
                Whether_Deleted: false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = 10;
            if (values.limit != null) {
                toLimit = parseInt(values.limit);
            };
            var sortOptions = {
                Date: -1
            }
            if (values.sortOptions != null && values.sortOptions != {}) {
                sortOptions = values.sortOptions
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = OrderCountFunction.sync(null, values);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {

            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            OrderData.push({
                SenderName: Result[t].SenderName,
                SenderPhoneNumber: Result[t].SenderPhoneNumber,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                bookingType: Result[t].bookingType,
                WhetherStoreOrder: Result[t].WhetherStoreOrder,
                BranchID: Result[t].BranchID,
                CartID: Result[t].CartID,
                StoreName: Result[t].StoreName,
                StorePhoneNumber: Result[t].StorePhoneNumber,
                StoreEmailID: Result[t].StoreEmailID,
                StoreAddress: Result[t].StoreAddress,
                Cart_Amount: Result[t].Cart_Amount,
                Cart_Parcel_Wieght: Result[t].Cart_Parcel_Wieght,
                StoreCartData: Result[t].StoreCartData
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};

//Update Driver Zone
customermod.prototype.Edit_Driver_Zone = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        depoId: values.ZoneID
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (err) {
            console.log(err);
        } else {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Driver Zone Edited Successfully'
                }
            }));
        }
    })
};

customermod.prototype.Generate_Employee_Payslip_Adding_Salary = function (values, EmployeeData, SalaryData, callback) {
    var sync = require('sync');
    var me = this;
    var Orders = me.Ezshipp_Employee_Paid_Salaries;
    var moment = require('moment');
    var Employee_Basic_Salary = parseInt(values.Employee_Basic_Salary);
    var Employee_PF = parseInt(values.Employee_PF);
    var Employee_TDS = parseInt(values.Employee_TDS);
    var Employee_Loss_of_Pay = parseInt(values.Employee_Loss_of_Pay);
    var ExpensesAmount = parseInt(values.ExpensesAmount);
    var Total_Deductions = parseInt(values.Total_Deductions);
    var Employee_Total_Salary = parseInt(values.Employee_Total_Salary);
    var currentDateTime = moment().utcOffset(330).format('DD/MM/YY h:mm A');
    var PayslipNumber = SalaryData.PayslipNumber;
    var Month_Number = parseInt(values.Month_Number);
    var Year_Number = parseInt(values.Year_Number);
    var MonthArray = [
        "",
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ];

    var Month_String = MonthArray[Month_Number];
    var Payment_for = Month_String + "-" + Year_Number;
    var Employee_Name = EmployeeData.Employee_Name;
    var Bank_Account_No = EmployeeData.Bank_Account_No;
    var Bank_Name = EmployeeData.Bank_Name;
    var Bank_IFSC_No = EmployeeData.Bank_IFSC_No;
    var Bank_String = Bank_Account_No + '<br>' + Bank_IFSC_No + '<br>' + Bank_Name;
    var Pan_Card_Number = EmployeeData.Pan_Card_Number;
    var Employee_Company_ID = EmployeeData.Employee_Company_ID;
    var html = '<!doctype html>' +
        '<html>' +
        '' +
        '<head>' +
        '    <meta charset="utf-8">' +
        '' +
        '' +
        '    <style>' +
        '        body {' +
        '            background-color: #FFFFFF;' +
        '            color: #000000;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 13px;' +
        '            line-height: 1.1875;' +
        '            margin: 0;' +
        '            padding: 0;' +
        '        }' +
        '' +
        '        #wb_Text3 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text3 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text4 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text4 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text5 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text5 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #Table1 {' +
        '            border: 0px #C0C0C0 solid;' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border-collapse: separate;' +
        '            border-spacing: 1px;' +
        '        }' +
        '' +
        '        #Table1 td {' +
        '            padding: 0px 0px 0px 0px;' +
        '        }' +
        '' +
        '        #Table1 td div {' +
        '            white-space: nowrap;' +
        '        }' +
        '' +
        '        #Table1 .cell0 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 68px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table1 .cell1 {' +
        '            background-color: #D3D3D3;' +
        '            background-image: none;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table1 .cell2 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 68px;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table1 .cell3 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table1 .cell4 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 72px;' +
        '            height: 28px;' +
        '        }' +
        '' +
        '        #Table1 .cell5 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            height: 28px;' +
        '        }' +
        '' +
        '        #Table2 {' +
        '            border: 1px #000000 solid;' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border-collapse: collapse;' +
        '            border-spacing: 0px;' +
        '        }' +
        '' +
        '        #Table2 td {' +
        '            padding: 0px 0px 0px 0px;' +
        '        }' +
        '' +
        '        #Table2 td div {' +
        '            white-space: nowrap;' +
        '        }' +
        '' +
        '        #Table2 .cell0 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            width: 118px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell1 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            width: 140px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell2 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            width: 142px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell3 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            width: 112px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell4 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            padding-left: 2px;' +
        '            width: 118px;' +
        '            height: 32px;' +
        '        }' +
        '' +
        '        #Table2 .cell5 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            width: 140px;' +
        '            height: 32px;' +
        '            padding-right: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell6 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 142px;' +
        '            height: 32px;' +
        '            padding-left: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell7 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            width: 112px;' +
        '            height: 32px;' +
        '            padding-right: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell8 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 140px;' +
        '            height: 32px;' +
        '        }' +
        '' +
        '        #Table2 .cell9 {' +
        '            background-color: #C0C0C0;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 118px;' +
        '            height: 32px;' +
        '            padding-left: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell10 {' +
        '            background-color: #C0C0C0;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            width: 140px;' +
        '            height: 32px;' +
        '            padding-right: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell11 {' +
        '            background-color: #C0C0C0;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 142px;' +
        '            height: 32px;' +
        '            padding-left: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell12 {' +
        '            background-color: #C0C0C0;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            width: 112px;' +
        '            height: 32px;' +
        '            padding-right: 2px;' +
        '        }' +
        '' +
        '        #Table2 .cell13 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            height: 32px;' +
        '        }' +
        '' +
        '        #Line1 {' +
        '            border-width: 0;' +
        '            height: 78px;' +
        '            width: 8px;' +
        '        }' +
        '' +
        '        #wb_Text7 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text7 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #Image1 {' +
        '            border: 0px #000000 solid;' +
        '            padding: 0px 0px 0px 0px;' +
        '            left: 0;' +
        '            top: 0;' +
        '            width: 100%;' +
        '            height: 100%;' +
        '        }' +
        '' +
        '        #wb_Text8 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text8 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        a {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '' +
        '        a:visited {' +
        '            color: #800080;' +
        '        }' +
        '' +
        '        a:active {' +
        '            color: #FF0000;' +
        '        }' +
        '' +
        '        a:hover {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '' +
        '        h1 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 32px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h2 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 27px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h3 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 24px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h4 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 21px;' +
        '            font-style: italic;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h5 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 19px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h6 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        .CustomStyle {' +
        '            font-family: "Courier New";' +
        '            font-weight: bold;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #2E74B5;' +
        '            background-color: transparent;' +
        '        }' +
        '    </style>' +
        '</head>' +
        '' +
        '<body>' +
        '    <!-- <div id="wb_Image1" style="position:absolute;left:17px;top:17px;width:263px;height:49px;z-index:8;">' +
        '        <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new.png" id="Image1" alt=""></div>' +
        '    <div id="wb_Line1" style="position:absolute;left:287px;top:5px;width:2px;height:70px;z-index:6;">' +
        '        <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt=""></div>' +
        '    <div id="wb_Text7" style="position:absolute;left:316px;top:11px;width:213px;height:60px;z-index:7;">' +
        '        <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span></div> -->' +
        '    <table>' +
        '        <tr>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new.png" alt="" style="margin-left:10px;width: 90%;"></div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
        '                </div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
        '                </div>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <div id="wb_Text8" style="position:absolute;left:12px;top:92px;width:221px;height:14px;z-index:9;">' +
        '        <span style="color:#000000;font-family:Arial;font-size:11px;"><strong>' + Employee_Name + '</strong></span></div>' +
        '    <div id="wb_Text3" style="position:absolute;left:13px;top:110px;width:249px;height:42px;z-index:1;">' +
        '        <span style="color:#000000;font-family:Arial;font-size:11px;">' + Bank_String + '</span></div>' +
        '    <div id="wb_Text4" style="position:absolute;left:13px;top:158px;width:47px;height:14px;z-index:2;">' +
        '        <span style="color:#000000;font-family:Arial;font-size:11px;"><strong>Pancard:</strong></span></div>' +
        '    <div id="wb_Text5" style="position:absolute;left:63px;top:158px;width:47px;height:14px;z-index:3;">' +
        '        <span style="color:#000000;font-family:Arial;font-size:11px;">' + Pan_Card_Number + '</span></div>' +
        '    <table style="position:absolute;left:301px;top:93px;width:228px;height:74px;z-index:4;" id="Table1">' +
        '        <tr>' +
        '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"><strong> DATE:</strong></span></td>' +
        '            <td class="cell1"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">' + currentDateTime + '</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell2"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"><strong>Pay period:</strong></span></td>' +
        '            <td class="cell3"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">' + Payment_for + '</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell4"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"><strong>Employee ID:</strong></span></td>' +
        '            <td class="cell5"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">' + Employee_Company_ID + '</span></td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="position:absolute;left:12px;top:185px;width:517px;height:187px;z-index:5;" id="Table2">' +
        '        <tr>' +
        '            <td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"><strong>Earnings</strong></span></td>' +
        '            <td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"><strong>Amount</strong></span></td>' +
        '            <td class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"><strong>Deductions</strong></span></td>' +
        '            <td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"><strong>Amount</strong></span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> Basic Salary</span></td>' +
        '            <td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> ' + Employee_Basic_Salary + ' </span></td>' +
        '            <td class="cell6"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> PF</span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> ' + Employee_PF + ' </span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell4"> </td>' +
        '            <td class="cell8"> </td>' +
        '            <td class="cell6"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> TDS</span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">' + Employee_TDS + ' </span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell4"> </td>' +
        '            <td class="cell8"> </td>' +
        '            <td class="cell6"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> Expenses</span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">' + ExpensesAmount + '</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell9"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"><strong>Gross Earning</strong></span></td>' +
        '            <td class="cell10"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">' + Employee_Basic_Salary + '</span></td>' +
        '            <td class="cell11"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> <strong>Total Deductions</strong></span></td>' +
        '            <td class="cell12"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">' + Total_Deductions + ' </span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td colspan="3" class="cell13"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"><strong>Net Transferred Salary</strong>   </span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"><strong>' + Employee_Total_Salary + '</strong></span></td>' +
        '        </tr>' +
        '    </table>' +
        '</body>' +
        '' +
        '</html>';
    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    fname = generateFilename();
    fname = 'payslip' + fname + '.pdf';
    var conversion = require("phantom-html-to-pdf")({
        phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
        tmpDir: os.tmpDir(),
        NumberOfWorkers: 4,
        paperSize: {
            format: "A4", orientation: "portrait"
        },
        fitToPage: true,
        format: {
            quality: 100
        }
    });
    var optionsPDF = {
        html: html,
        footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
            '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span></div>',
        fitToPage: true
    }
    conversion(optionsPDF, function (err, res) {
        console.log("PDF process going")
        if (err) {
            console.log('Oh noes! Errorz!');
            console.log(err);
            callback(null, err);
        } else {
            nfile = res.stream.path;
            console.log("path");
            console.log(nfile);
            console.log("pdf done");
            me.Upload_PDF_AWS(nfile, fname, function (err, responcer) {
                console.log("pdf uploaded");
                var query = {
                    SalaryPaidID: SalaryData.SalaryPaidID
                }
                var changes = {
                    ProcessStage: 2,
                    PDFLink: fname
                };
                var multiplicity = {
                    multi: false
                }
                me.Ezshipp_Employee_Paid_Salaries.update(query, changes, multiplicity).exec(function (err, Result) {
                    console.log("pdf processed")
                    callback('Updated Successfully');
                })
            })
        }
    });
}

customermod.prototype.Driver_Bird_View_Total = function (values, callback) {
    var me = this;
    var async = require('async');
    var query = {
        acc_status: 3
    }
    var toSkip = parseInt(values.skip);
    var fetch = me.Drivers.find(query);
    fetch.sort('-driverseqId');
    fetch.select('driverseqId name lname email profilePic depoId location');
    fetch.skip(toSkip);
    fetch.limit(50);
    fetch.exec(function (err, Result) {
        if (!err) {
            var DriverData = [];
            async.eachSeries(Result, function (item, responcer) {
                var Name = item.name + ' ' + item.lname;
                DriverData.push({
                    DriverID: item._id,
                    driverseqId: item.driverseqId,
                    Name: Name,
                    email: item.email,
                    phone: item.phone,
                    profilePic: item.profilePic,
                    ZoneID: item.depoId,
                    lat: item.location.latitude,
                    long: item.location.longitude
                })
                responcer();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            DriverData: DriverData
                        }
                    }));
                }
            })
        }
    })
};
customermod.prototype.Driver_Bird_View_Zone = function (values, callback) {
    var me = this;
    var async = require('async');
    var query = {
        acc_status: 3,
        depoId: values.ZoneID
    }
    var toSkip = parseInt(values.skip);
    var fetch = me.Drivers.find(query);
    fetch.sort('-driverseqId');
    fetch.select('driverseqId name lname email profilePic depoId location');
    fetch.skip(toSkip);
    fetch.limit(50);
    fetch.exec(function (err, Result) {
        if (!err) {
            var DriverData = [];
            async.eachSeries(Result, function (item, responcer) {
                var Name = item.name + ' ' + item.lname;
                DriverData.push({
                    DriverID: item._id,
                    driverseqId: item.driverseqId,
                    Name: Name,
                    email: item.email,
                    phone: item.phone,
                    profilePic: item.profilePic,
                    depoId: item.depoId,
                    lat: item.location.latitude,
                    long: item.location.longitude
                })
                responcer();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            DriverData: DriverData
                        }
                    }));
                }
            })
        }
    })
};
//New Orders Bird View
customermod.prototype.New_Orders_Bird_View = function (values, callback) {
    var me = this;
    var async = require('async');
    var Orders = me.Orders;
    var query = {
        status: {
            $in: [1]
        },
        Whether_Deleted: false
    };
    var toSkip = parseInt(values.skip);
    var fetch = Orders.find(query);
    fetch.sort('-orderseqId');
    fetch.select('orderseqId SenderName SenderPhoneNumber orderType bookingType pickAddress pickLocation dropAddress dropLocation receiverName receiverPhone status');
    fetch.skip(toSkip);
    fetch.limit(50);
    fetch.exec(function (err, Result) {
        if (!err) {
            var PickData = [];
            var DropData = [];
            async.eachSeries(Result, function (item, responcer) {
                PickData.push({
                    orderID: item._id,
                    orderseqId: item.orderseqId,
                    status: item.status,
                    SenderName: item.SenderName,
                    SenderPhoneNumber: item.SenderPhoneNumber,
                    receiverName: item.receiverName,
                    receiverPhone: item.receiverPhone,
                    orderType: item.orderType,
                    bookingType: item.bookingType,
                    Address: item.pickAddress,
                    lat: item.pickLocation.Latitude,
                    long: item.pickLocation.Longitude
                })
                DropData.push({
                    orderID: item._id,
                    orderseqId: item.orderseqId,
                    status: item.status,
                    SenderName: item.SenderName,
                    SenderPhoneNumber: item.SenderPhoneNumber,
                    receiverName: item.receiverName,
                    receiverPhone: item.receiverPhone,
                    orderType: item.orderType,
                    bookingType: item.bookingType,
                    Address: item.dropAddress,
                    lat: item.dropLocation.Latitude,
                    long: item.dropLocation.Longitude
                })
                responcer();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            PickData: PickData,
                            DropData: DropData
                        }
                    }));
                }
            })
        }
    })
};
//On Going Bird View
customermod.prototype.Ongoing_Orders_Bird_View = function (values, callback) {
    var me = this;
    var async = require('async');
    var Orders = me.Orders;
    var query = {
        status: {
            $in: [7, 10, 11, 12, 16]
        },
        Whether_Deleted: false
    };
    var toSkip = parseInt(values.skip);
    var fetch = Orders.find(query);
    fetch.sort('-orderseqId');
    fetch.select('orderseqId SenderName SenderPhoneNumber orderType bookingType pickAddress pickLocation dropAddress dropLocation receiverName receiverPhone status');
    fetch.skip(toSkip);
    fetch.limit(50);
    fetch.exec(function (err, Result) {
        if (!err) {
            var PickData = [];
            var DropData = [];
            async.eachSeries(Result, function (item, responcer) {
                PickData.push({
                    orderID: item._id,
                    orderseqId: item.orderseqId,
                    status: item.status,
                    SenderName: item.SenderName,
                    SenderPhoneNumber: item.SenderPhoneNumber,
                    receiverName: item.receiverName,
                    receiverPhone: item.receiverPhone,
                    orderType: item.orderType,
                    bookingType: item.bookingType,
                    Address: item.pickAddress,
                    lat: item.pickLocation.Latitude,
                    long: item.pickLocation.Longitude
                })
                DropData.push({
                    orderID: item._id,
                    orderseqId: item.orderseqId,
                    status: item.status,
                    SenderName: item.SenderName,
                    SenderPhoneNumber: item.SenderPhoneNumber,
                    receiverName: item.receiverName,
                    receiverPhone: item.receiverPhone,
                    orderType: item.orderType,
                    bookingType: item.bookingType,
                    Address: item.dropAddress,
                    lat: item.dropLocation.Latitude,
                    long: item.dropLocation.Longitude
                })
                responcer();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            PickData: PickData,
                            DropData: DropData
                        }
                    }));
                }
            })
        }
    })
};
//All Orders Analytics Date_Weise for Bird View
customermod.prototype.All_Orders_Bird_View_Date_Range = function (values, callback) {
    var me = this;
    var async = require('async');
    var Orders = me.Orders;
    var moment = require('moment');
    var from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    var query = {
        Date: {
            $gte: from_moment,
            $lte: to_moment
        },
        Whether_Deleted: false
    };
    var toSkip = parseInt(values.skip);
    var fetch = Orders.find(query);
    fetch.sort('-orderseqId');
    fetch.select('orderseqId SenderName SenderPhoneNumber orderType bookingType pickAddress pickLocation dropAddress dropLocation receiverName receiverPhone status');
    fetch.skip(toSkip);
    fetch.limit(50);
    fetch.exec(function (err, Result) {
        if (!err) {
            console.log("Result");
            console.log(Result.length);
            var OrderData = [];
            async.eachSeries(Result, function (item, responcer) {
                OrderData.push({
                    orderID: item._id,
                    orderseqId: item.orderseqId,
                    status: item.status,
                    SenderName: item.SenderName,
                    SenderPhoneNumber: item.SenderPhoneNumber,
                    receiverName: item.receiverName,
                    receiverPhone: item.receiverPhone,
                    orderType: item.orderType,
                    bookingType: item.bookingType,
                    PAddress: item.pickAddress,
                    Plat: item.pickLocation.Latitude,
                    Plong: item.pickLocation.Longitude,
                    DAddress: item.dropAddress,
                    Dlat: item.dropLocation.Latitude,
                    Dlong: item.dropLocation.Longitude
                })
                responcer();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            OrderData: OrderData
                        }
                    }));
                }
            })
        }
    })
};
customermod.prototype.Orders_Analytics_Details_Date_Range = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var type = parseInt(values.type);
            if (type == 1) {
                //New Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: 1
                }
            } else if (type == 2) {
                //Ongoing Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: {
                        $nin: [1, 5, 8, 9, 14]
                    }
                }
            } else if (type == 3) {
                //Completed Jobs
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: 14,
                    "eventLog.status": 14
                }
            } else if (type == 4) {
                //Instant Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    bookingType: 1,
                    status: {
                        $nin: [5, 9]
                    }
                }
            } else if (type == 5) {
                //4hours Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    bookingType: 2,
                    status: {
                        $nin: [5, 9]
                    }
                }

            } else if (type == 6) {
                //Same Day Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    bookingType: 3,
                    status: {
                        $nin: [5, 9]
                    }
                }

            } else if (type == 7) {
                //Total Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: {
                        $nin: [5, 9]
                    }
                }
            }
            var toSkip = parseInt(values.skip);
            Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: Result[t].customerName,
                Phone: Result[t].customerPhone,
                Email: Result[t].customerEmail,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

//Complete Analytics for Orders
customermod.prototype.Order_Complete_Analytics = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    function CountFunction(type, callback) {
        process.nextTick(function () {
            var query;
            if (type == 1) {
                //New Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: 1
                }
            } else if (type == 2) {
                //Ongoing Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: {
                        $nin: [1, 5, 8, 9, 14]
                    }
                }
            } else if (type == 3) {
                //Completed Jobs
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: 14,
                    "eventLog.status": 14
                }
            } else if (type == 4) {
                //Instant Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    bookingType: 1,
                    status: {
                        $nin: [5, 9]
                    }
                }
            } else if (type == 5) {
                //4hours Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    bookingType: 2,
                    status: {
                        $nin: [5, 9]
                    }
                }

            } else if (type == 6) {
                //Same Day Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    bookingType: 3,
                    status: {
                        $nin: [5, 9]
                    }
                }

            } else if (type == 7) {
                //Total Orders
                query = {
                    Date: {
                        $gte: from_moment,
                        $lte: to_moment
                    },
                    Whether_Deleted: false,
                    status: {
                        $nin: [5, 9]
                    }
                }
            }
            console.log(query);
            me.Orders.count(query).exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }
    sync(function () {
        var New_Orders = CountFunction.sync(null, 1);
        var Ongoing_Orders = CountFunction.sync(null, 2);
        var Completed_Orders = CountFunction.sync(null, 3);
        var Instant_Orders = CountFunction.sync(null, 4);
        var four_hours_Orders = CountFunction.sync(null, 5);
        var Same_Day_Orders = CountFunction.sync(null, 6);
        var Total_Orders = CountFunction.sync(null, 7);
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                New_Orders: New_Orders,
                Ongoing_Orders: Ongoing_Orders,
                Completed_Orders: Completed_Orders,
                Instant_Orders: Instant_Orders,
                four_hours_Orders: four_hours_Orders,
                Same_Day_Orders: Same_Day_Orders,
                Total_Orders: Total_Orders
            }
        }));
    })
};

customermod.prototype.IOS_Detailed_Signup_Date_Range = function (values, callback) {
    var me = this;
    var async = require('async');
    var moment = require('moment');
    var type = parseInt(values.type);
    var query;
    var from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    query = {
        acc_status: 1,
        Verify: 0,
        Whether_Guest: false,
        Whether_Web_Signup: false,
        "Devices.0.DeviceType": "1",
        Signup_Date: {
            $gte: from_moment,
            $lte: to_moment
        }
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).sort('-Signup_Date').select('customerseqId First_name Email Phone CurrentStatus Signup_Date').skip(toSkip).limit(10).exec(function (err, Result) {
        if (!err) {
            var CustomerData = [];
            async.eachSeries(Result, function (item, send) {
                var Signup_Date_Time = moment(item.Signup_Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                CustomerData.push({
                    CustomerID: item._id,
                    Name: item.First_name,
                    SequenceNumber: item.customerseqId,
                    EmailID: item.Email,
                    Phone: item.Phone,
                    CurrentStatus: item.CurrentStatus,
                    Signup_Date_Time: Signup_Date_Time
                })
                send();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })
};

customermod.prototype.Android_Detailed_Signup_Date_Range = function (values, callback) {
    var me = this;
    var async = require('async');
    var moment = require('moment');
    var type = parseInt(values.type);
    var query;
    var from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    query = {
        acc_status: 1,
        Verify: 0,
        Whether_Guest: false,
        Whether_Web_Signup: false,
        "Devices.0.DeviceType": 2,
        Signup_Date: {
            $gte: from_moment,
            $lte: to_moment
        }
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).sort('-Signup_Date').select('customerseqId First_name Email Phone CurrentStatus Signup_Date').skip(toSkip).limit(10).exec(function (err, Result) {
        if (!err) {
            var CustomerData = [];
            async.eachSeries(Result, function (item, send) {
                var Signup_Date_Time = moment(item.Signup_Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                CustomerData.push({
                    CustomerID: item._id,
                    Name: item.First_name,
                    SequenceNumber: item.customerseqId,
                    EmailID: item.Email,
                    Phone: item.Phone,
                    CurrentStatus: item.CurrentStatus,
                    Signup_Date_Time: Signup_Date_Time
                })
                send();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })
};
customermod.prototype.Web_Detailed_Signup_Date_Range = function (values, callback) {
    var me = this;
    var async = require('async');
    var moment = require('moment');
    var type = parseInt(values.type);
    var query;
    var from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    query = {
        acc_status: 1,
        Verify: 0,
        Whether_Guest: false,
        Whether_Web_Signup: true,
        Signup_Date: {
            $gte: from_moment,
            $lte: to_moment
        }
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).sort('-Signup_Date').select('customerseqId First_name Email Phone CurrentStatus Signup_Date').skip(toSkip).limit(10).exec(function (err, Result) {
        if (!err) {
            var CustomerData = [];
            async.eachSeries(Result, function (item, send) {
                var Signup_Date_Time = moment(item.Signup_Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                CustomerData.push({
                    CustomerID: item._id,
                    Name: item.First_name,
                    SequenceNumber: item.customerseqId,
                    EmailID: item.Email,
                    Phone: item.Phone,
                    CurrentStatus: item.CurrentStatus,
                    Signup_Date_Time: Signup_Date_Time
                })
                send();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })
};

customermod.prototype.Web_Detailed_Signup_View = function (values, callback) {
    var me = this;
    var async = require('async');
    var moment = require('moment');
    var type = parseInt(values.type);
    var query;
    var currentdate = moment().utcOffset(330).format('DD/MM/YYYY');
    var to_moment = moment().utcOffset(330).toDate();
    if (type == 1) {
        //Today
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: true,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }
    } else if (type == 2) {
        //Last 7 days
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').subtract(7, 'days')
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: true,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 3) {
        //This Month
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').startOf('month');
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: true,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 4) {
        //This Year
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').startOf('year');
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: true,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 5) {
        //Total
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: true
        }
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).sort('-Signup_Date').select('customerseqId First_name Email Phone CurrentStatus Signup_Date').skip(toSkip).limit(10).exec(function (err, Result) {
        if (!err) {
            var CustomerData = [];
            async.eachSeries(Result, function (item, send) {
                var Signup_Date_Time = moment(item.Signup_Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                CustomerData.push({
                    CustomerID: item._id,
                    Name: item.First_name,
                    SequenceNumber: item.customerseqId,
                    EmailID: item.Email,
                    Phone: item.Phone,
                    CurrentStatus: item.CurrentStatus,
                    Signup_Date_Time: Signup_Date_Time
                })
                send();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })
};
customermod.prototype.Android_Detailed_Signup_View = function (values, callback) {
    var me = this;
    var async = require('async');
    var moment = require('moment');
    var type = parseInt(values.type);
    var query;
    var currentdate = moment().utcOffset(330).format('DD/MM/YYYY');
    var to_moment = moment().utcOffset(330).toDate();
    if (type == 1) {
        //Today
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": 2,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }
    } else if (type == 2) {
        //Last 7 days
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').subtract(7, 'days')
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": 2,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 3) {
        //This Month
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').startOf('month');
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": 2,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 4) {
        //This Year
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').startOf('year');
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": 2,
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 5) {
        //Total
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": 2
        }
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).sort('-Signup_Date').select('customerseqId First_name Email Phone CurrentStatus Signup_Date').skip(toSkip).limit(10).exec(function (err, Result) {
        if (!err) {
            var CustomerData = [];
            async.eachSeries(Result, function (item, send) {
                var Signup_Date_Time = moment(item.Signup_Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                CustomerData.push({
                    CustomerID: item._id,
                    Name: item.First_name,
                    SequenceNumber: item.customerseqId,
                    EmailID: item.Email,
                    Phone: item.Phone,
                    CurrentStatus: item.CurrentStatus,
                    Signup_Date_Time: Signup_Date_Time
                })
                send();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })
};

customermod.prototype.IOS_Detailed_Signup_View = function (values, callback) {
    var me = this;
    var async = require('async');
    var moment = require('moment');
    var type = parseInt(values.type);
    var query;
    var currentdate = moment().utcOffset(330).format('DD/MM/YYYY');
    var to_moment = moment().utcOffset(330).toDate();
    if (type == 1) {
        //Today
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": "1",
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }
    } else if (type == 2) {
        //Last 7 days
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').subtract(7, 'days')
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": "1",
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 3) {
        //This Month
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').startOf('month');
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": "1",
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 4) {
        //This Year
        var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').startOf('year');
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": "1",
            Signup_Date: {
                $gte: from_moment,
                $lte: to_moment
            }
        }

    } else if (type == 5) {
        //Total
        query = {
            acc_status: 1,
            Verify: 0,
            Whether_Guest: false,
            Whether_Web_Signup: false,
            "Devices.0.DeviceType": "1"
        }
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).sort('-Signup_Date').select('customerseqId First_name Email Phone CurrentStatus Signup_Date').skip(toSkip).limit(10).exec(function (err, Result) {
        if (!err) {
            var CustomerData = [];
            async.eachSeries(Result, function (item, send) {
                var Signup_Date_Time = moment(item.Signup_Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                CustomerData.push({
                    CustomerID: item._id,
                    Name: item.First_name,
                    SequenceNumber: item.customerseqId,
                    EmailID: item.Email,
                    Phone: item.Phone,
                    CurrentStatus: item.CurrentStatus,
                    Signup_Date_Time: Signup_Date_Time
                })
                send();
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })
};
customermod.prototype.Find_All_Signup_Interval_Devices_Wise = function (callback) {
    var me = this;
    var sync = require('sync');
    var async = require('async');
    var moment = require('moment');
    function intervalAnalyticFunction(Signup_Interval, callback) {
        process.nextTick(function () {
            var currentdate = moment().utcOffset(330).format('DD/MM/YYYY');
            var from_moment = moment(currentdate, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var to_moment = moment().utcOffset(330).toDate();
            var query = {
                acc_status: 1,
                Verify: 0,
                Whether_Guest: false,
                Signup_Interval: Signup_Interval,
                Signup_Date: {
                    $gte: from_moment,
                    $lte: to_moment
                }
            };
            Customers.find(query).exec(function (err, Result) {
                if (!err) {
                    var web = 0;
                    var android = 0;
                    var ios = 0;
                    async.each(Result, function (item, callback) {
                        if (item.Whether_Web_Signup == true) {
                            web++;
                            callback();
                        } else {
                            var DeviceData = item.Devices[0];
                            if (parseInt(DeviceData.DeviceType) == 1) {
                                ios++;
                                callback();
                            } else if (parseInt(DeviceData.DeviceType) == 2) {
                                android++;
                                callback();
                            }
                        }
                    }, function (err) {
                        if (!err) {
                            var SignupData = {
                                web: web,
                                android: android,
                                ios: ios
                            }
                            callback(null, SignupData);
                        }
                    })
                }
            })
        })
    }
    sync(function () {
        var SignupData = [];
        var format = 'H:mm:ss';
        var time = moment().utcOffset(330).format(format);
        var timearray = time.split(':');
        var hour = parseInt(timearray[0]);
        var minute = parseInt(timearray[1]);
        var interval;
        if (minute == 0) {
            interval = hour;
        } else {
            interval = hour + 1;
        };
        var int = 1;
        for (var i = 1; i <= interval; i++) {
            var AnalyticData = intervalAnalyticFunction.sync(null, int);
            SignupData.push({
                Interval: int,
                AnalyticData: AnalyticData
            });
            int++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                SignupData: SignupData
            }
        }));
    })
}

/******
 *
 * Load Test Sample for Orders
 *
 */

customermod.prototype.Script_For_Storing_Signup_Date = function (callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    function CustomerData(callback) {
        process.nextTick(function () {
            me.Customers.find({
                acc_status: 1, Verify: 0, Whether_Guest: {
                    $in: [true, false]
                }
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        });
    }
    function updatefunction(CustomerData, callback) {
        process.nextTick(function () {
            var query = {
                _id: CustomerData._id
            };
            console.log(CustomerData.Created_dt);
            var signup_date = moment(CustomerData.Created_dt, 'YYYY-MM-DD HH:mm:ss').subtract(330, 'm');
            console.log(signup_date);
            var format = 'H:mm:ss';
            var time = moment(CustomerData.Created_dt).format(format);
            var timearray = time.split(':');
            var hour = parseInt(timearray[0]);
            var minute = parseInt(timearray[1]);
            var interval;
            if (minute == 0) {
                interval = hour;
            } else {
                interval = hour + 1;
            }
            var changes = {
                Signup_Date: signup_date,
                Signup_Interval: interval
            }
            var multiplicity = {
                multi: false
            }
            me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Signup Detail Stored Successfully')
            })
        })
    }
    sync(function () {
        var Result = CustomerData.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var toUpdate = updatefunction.sync(null, Result[t]);
            t++;
        }
        console.log("Updated ->" + t);
        callback('Script Runned Successfully');
    })
}

customermod.prototype.Testing_Html_to_PDF = function (values, CustomerData, callback) {

    var rowdata = '';
    var CustomerName = CustomerData.First_name;
    var CustomerAddress;
    if (CustomerData.Default_Pickup_Location_Exist == true) {
        CustomerAddress = CustomerData.Default_Pickup_Address
    } else {
        CustomerAddress = 'Address Not Avaiable';
    }
    var moment = require('moment');
    var currentDateTime = moment().utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
    var Phone = CustomerData.Phone;

    for (var i = 0; i < values.length; i++) {
        console.log("Dataforrep" + i);
        var Order_DateTime = moment(values.Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
        rowdata += '<tr>' +
            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[i].orderseqId + '</span></td>' +
            '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
            '<td class="cell8"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[i].pickAddress + '</span></td>' +
            '<td class="cell9"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[i].dropAddress + '</span></td>' +
            '<td class="cell10"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[i].Shipping_Distance + '</span></td>' +
            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[i].Order_Journey_Time + '</span></td>' +
            '<td class="cell11"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[i].deliverycharge + ' </span></td>' +
            '</tr>';
    }
    var html = '<!doctype html>' +
        '<html>' +
        '<head>' +
        '<meta charset="utf-8">' +
        '<style> ' +
        '' +
        '' +
        'body' +
        '{' +
        '   background-color: #FFFFFF;' +
        '   color: #000000;' +
        '   font-family: Arial;' +
        '   font-weight: normal;' +
        '   font-size: 13px;' +
        '   line-height: 1.1875;' +
        '   margin: 0;' +
        '   padding: 0;' +
        '}' +
        '#wb_Text1 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text1 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#wb_Text2 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text2 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#wb_Text3 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text3 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#wb_Text4 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text4 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#wb_Text5 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text5 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#wb_Text6 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text6 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#wb_Text7 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text7 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '#Table1' +
        '{' +
        '   border: 1px #000000 solid;' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border-collapse: collapse;' +
        '   border-spacing: 0px;' +
        '}' +
        '#Table1 td' +
        '{' +
        '   padding: 0px 0px 0px 0px;' +
        '}' +
        '#Table1 td div' +
        '{' +
        '   white-space: nowrap;' +
        '}' +
        '#Table1 .cell0' +
        '{' +
        '   background-color: #4B3B2E;' +
        '   background-image: none;' +
        '   border: 1px #4B3B2E solid;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 72px;' +
        '   height: 34px;' +
        '}' +
        '#Table1 .cell1' +
        '{' +
        '   background-color: #4B3B2E;' +
        '   background-image: none;' +
        '   border: 1px #4B3B2E solid;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 82px;' +
        '   height: 34px;' +
        '}' +
        '#Table1 .cell2' +
        '{' +
        '   background-color: #4B3B2E;' +
        '   background-image: none;' +
        '   border: 1px #4B3B2E solid;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 146px;' +
        '   height: 34px;' +
        '}' +
        '#Table1 .cell3' +
        '{' +
        '   background-color: #4B3B2E;' +
        '   background-image: none;' +
        '   border: 1px #4B3B2E solid;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 130px;' +
        '   height: 34px;' +
        '}' +
        '#Table1 .cell4' +
        '{' +
        '   background-color: #4B3B2E;' +
        '   background-image: none;' +
        '   border: 1px #4B3B2E solid;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 74px;' +
        '   height: 34px;' +
        '}' +
        '#Table1 .cell5' +
        '{' +
        '   background-color: #4B3B2E;' +
        '   background-image: none;' +
        '   border: 1px #4B3B2E solid;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 90px;' +
        '   height: 34px;' +
        '}' +
        '#Table1 .cell6' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 1px #000000 solid;' +
        '   text-align: left;' +
        '   vertical-align: middle;' +
        '   width: 72px;' +
        '   height: 38px;' +
        '}' +
        '#Table1 .cell7' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 1px #000000 solid;' +
        '   text-align: left;' +
        '   vertical-align: middle;' +
        '   width: 82px;' +
        '   height: 38px;' +
        '}' +
        '#Table1 .cell8' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 1px #000000 solid;' +
        '   text-align: left;' +
        '   vertical-align: middle;' +
        '   width: 146px;' +
        '   height: 38px;' +
        '}' +
        '#Table1 .cell9' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 1px #000000 solid;' +
        '   text-align: left;' +
        '   vertical-align: middle;' +
        '   width: 130px;' +
        '   height: 38px;' +
        '}' +
        '#Table1 .cell10' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 1px #000000 solid;' +
        '   text-align: left;' +
        '   vertical-align: middle;' +
        '   width: 74px;' +
        '   height: 38px;' +
        '}' +
        '#Table1 .cell11' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 1px #000000 solid;' +
        '   text-align: right;' +
        '   vertical-align: top;' +
        '   width: 90px;' +
        '   height: 38px;' +
        '}' +
        '#Table2' +
        '{' +
        '   border: 0px #000000 solid;' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border-collapse: separate;' +
        '   border-spacing: 0px;' +
        '}' +
        '#Table2 td' +
        '{' +
        '   padding: 0px 0px 0px 0px;' +
        '}' +
        '#Table2 td div' +
        '{' +
        '   white-space: nowrap;' +
        '}' +
        '#Table2 .cell0' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 82px;' +
        '   height: 28px;' +
        '}' +
        '#Table2 .cell1' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   height: 28px;' +
        '}' +
        '#Table2 .cell2' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 82px;' +
        '   height: 48px;' +
        '}' +
        '#Table2 .cell3' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   height: 48px;' +
        '}' +
        '#Table3' +
        '{' +
        '   border: 0px #000000 solid;' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border-collapse: separate;' +
        '   border-spacing: 0px;' +
        '}' +
        '#Table3 td' +
        '{' +
        '   padding: 0px 0px 0px 0px;' +
        '}' +
        '#Table3 td div' +
        '{' +
        '   white-space: nowrap;' +
        '}' +
        '#Table3 .cell0' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 82px;' +
        '   height: 22px;' +
        '}' +
        '#Table3 .cell1' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 46px;' +
        '   height: 22px;' +
        '}' +
        '#Table3 .cell2' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: right;' +
        '   vertical-align: top;' +
        '   height: 22px;' +
        '}' +
        '#Table3 .cell3' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 82px;' +
        '   height: 24px;' +
        '}' +
        '#Table3 .cell4' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 46px;' +
        '   height: 24px;' +
        '}' +
        '#Table3 .cell5' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: right;' +
        '   vertical-align: top;' +
        '   height: 24px;' +
        '}' +
        '#Table3 .cell6' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 82px;' +
        '   height: 28px;' +
        '}' +
        '#Table3 .cell7' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: left;' +
        '   vertical-align: top;' +
        '   width: 46px;' +
        '   height: 28px;' +
        '}' +
        '#Table3 .cell8' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   text-align: right;' +
        '   vertical-align: top;' +
        '   height: 28px;' +
        '}' +
        '#wb_Text8 ' +
        '{' +
        '   background-color: transparent;' +
        '   background-image: none;' +
        '   border: 0px #000000 solid;' +
        '   padding: 0;' +
        '   margin: 0;' +
        '   text-align: left;' +
        '}' +
        '#wb_Text8 div' +
        '{' +
        '   text-align: left;' +
        '}' +
        '' +
        'a' +
        '{' +
        '   color: #0000FF;' +
        '   text-decoration: underline;' +
        '}' +
        'a:visited' +
        '{' +
        '   color: #800080;' +
        '}' +
        'a:active' +
        '{' +
        '   color: #FF0000;' +
        '}' +
        'a:hover' +
        '{' +
        '   color: #0000FF;' +
        '   text-decoration: underline;' +
        '}' +
        'h1' +
        '{' +
        '   font-family: Arial;' +
        '   font-weight: bold;' +
        '   font-size: 32px;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   color: #000000;' +
        '   background-color: transparent;' +
        '   margin: 0px 0px 0px 0px;' +
        '   padding: 0px 0px 0px 0px;' +
        '   display: inline;' +
        '}' +
        'h2' +
        '{' +
        '   font-family: Arial;' +
        '   font-weight: bold;' +
        '   font-size: 27px;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   color: #000000;' +
        '   background-color: transparent;' +
        '   margin: 0px 0px 0px 0px;' +
        '   padding: 0px 0px 0px 0px;' +
        '   display: inline;' +
        '}' +
        'h3' +
        '{' +
        '   font-family: Arial;' +
        '   font-weight: normal;' +
        '   font-size: 24px;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   color: #000000;' +
        '   background-color: transparent;' +
        '   margin: 0px 0px 0px 0px;' +
        '   padding: 0px 0px 0px 0px;' +
        '   display: inline;' +
        '}' +
        'h4' +
        '{' +
        '   font-family: Arial;' +
        '   font-weight: normal;' +
        '   font-size: 21px;' +
        '   font-style: italic;' +
        '   text-decoration: none;' +
        '   color: #000000;' +
        '   background-color: transparent;' +
        '   margin: 0px 0px 0px 0px;' +
        '   padding: 0px 0px 0px 0px;' +
        '   display: inline;' +
        '}' +
        'h5' +
        '{' +
        '   font-family: Arial;' +
        '   font-weight: normal;' +
        '   font-size: 19px;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   color: #000000;' +
        '   background-color: transparent;' +
        '   margin: 0px 0px 0px 0px;' +
        '   padding: 0px 0px 0px 0px;' +
        '   display: inline;' +
        '}' +
        'h6' +
        '{' +
        '   font-family: Arial;' +
        '   font-weight: normal;' +
        '   font-size: 10px;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   color: #000000;' +
        '   background-color: transparent;' +
        '   margin: 0px 0px 0px 0px;' +
        '   padding: 0px 0px 0px 0px;' +
        '   display: inline;' +
        '}' +
        '.CustomStyle' +
        '{' +
        '   font-family: "Courier New";' +
        '   font-weight: bold;' +
        '   font-size: 10px;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   color: #2E74B5;' +
        '   background-color: transparent;' +
        '}' +
        '.style1' +
        '{' +
        '   font-weight: normal;' +
        '   font-style: normal;' +
        '   text-decoration: none;' +
        '   background-color: transparent;' +
        '}' +
        '</style>' +
        '</head>' +
        '<body>' +
        '<div id="wb_Text1" style="position:absolute;left:32px;top:30px;width:224px;height:32px;z-index:1;">' +
        '<span style="color:#000000;font-family:Arial;font-size:27px;">Ezshipp</span></div>' +
        '<div id="wb_Text2" style="position:absolute;left:31px;top:101px;width:224px;height:19px;z-index:2;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;"><strong>Address:</strong></span></div>' +
        '<div id="wb_Text3" style="position:absolute;left:31px;top:79px;width:152px;height:18px;z-index:3;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;">Customer Name:</span></div>' +
        '<div id="wb_Text4" style="position:absolute;left:156px;top:79px;width:152px;height:18px;z-index:4;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;">' + CustomerName + '</span></div>' +
        '<div id="wb_Text5" style="position:absolute;left:31px;top:123px;width:199px;height:82px;z-index:5;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;">' + CustomerAddress + '<br></span><span style="color:#000000;font-family:Arial;font-size:19px;"><br><br></span></div>' +
        '<div id="wb_Text6" style="position:absolute;left:31px;top:211px;width:72px;height:18px;z-index:6;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;">Phone:</span></div>' +
        '<div id="wb_Text7" style="position:absolute;left:104px;top:211px;width:231px;height:18px;z-index:7;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;">' + Phone + '</span></div>' +
        '<table style="position:absolute;left:31px;top:242px;width:674px;height:75px;z-index:8;" id="Table1">' +
        '<tr>' +
        '<th class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;"> Order ID</span></th>' +
        '<th class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;">Order Date</span></th>' +
        '<th class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;"> Pickup Address</span></th>' +
        '<th class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;">Drop Address</span></th>' +
        '<th class="cell4"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;"> Distance</span></th>' +
        '<th class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;"> Duration</span></th>' +
        '<th class="cell5"><span style="color:#FFFFFF;font-family:Arial;font-size:10px;line-height:10px;"> Order Cost</span></th>' +
        '</tr>' +
        rowdata +
        '</table>' +
        '<table style="position:absolute;left:471px;top:58px;width:224px;height:104px;z-index:9;" id="Table2">' +
        '<tr>' +
        '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> Date:</span></td>' +
        '<td class="cell1"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + currentDateTime + '</span></td>' +
        '</tr>' +
        '<tr>' +
        '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> Invoice#</span></td>' +
        '<td class="cell1"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> 0000123</span></td>' +
        '</tr>' +
        '<tr>' +
        '<td class="cell2"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> Customerid</span></td>' +
        '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> 9848793673</span></td>' +
        '</tr>' +
        '</table>' +
        '<table style="position:absolute;left:10%;top:20%x;width:20%;height:10%;z-index:10;" id="Table3">' +
        '<tr>' +
        '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">SubTotal</span></td>' +
        '<td class="cell1"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">₹</span></td>' +
        '<td class="cell2"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">4000</span></td>' +
        '</tr>' +
        '<tr>' +
        '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">Tax amount</span></td>' +
        '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">₹</span></td>' +
        '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">200</span></td>' +
        '</tr>' +
        '<tr>' +
        '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">Previous Due</span></td>' +
        '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">₹</span></td>' +
        '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">400</span></td>' +
        '</tr>' +
        '<tr>' +
        '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">Others</span></td>' +
        '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">₹</span></td>' +
        '<td class="cell8"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">0</span></td>' +
        '</tr>' +
        '<tr>' +
        '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">Total Amount</span></td>' +
        '<td class="cell1"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">₹</span></td>' +
        '<td class="cell2"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">50000</span></td>' +
        '</tr>' +
        '</table>' +
        '<div id="wb_Text8" style="position:absolute;left:20%;top:10%;width:20%;height:10%;z-index:11;">' +
        '<span style="color:#000000;font-family:Arial;font-size:10px;"><strong>Thank You For Your Business!</strong></span></div>' +
        '</body>' +
        '</html>';


    htmlToPdf.convertHTMLString(html, '/Users/uday/Desktop/destination.pdf',
        function (error, success) {
            console.log("Dataforrep");
            if (error) {
                console.log('Oh noes! Errorz!');
                console.log(error);
                callback(error);
            } else {
                console.log('Woot! Success!');
                console.log(success);
                callback('Successfully Converted PDF');
            }

        }
    );
}

customermod.prototype.Testing_Api = function (values, callback) {
    var me = this;
    var post_data = JSON.stringify({
        'CustomerID': '5959fac994dc8118d116c687',
        'pickAddress': 'EVONTEX SOFTWARE BUSINESS CONSULTANCY SERVICES PVT, LTD.,5 th floor, Unispace ,Vaishnavi\'s Cynosure, Gachibowli , Telecom Nagar Extension, P Janardhan Reddy Nagar, Gachibowli, Hyderabad,  500032',
        'dropAddress': 'Jali Hanuman Temple,Opp: Police Excise Office,Hyd-6,, Mangalhat Rd, Dhoolpet, Chudi Bazaar, Hyderabad,  500006',
        'pickLatitude': 17.43673,
        'pickLongitude': 78.36710900000003,
        'dropLatitude': 17.3737639,
        'dropLongitude': 78.45987209999998,
        'itemName': 'Mobile Phone',
        'itemDescription': '',
        'order_datetime': me.DateTime(),
        'orderType': 1,
        'bookingType': 2,
        'receiverName': 'Anand',
        'receiverPhone': '+918801362790',
        'paymentType': 1,
        'deliverycharge': 129,
        'OrderData': null,
        'paymentId': '',
        'Picture': null,
        'itemImage': '',
        'ImageID': '',
        'item_actual_cost': '8000',
        'OFFER_CODE_APPLIED': false,
        'collectionType': 1,
        'Monthly_Invoice': false,
        'SenderName': 'Ratan Uday Kumar',
        'SenderPhoneNumber': '8801362790'
    });
    var newbody = JSON.parse(post_data);

    console.log("parsebody")
    console.log(newbody);
    var loadtest = require('loadtest');
    // var url = 'http://localhost:4000/LoadTestingAPI';
    var url = 'https://betaorders.ezshipp.com/Order_Anything';
    // var url = 'https://betaorders.ezshipp.com/LoadTestingAPI';
    var options = {
        url: url,
        maxRequests: parseInt(values.request),
        method: 'POST',
        contentType: 'application/json',
        body: newbody
    };
    loadtest.loadTest(options, function (error, result) {
        if (error) {
            return console.error('Got an error: %s', error);
        }
        console.log('Tests run successfully');
        callback(result);
    });
}

/******
 * End of Load Test
 */
//Shipping PRice Validation for Offers
customermod.prototype.Shipping_Price_Validation_Offers = function (values, CustomerData, callback) {
    var me = this;
    if (values.OFFER_CODE_APPLIED == true || values.OFFER_CODE_APPLIED == "true") {
        console.log("Offer Applied in Orders");
        me.Check_for_OfferID(values, function (err, OfferData) {
            if (err) {
                console.log("Offer Not Found");
                callback(true, OfferData);
            } else {
                me.Calculate_Fair_Place_by_Zones(values, function (err, FAIR_RESULT) {
                    if (err) {
                        console.log("Zone Validation Error while shiping PRice");
                        callback(true, FAIR_RESULT);
                    } else {
                        var Zone_Price_Data = FAIR_RESULT.extras.PriceData;
                        var instantdelivery = parseInt(Zone_Price_Data.instantdelivery);
                        var hrdelivery = parseInt(Zone_Price_Data.hrdelivery);
                        var samedaydelivery = parseInt(Zone_Price_Data.samedaydelivery);
                        var DiscountPercentage = OfferData.DiscountPercentage;
                        var deliverycharge = parseFloat(values.deliverycharge);
                        var deliverychargebefore = deliverycharge - 1;
                        var deliverychargeafter = deliverycharge + 1;
                        var bookingType = parseInt(values.bookingType);
                        var discountedprice;
                        if (bookingType == 1) {
                            discountedprice = instantdelivery - ((instantdelivery * DiscountPercentage) / 100);
                        } else if (bookingType == 2) {
                            discountedprice = hrdelivery - ((hrdelivery * DiscountPercentage) / 100);
                        } else if (bookingType == 3) {
                            discountedprice = samedaydelivery - ((samedaydelivery * DiscountPercentage) / 100);
                        }
                        if ((deliverychargebefore <= discountedprice) && (discountedprice <= deliverychargeafter)) {
                            console.log("Shipping Price Validated for Zones");
                            callback(false);
                        } else {
                            console.log("Shipping PRice validation fails at zones pricing");
                            console.log("Checkig for PRemium Pricing");
                            if (CustomerData.Premium_User == true && CustomerData.Premium_Status == true && CustomerData.Premium_Pricing_Set == true) {
                                instantdelivery = parseInt(CustomerData.Premium_Instant_Pricing);
                                hrdelivery = parseInt(CustomerData.Premium_4hours_Pricing);
                                samedaydelivery = parseInt(CustomerData.Premium_Same_Day_Pricing);
                                if (bookingType == 1) {
                                    discountedprice = instantdelivery - ((instantdelivery * DiscountPercentage) / 100);
                                } else if (bookingType == 2) {
                                    discountedprice = hrdelivery - ((hrdelivery * DiscountPercentage) / 100);
                                } else if (bookingType == 3) {
                                    discountedprice = samedaydelivery - ((samedaydelivery * DiscountPercentage) / 100);
                                }
                                if ((deliverychargebefore <= discountedprice) && (discountedprice <= deliverychargeafter)) {
                                    console.log("Shipping Price Validated for Customers");
                                    callback(false);
                                } else {
                                    console.log("Shipping Price Validation Fails in Both Zones and Premium Customer");
                                    callback(true, new me.ApiResponce({
                                        success: false,
                                        extras: {
                                            msg: me.ApiMessages.OFFER_PRICE_VALIDATIONS_FAILS
                                        }
                                    }));
                                }
                            } else {
                                callback(true, new me.ApiResponce({
                                    success: false,
                                    extras: {
                                        msg: me.ApiMessages.OFFER_PRICE_VALIDATIONS_FAILS
                                    }
                                }));
                            }
                        }
                    }
                })
            }
        })
    } else {
        callback(false);
    }
}

//Check Whether Razor Pay Payment Successfully Completed or Not
customermod.prototype.Check_for_RazorPay_Payment_Successfully = function (values, callback) {
    var me = this;
    if (values.paymentType != 2) {
        callback(false);
    } else {
        razorpay.Check_for_Payment(values, function (err, Result) {
            if (err) {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.RAZORPAY_PAYMENT_ISSUE
                    }
                }));
            } else {
                var amount = parseInt(values.deliverycharge) * 100;
                var raz_amount = parseInt(Result.amount);
                if (amount == raz_amount) {
                    callback(false);
                } else {
                    callback(true, new me.ApiResponce({
                        success: false,
                        extras: {
                            msg: me.ApiMessages.RAZORPAY_PAYMENT_ISSUE
                        }
                    }));
                }
            }
        })
    }
}

//  * Driver Documents
//  */
//Add or update Driver Address Proof Details
customermod.prototype.Add_Update_Driver_Address_Proof_Details = function (values, callback) {
    var me = this;
    var nfile, fname;

    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    fname = generateFilename();
    //Converting Base64 dataUrl to Jpeg Image
    me.base64ImageToFile(values.Picture, os.tmpDir() + '', fname, function (err, imgPath) {
        nfile = os.tmpDir() + '/' + fname + '.jpeg';
        fname = fname + '.jpeg';
        // Upload to the S3 Bucket
        me.UploadImageAWS(nfile, fname, function (err, responcer) {
            var query = {
                "_id": values.DriverID
            }
            var changes = {
                $set: {
                    Address_Proof_Available: true,
                    Address_Proof_Details: String(values.Address_Proof_Details),
                    Address_Proof_Image: fname
                }
            }
            var multiplicity = {
                multi: false
            }
            me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
                if (err) {
                    console.log(err);
                } else {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: "Driver Address Proof Details Stored Succesfully"
                        }
                    }));
                }
            })
        })
    })
};
// Find all All Ezshipp Orders
customermod.prototype.Find_All_Premium_Customer_Monthly_Invoice = function (values, CustomerData, callback) {
    var me = this;
    var sync = require('sync');
    var Orders = me.Orders;
    var moment = require('moment');
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var month = parseInt(values.Month_Number);
            var year = parseInt(values.Year_Number);
            var next_month;
            var next_month_year;
            if (month == 12) {
                next_month = 1;
                next_month_year = year + 1;
            } else {
                next_month = month + 1;
                next_month_year = year;
            }
            var this_month_start_date = '01/' + ("0" + month).slice(-2) + '/' + year;
            var next_month_start_date = '01/' + ("0" + next_month).slice(-2) + '/' + next_month_year;
            var this_month_start_moment = moment(this_month_start_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var next_month_start_moment = moment(next_month_start_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var query = {
                Whether_Deleted: false,
                status: 14,
                userId: values.CustomerID,
                Date: {
                    $gte: this_month_start_moment,
                    $lte: next_month_start_moment
                }
            };
            console.log(query);
            Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function Converting_PDF(values, CustomerData, callback) {
        process.nextTick(function () {
            me.Testing_Html_to_PDF(values, CustomerData, function (Result) {
                console.log("PDF Result");
                console.log(Result);
                callback(null, 'PDF Converted Successfully');
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        var Total_Delivery_Calculated_Price_Month = 0;
        var Total_Delivery_Price;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerData;
            CustomerName = Result2.First_name;
            var Order_DateTime = moment(Result[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
            var Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            var Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
            var Order_Journey_Time = Result[t].Order_Journey_Time;
            Total_Delivery_Calculated_Price_Month += parseInt(Result[t].deliverycharge);
            OrderData.push({
                orderId: Result[t]._id,
                Job_No: Result[t].orderseqId,
                CustomerName: CustomerName,
                ReceiverName: Result[t].receiverName,
                orderType: Result[t].orderType,
                bookingType: Result[t].bookingType,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                Item_Name: Result[t].itemName,
                status: Result[t].status,
                Shipping_Distance: Result[t].Shipping_Distance,
                Order_DateTime: Order_DateTime,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                deliverycharge: Result[t].deliverycharge
            });
            t++;
        }
        if (CustomerData.Flat_Monthly_Price_Available == true) {
            Total_Delivery_Price = CustomerData.Flat_Monthly_Price;
        } else {
            Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;
        }
        var PDFResult = Converting_PDF.sync(null, OrderData, CustomerData);
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Total_Delivery_Price: Total_Delivery_Price
            }
        }));
    });
};


customermod.prototype.Create_Client_COD_Report = function (values, CustomerData, ClientCODReport, callback) {
    var me = this;
    var sync = require('sync');
    var Orders = me.Orders;
    var moment = require('moment');
    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    var fname = generateFilename();

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {

            var from_date = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var to_date = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            var query = {
                Whether_Deleted: false,
                status: 14,
                userId: values.CustomerID,
                Date: {
                    $gte: from_date,
                    $lte: to_date
                }
            };
            // var query = {
            //     status: 14,
            //     userId: values.CustomerID
            // };
            console.log(query);
            Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function Converting_PDF(values, DriverUniqueData, CustomerData, ClientCODReport, callback) {
        process.nextTick(function () {
            var Result = values;
            var Total_Delivery_Calculated_Price_Month = 0;
            var Total_ExceededAmount = 0;
            var TotalClienCOdAmount = 0;
            var ClientCodAmount = 0;

            var Total_Delivery_Price;
            var t = 0;
            console.log("Entering the pdf processing");
            var headdata;
            var rowdata = '';

            var Driver_Table = '';

            var CustomerName = CustomerData.First_name;
            var CustomerAddress;
            var Last_Template;
            var headItemForDriverTable = '<tr>' +
                '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Driver Name & Phone </span></td>' +
                '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Client COD</span></td>' +
                '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Deliver Charge</span></td>' +
                '</tr>';


            for (var i = 0; i < DriverUniqueData.length; i++) {



                Driver_Table += '<tr>' +
                    '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + DriverUniqueData[i].Driver_Name + '</span></td>' +
                    '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + DriverUniqueData[i].subtotal_amount + '</span></td>' +
                    '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + DriverUniqueData[i].deliverycharge + '</span></td>' +

                    '</tr>';



            }
            function Address_Shortning(string) {
                string = string.replace(/\s\s+/g, ' ');
                string = string.replace(/  +/g, ' ');
                string = string.replace(/^ /, '');
                string = string.replace(/\s\s*$/, '');
                string = string.replace(', Hyderabad, Telangana, India', '');
                string = string.replace(', Telangana, India', '');
                string = string.replace(', India', '');
                string = string.replace('Hyderabad, Telangana, India', '');
                string = string.replace('Telangana, India', '');
                string = string.replace('Hyderabad,', '');
                string = string.replace('Telangana,', '');
                string = string.replace('Hyderabad', '');
                string = string.replace('Telangana', '');
                string = string.replace('India', '');
                string = string.replace(/,,+/g, ',');
                string = string.replace(/^,/, '');
                string = string.replace(/\s\s+/g, ' ');
                string = string.replace(/  +/g, ' ');
                string = string.replace(/^ /, '');
                string = string.replace(/\s\s*$/, '');
                string = titleString(string);
                function titleString(str) {
                    var myArr = str.toLowerCase().split(" ");
                    for (var a = 0; a < myArr.length; a++) {
                        myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
                    }
                    return myArr.join(" ");
                }
                return string
            }
            if (CustomerData.Default_Pickup_Location_Exist == true) {
                var moment = require('moment');

                CustomerAddress = Address_Shortning(CustomerData.Default_Pickup_Address);
                Last_Template = '    <table style="width: 518px;margin-top: 15px;">' +
                    '        <tr>' +
                    '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
                    '                        * All the orders picked from <span style="color:#504026;">' + CustomerAddress + '</span>' +
                    '                </td>' +
                    '            </tr>' +
                    '        <tr>' +
                    '            <td style="font-style: italic;text-align: center;">' +
                    '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
                    '                have any concerns/suggestions on the service' +
                    '            </td>' +
                    '        </tr>' +
                    '    </table>';
                for (var i = 0; i < values.length; i++) {
                    console.log(3);
                    var Order_DateTime = moment(values[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                    var Order_Accepted_Time = moment(values[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Completed_Time = moment(values[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Journey_Time = values[t].Order_Journey_Time;
                    console.log(4);
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        console.log(5);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Reviver Name & Mobile</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Biker Name & Mobile</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Client COD</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].receiverName + '</br> ' + values[t].receiverPhone + '</span></td>' +

                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Driver_Name + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].subtotal_amount + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].deliverycharge + ' </span></td>' +
                            '</tr>';
                    } else {
                        console.log(6);
                        var deliverycharge;
                        var ExceededAmount = 0;
                        var ClientCodAmount = 0;
                        if (CustomerData.Premium_Pricing_Set == true) {
                            if (values[t].bookingType == 1) {
                                deliverycharge = CustomerData.Premium_Instant_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 2) {
                                deliverycharge = CustomerData.Premium_4hours_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 3) {
                                deliverycharge = CustomerData.Premium_Same_Day_Pricing + values[t].ExceededAmount;
                            }
                        } else {
                            deliverycharge = parseFloat(values[t].deliverycharge)
                        }
                        ExceededAmount = values[t].ExceededAmount;
                        Total_ExceededAmount += ExceededAmount;
                        Total_Delivery_Calculated_Price_Month += parseFloat(deliverycharge);

                        TotalClienCOdAmount += parseFloat(values[t].subtotal_amount);

                        console.log("Client COD ----->" + values[t].subtotal_amount + " client cod --->" + TotalClienCOdAmount)
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Reviver Name & Mobile</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Biker Name & Mobile</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Client COD</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].receiverName + '</br> ' + values[t].receiverPhone + '</span></td>' +

                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Driver_Name + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].subtotal_amount + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].deliverycharge + ' </span></td>' +
                            '</tr>';
                    }
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        Total_Delivery_Price = CustomerData.Flat_Monthly_Price;
                        console.log(7);
                    } else {
                        Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;

                        ClientCodAmount = TotalClienCOdAmount;
                        console.log(8);
                    }
                    t++;
                }
            } else {
                var moment = require('moment');
                CustomerAddress = '<br><br>';
                Last_Template = '    <table style="width: 518px;margin-top: 15px;">' +
                    '        <!-- <tr>' +
                    '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
                    '                        Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you have any concerns/suggestions on the service' +
                    '                </td>' +
                    '            </tr> -->' +
                    '        <tr>' +
                    '            <td style="font-style: italic;text-align: center;">' +
                    '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
                    '                have any concerns/suggestions on the service' +
                    '            </td>' +
                    '        </tr>' +
                    '    </table>';


                for (var i = 0; i < values.length; i++) {
                    console.log(3);
                    var Order_DateTime = moment(values[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                    var Order_Accepted_Time = moment(values[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Completed_Time = moment(values[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Journey_Time = values[t].Order_Journey_Time;
                    console.log(4);
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        console.log(5);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Reviver Name & Mobile</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Biker Name & Mobile</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Client COD</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].receiverName + '</br> ' + values[t].receiverPhone + '</span></td>' +

                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Driver_Name + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].subtotal_amount + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].deliverycharge + ' </span></td>' +
                            '</tr>';
                    } else {
                        console.log(6);
                        var deliverycharge;
                        var ExceededAmount = 0;
                        var ClientCodAmount = 0;
                        if (CustomerData.Premium_Pricing_Set == true) {
                            if (values[t].bookingType == 1) {
                                deliverycharge = CustomerData.Premium_Instant_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 2) {
                                deliverycharge = CustomerData.Premium_4hours_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 3) {
                                deliverycharge = CustomerData.Premium_Same_Day_Pricing + values[t].ExceededAmount;
                            }
                        } else {
                            deliverycharge = parseFloat(values[t].deliverycharge)
                        }
                        ExceededAmount = values[t].ExceededAmount;
                        Total_ExceededAmount += ExceededAmount;
                        Total_Delivery_Calculated_Price_Month += parseFloat(deliverycharge);

                        TotalClienCOdAmount += parseFloat(values[t].subtotal_amount);

                        console.log("Client COD ----->" + values[t].subtotal_amount + " client cod --->" + TotalClienCOdAmount)
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Reviver Name & Mobile</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Biker Name & Mobile</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Client COD</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].receiverName + '</br> ' + values[t].receiverPhone + '</span></td>' +

                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Driver_Name + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].subtotal_amount + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].deliverycharge + ' </span></td>' +
                            '</tr>';
                    }
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        Total_Delivery_Price = CustomerData.Flat_Monthly_Price;
                        console.log(7);
                    } else {
                        Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;

                        ClientCodAmount = TotalClienCOdAmount;
                        console.log(8);
                    }
                    t++;
                }
            }
            console.log(1);
            var moment = require('moment');
            var currentDateTime = moment().utcOffset(330).format('DD/MM/YY h:mm A');
            var due_date = moment().utcOffset(330).add(10, 'days').format('DD/MM/YYYY');
            var Phone = CustomerData.Phone;
            var InvoiceNumber = ClientCODReport.InvoiceNumber;
            var CustomerNo = CustomerData.customerseqId;
            console.log(2);
            var Total_Collection = Total_Delivery_Price;
            var script = '<script>' +
                'function myFunction() {' +
                'var elmnt = document.getElementById("Table2");' +
                'var elmntx = document.getElementById("Table4");' +
                'var elmnty = document.getElementById("Table3");' +
                'var txt =  elmnt.offsetHeight;' +
                'var height_of_total_section =  elmnty.offsetHeight;' +
                'var newheight = txt + 350;' +
                'var otherheight = txt+400;' +
                'var heightfortable = txt+height_of_total_section+400;' +
                '    var something = document.getElementById("Table3");' +
                '    something.style.top = newheight+"px";' +
                '    var otherthing = document.getElementById("wb_Text6");' +
                '    otherthing.style.top = otherheight+"px"; ' +
                '    elmntx.style.top = heightfortable+"px"; ' +
                '}' +
                '</script>';
            var GST_Place = '';
            // if (GST != null && GST != "") {
            //     GST_Place = '                <div style="margin-bottom: 3px;">' +
            //         '                    <span style="font-size: 11px;"><strong>GST:</strong>' + GST + '</span>' +
            //         '                </div>';
            // }
            var html = '<!doctype html>' +
                '<html>' +
                '<head>' +
                script +
                '    <meta charset="utf-8">' +
                '    <style>' +
                '        a {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        a:visited {' +
                '            color: #800080;' +
                '        }' +
                '' +
                '        a:active {' +
                '            color: #FF0000;' +
                '        }' +
                '' +
                '        a:hover {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        h1 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 32px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h2 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 27px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h3 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 24px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h4 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 21px;' +
                '            font-style: italic;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h5 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 19px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h6 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        .CustomStyle {' +
                '            font-family: "Courier New";' +
                '            font-weight: bold;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #2E74B5;' +
                '            background-color: transparent;' +
                '        }' +
                '' +
                '        body {' +
                '            background-color: #FFFFFF;' +
                '            color: #000000;' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 13px;' +
                '            line-height: 1.1875;' +
                '            margin: 0;' +
                '            padding: 0;' +
                '        }' +
                '' +
                '        #wb_Text1 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text1 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text2 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text3 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text4 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text5 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #Table1 {' +
                '            border: 0px #C0C0C0 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: separate;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table1 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table1 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table1 .cell0 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: top;' +
                '            width: 62px;' +
                '            height: 14px;' +
                '        }' +
                '' +
                '        #Table1 .cell1 {' +
                '            background-color: #e57373;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 14px;' +
                '            color: #FFF;' +
                '        }' +
                '' +
                '        #Table1 .cell2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 14px;' +
                '        }' +
                '' +
                '        #Table1 .cell3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: top;' +
                '            width: 62px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table1 .cell4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table2 {' +
                '            border: 1px #000000 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: collapse;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table2 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table2 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table2 .cell0 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell1 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell2 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell3 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell4 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell9 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell10 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                'margin-right:5px;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +


                +
                '        #Table4 {' +
                '            border: 1px #000000 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: collapse;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table4 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table4 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table4 .cell0 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table4 .cell1 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table4 .cell2 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table4 .cell3 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table4 .cell4 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table4 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table4 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table4 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table4 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table4 .cell9 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table4 .cell10 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                'margin-right:5px;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +








                '        #Table3 {' +
                '            border: 0px #C0C0C0 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: separate;' +
                '            border-spacing: 1px;' +
                '        }' +
                '' +
                '        #Table3 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table3 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table3 .cell0 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell1 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell9 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Line1 {' +
                '            border-width: 0;' +
                '            height: 78px;' +
                '            width: 8px;' +
                '        }' +
                '' +
                '        #wb_Text7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text7 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #Image1 {' +
                '            border: 0px #000000 solid;' +
                '            padding: 0px 0px 0px 0px;' +
                '            left: 0;' +
                '            top: 0;' +
                '            width: 100%;' +
                '            height: 100%;' +
                '        }' +
                '' +
                '        #wb_Text8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text8 div {' +
                '            text-align: left;' +
                '        }' +
                '    </style>' +
                '</head>' +
                '<body onload="myFunction()">' +
                '    <table style="margin-left:10px;">' +
                '        <tr>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" id="Image1" alt="" style="width: 90%;"></div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
                '                </div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
                '                </div>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '    <br>' +
                '    <table style="margin-left:10px;width: 518px;">' +
                '        <tr>' +
                '            <td style="width: 60%;">' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">' + CustomerName + '</span>' +
                '                </div>' +
                '' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">+91' + Phone + '</span>' +
                '                </div>' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">' + CustomerAddress + '</span>' +
                '                </div>' +
                +
                '            </td>' +
                '            <td style="width: 40%;">' +
                '                <table id="Table1">' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Date: </span></strong></td>' +
                '                        <td style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + currentDateTime + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;"> </span></strong></td>' +
                '                        <td class="cell1" style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;"></span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Customer No: </span></strong></td>' +
                '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + CustomerNo + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Report No:</span></strong></td>' +
                '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + InvoiceNumber + '</span></td>' +
                '                    </tr>' +
                '                </table>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '<table style="margin-left:10px;width:519px;z-index:7;" id="Table2">' +
                headdata +
                rowdata +
                '</table>' +
                '<table style="margin-top: 12px;margin-left:325px;top:275px;width:200px;height:91px;z-index:8;" id="Table3">' +
                '<tr>' +
                '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Client COD</span></td>' +
                '            <td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell2"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">' + ClientCodAmount + '</span></td>' +
                '</tr>' +

                '<tr>' +
                '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Delivery Charge</span></td>' +
                '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">' + Total_Delivery_Price + '</span></td>' +
                '</tr>' +


                '</table>' +

                '<table style="margin-left:10px;width:519px;z-index:7;" id="Table4">' +
                headItemForDriverTable +
                Driver_Table +
                '</table>' +

                Last_Template +
                '</body>' +
                '</html>';
            // nfile = os.tmpDir() + '/' + fname + '.pdf';
            // nfile = './' + fname + '.pdf';
            fname = fname + '.pdf';
            console.log(10);
            console.log(fname);
            // var header = '<div style="position:absolute;left:287px;top:5px;width:2px;height:70px;z-index:1;">' +
            //     '            <img src="https://s3.amazonaws.com/ezshippimages/line.png" alt="" style="border-width: 0;height: 78px;width: 8px;"></div>' +
            //     '        <div style=" background-color: transparent;background-image: none;border: 0px #000000 solid;padding: 0;margin: 0;text-align: left;position:absolute;left:316px;top:11px;width:213px;height:60px;z-index:2;">' +
            //     '            <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span></div>' +
            //     '        <div style="text-align: left;position:absolute;left:17px;top:17px;width:263px;height:49px;z-index:3;">' +
            //     '            <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" alt="" style="border: 0px #000000 solid;padding: 0px 0px 0px 0px;left: 0;top: 0;width: 100%;height: 100%;">' +
            //     '        </div>';

            // htmlToPdf.setDebug(true);
            // htmlToPdf.convertHTMLString(html, nfile,
            //     function (error, success) {
            var conversion = require("phantom-html-to-pdf")({
                phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
                tmpDir: os.tmpDir(),
                waitForJS: true,
                waitForJSVarName: script,
                NumberOfWorkers: 4,
                paperSize: {
                    format: "A4", orientation: "portrait"
                },
                fitToPage: true,
                format: {
                    quality: 100
                }
            });
            var optionsPDF = {
                html: html,
                footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
                    '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
                fitToPage: true
            }
            conversion(optionsPDF, function (err, res) {
                console.log("PDF process going")
                if (err) {
                    console.log('Oh noes! Errorz!');
                    console.log(err);
                    callback(null, err);
                } else {
                    // if (parseInt(success.process_code) == 0) {
                    console.log("response")
                    console.log(res);
                    nfile = res.stream.path;
                    console.log("path");
                    console.log(nfile);
                    // console.log(res.logs);
                    // console.log(res.NumberOfPages);
                    console.log("pdf done");
                    me.Upload_PDF_AWS(nfile, fname, function (err, responcer) {
                        console.log("pdf uploaded");
                        var query = {
                            CustomerInvoiceID: ClientCODReport.CustomerInvoiceID
                        }
                        var changes = {
                            ProcessStage: 2,
                            PDFLink: fname
                        };
                        var multiplicity = {
                            multi: false
                        }

                        me.Customer_CODReport.update(query, changes, multiplicity).exec(function (err, Result) {
                            console.log("pdf processed")
                            callback(null, 'Updated Successfully');
                        })
                    })
                    // }
                }
            });
        })
    }
    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    function UniqueDriverData(DriverTotalData, callback) {
        process.nextTick(function () {
            var async = require('async');
            var DriverData = [];
            async.eachSeries(DriverTotalData, function (item, resp) {
                var fetchData = GetElementData(DriverData, 'DriverID', item.DriverID);
                if (fetchData == null) {
                    DriverData.push({
                        DriverID: item.DriverID,
                        Driver_Name: item.Driver_Name,
                        Driver_Email: item.Driver_Email,
                        deliverycharge: item.deliverycharge,
                        subtotal_amount: item.subtotal_amount
                    });
                    resp();
                } else {
                    for (var i = 0; i < DriverData.length; i++) {
                        if (DriverData[i].DriverID == item.DriverID) {
                            var newDel = DriverData[i].deliverycharge;
                            DriverData[i].deliverycharge = newDel + item.deliverycharge;
                            var newsub = DriverData[i].subtotal_amount;
                            DriverData[i].subtotal_amount = newsub + item.subtotal_amount;
                            break;
                        }
                    }
                    resp();
                }
            }, function (err) {
                callback(null, DriverData);
            })
            function GetElementData(arr, key, value) {
                for (var i = 0; i < arr.length; i++)
                    if (arr[i][key] == value)
                        return arr[i];

                // will return undefined if not found; you could return a default instead
            }

        })
    }

    var async = require('async');
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var DriverTotalData = [];

        async.eachSeries(Result, function (item, resp) {
            var EventArray = item.eventLog;
            var EventArrayLength = item.eventLog.length;
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                DriverID: "";
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var DriverData = DriverDataFunction.sync(null, DriverID);
                if (DriverData == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = DriverData.name + ' ' + DriverData.lname;
                    Driver_PhoneNumber = DriverData.phone;
                    Driver_Email = DriverData.email;
                }
            }
            DriverTotalData.push({
                DriverID: DriverID,
                Driver_Name: Driver_Name + '( ' + Driver_PhoneNumber + ' )',
                Driver_Email: Driver_Email,
                deliverycharge: parseFloat(item.deliverycharge),
                subtotal_amount: parseFloat(item.subtotal_amount)
            })
            OrderData.push({
                orderseqId: item.orderseqId,
                Date: item.Date,
                Order_Accepted_Time: item.Order_Accepted_Time,
                Order_Completed_Time: item.Order_Completed_Time,
                Order_Journey_Time: item.Order_Journey_Time,
                receiverName: item.receiverName,
                receiverPhone: item.receiverPhone,
                subtotal_amount: item.subtotal_amount,
                deliverycharge: item.deliverycharge,
                bookingType: item.bookingType,
                ExceededAmount: item.ExceededAmount,
                total_amount: item.total_amount,
                DriverID: DriverID,
                Driver_Name: Driver_Name + '( ' + Driver_PhoneNumber + ' )',
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                deliverycharge: item.deliverycharge,
                subtotal_amount: item.subtotal_amount
            });
            resp();
        }, function (err) {
            var datasa = [];
            datasa = DriverTotalData;
            var DriverUniqueData = UniqueDriverData.sync(null, DriverTotalData);
            var PDFResult = Converting_PDF.sync(null, OrderData, DriverUniqueData, CustomerData, ClientCODReport);
            callback('All operations Completed Successfully');
        })
    });
};













customermod.prototype.Find_All_Premium_Customer_Monthly_Invoice_Processing = function (values, CustomerData, InvoiceData, callback) {
    var me = this;
    var sync = require('sync');
    var Orders = me.Orders;
    var moment = require('moment');
    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    var fname = generateFilename();

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {

            var from_date = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var to_date = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            var query = {
                Whether_Deleted: false,
                status: 14,
                userId: values.CustomerID,
                Date: {
                    $gte: from_date,
                    $lte: to_date
                }
            };
            // var query = {
            //     status: 14,
            //     userId: values.CustomerID
            // };
            console.log(query);
            Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function Converting_PDF(values, CustomerData, InvoiceData, Previous_Dues, Miscellaneous_Dues, GST, callback) {
        process.nextTick(function () {
            var Result = values;
            var Total_Delivery_Calculated_Price_Month = 0;
            var Total_ExceededAmount = 0;

            var Total_Delivery_Price;
            var t = 0;
            console.log("Entering the pdf processing");
            var headdata;
            var rowdata = '';
            var CustomerName = CustomerData.First_name;
            var CustomerAddress;
            var Last_Template;

            function Address_Shortning(string) {
                string = string.replace(/\s\s+/g, ' ');
                string = string.replace(/  +/g, ' ');
                string = string.replace(/^ /, '');
                string = string.replace(/\s\s*$/, '');
                string = string.replace(', Hyderabad, Telangana, India', '');
                string = string.replace(', Telangana, India', '');
                string = string.replace(', India', '');
                string = string.replace('Hyderabad, Telangana, India', '');
                string = string.replace('Telangana, India', '');
                string = string.replace('Hyderabad,', '');
                string = string.replace('Telangana,', '');
                string = string.replace('Hyderabad', '');
                string = string.replace('Telangana', '');
                string = string.replace('India', '');
                string = string.replace(/,,+/g, ',');
                string = string.replace(/^,/, '');
                string = string.replace(/\s\s+/g, ' ');
                string = string.replace(/  +/g, ' ');
                string = string.replace(/^ /, '');
                string = string.replace(/\s\s*$/, '');
                string = titleString(string);
                function titleString(str) {
                    var myArr = str.toLowerCase().split(" ");
                    for (var a = 0; a < myArr.length; a++) {
                        myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
                    }
                    return myArr.join(" ");
                }
                return string
            }
            if (CustomerData.Default_Pickup_Location_Exist == true) {
                var moment = require('moment');

                CustomerAddress = Address_Shortning(CustomerData.Default_Pickup_Address);
                Last_Template = '    <table style="width: 518px;margin-top: 15px;">' +
                    '        <tr>' +
                    '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
                    '                        * All the orders picked from <span style="color:#504026;">' + CustomerAddress + '</span>' +
                    '                </td>' +
                    '            </tr>' +
                    '        <tr>' +
                    '            <td style="font-style: italic;text-align: center;">' +
                    '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
                    '                have any concerns/suggestions on the service' +
                    '            </td>' +
                    '        </tr>' +
                    '    </table>';
                for (var i = 0; i < values.length; i++) {
                    console.log(3);
                    var Order_DateTime = moment(values[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                    var Order_Accepted_Time = moment(values[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Completed_Time = moment(values[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Journey_Time = values[t].Order_Journey_Time;
                    console.log(4);
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        console.log(5);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '</tr>';
                    } else {
                        console.log(6);
                        var deliverycharge;
                        var ExceededAmount = 0;
                        if (CustomerData.Premium_Pricing_Set == true) {
                            if (values[t].bookingType == 1) {
                                deliverycharge = CustomerData.Premium_Instant_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 2) {
                                deliverycharge = CustomerData.Premium_4hours_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 3) {
                                deliverycharge = CustomerData.Premium_Same_Day_Pricing + values[t].ExceededAmount;
                            }
                        } else {
                            deliverycharge = parseFloat(values[t].deliverycharge)
                        }
                        ExceededAmount = values[t].ExceededAmount;
                        Total_ExceededAmount += ExceededAmount;
                        Total_Delivery_Calculated_Price_Month += parseFloat(deliverycharge);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + deliverycharge + ' </span></td>' +
                            '</tr>';
                    }
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        Total_Delivery_Price = CustomerData.Flat_Monthly_Price;
                        console.log(7);
                    } else {
                        Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;
                        console.log(8);
                    }
                    t++;
                }
            } else {
                var moment = require('moment');
                CustomerAddress = '<br><br>';
                Last_Template = '    <table style="width: 518px;margin-top: 15px;">' +
                    '        <!-- <tr>' +
                    '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
                    '                        Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you have any concerns/suggestions on the service' +
                    '                </td>' +
                    '            </tr> -->' +
                    '        <tr>' +
                    '            <td style="font-style: italic;text-align: center;">' +
                    '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
                    '                have any concerns/suggestions on the service' +
                    '            </td>' +
                    '        </tr>' +
                    '    </table>';
                for (var i = 0; i < values.length; i++) {
                    console.log(3);
                    var Order_DateTime = moment(values[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                    var Order_Accepted_Time = moment(values[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Completed_Time = moment(values[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Journey_Time = values[t].Order_Journey_Time;
                    console.log(4);
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        console.log(5);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Pickup Address</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].pickAddress) + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '</tr>';
                    } else {
                        console.log(6);
                        var deliverycharge;
                        var ExceededAmount;
                        if (CustomerData.Premium_Pricing_Set == true) {
                            if (values[t].bookingType == 1) {
                                deliverycharge = CustomerData.Premium_Instant_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 2) {
                                deliverycharge = CustomerData.Premium_4hours_Pricing + values[t].ExceededAmount;
                            } else if (values[t].bookingType == 3) {
                                deliverycharge = CustomerData.Premium_Same_Day_Pricing + values[t].ExceededAmount;
                            }
                        } else {
                            deliverycharge = parseFloat(values[t].deliverycharge)
                        }
                        ExceededAmount = values[t].ExceededAmount;
                        Total_ExceededAmount += ExceededAmount;
                        Total_Delivery_Calculated_Price_Month += parseFloat(deliverycharge);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Pickup Address</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].pickAddress) + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + deliverycharge + ' </span></td>' +
                            '</tr>';
                    }
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        Total_Delivery_Price = CustomerData.Flat_Monthly_Price + Total_ExceededAmount;
                        console.log(7);
                    } else {
                        Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;
                        console.log(8);
                    }
                    t++;
                }
            }
            console.log(1);
            var moment = require('moment');
            var currentDateTime = moment().utcOffset(330).format('DD/MM/YY h:mm A');
            var due_date = moment().utcOffset(330).add(10, 'days').format('DD/MM/YYYY');
            var Phone = CustomerData.Phone;
            var InvoiceNumber = InvoiceData.InvoiceNumber;
            var CustomerNo = CustomerData.customerseqId;
            console.log(2);
            var Total_Collection = Total_Delivery_Price + Previous_Dues + Miscellaneous_Dues;
            var script = '<script>' +
                'function myFunction() {' +
                'var elmnt = document.getElementById("Table2");' +
                'var txt =  elmnt.offsetHeight;' +
                'var newheight = txt + 350;' +
                'var otherheight = txt+400;' +
                '    var something = document.getElementById("Table3");' +
                '    something.style.top = newheight+"px";' +
                '    var otherthing = document.getElementById("wb_Text6");' +
                '    otherthing.style.top = otherheight+"px"; ' +
                '}' +
                '</script>';
            var GST_Place = '';
            if (GST != null && GST != "") {
                GST_Place = '                <div style="margin-bottom: 3px;">' +
                    '                    <span style="font-size: 11px;"><strong>GST:</strong>' + GST + '</span>' +
                    '                </div>';
            }
            var html = '<!doctype html>' +
                '<html>' +
                '<head>' +
                script +
                '    <meta charset="utf-8">' +
                '    <style>' +
                '        a {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        a:visited {' +
                '            color: #800080;' +
                '        }' +
                '' +
                '        a:active {' +
                '            color: #FF0000;' +
                '        }' +
                '' +
                '        a:hover {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        h1 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 32px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h2 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 27px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h3 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 24px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h4 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 21px;' +
                '            font-style: italic;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h5 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 19px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h6 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        .CustomStyle {' +
                '            font-family: "Courier New";' +
                '            font-weight: bold;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #2E74B5;' +
                '            background-color: transparent;' +
                '        }' +
                '' +
                '        body {' +
                '            background-color: #FFFFFF;' +
                '            color: #000000;' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 13px;' +
                '            line-height: 1.1875;' +
                '            margin: 0;' +
                '            padding: 0;' +
                '        }' +
                '' +
                '        #wb_Text1 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text1 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text2 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text3 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text4 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text5 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #Table1 {' +
                '            border: 0px #C0C0C0 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: separate;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table1 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table1 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table1 .cell0 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: top;' +
                '            width: 62px;' +
                '            height: 14px;' +
                '        }' +
                '' +
                '        #Table1 .cell1 {' +
                '            background-color: #e57373;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 14px;' +
                '            color: #FFF;' +
                '        }' +
                '' +
                '        #Table1 .cell2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 14px;' +
                '        }' +
                '' +
                '        #Table1 .cell3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: top;' +
                '            width: 62px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table1 .cell4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table2 {' +
                '            border: 1px #000000 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: collapse;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table2 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table2 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table2 .cell0 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell1 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell2 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell3 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell4 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell9 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell10 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                'margin-right:5px;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 {' +
                '            border: 0px #C0C0C0 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: separate;' +
                '            border-spacing: 1px;' +
                '        }' +
                '' +
                '        #Table3 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table3 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table3 .cell0 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell1 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell9 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Line1 {' +
                '            border-width: 0;' +
                '            height: 78px;' +
                '            width: 8px;' +
                '        }' +
                '' +
                '        #wb_Text7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text7 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #Image1 {' +
                '            border: 0px #000000 solid;' +
                '            padding: 0px 0px 0px 0px;' +
                '            left: 0;' +
                '            top: 0;' +
                '            width: 100%;' +
                '            height: 100%;' +
                '        }' +
                '' +
                '        #wb_Text8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text8 div {' +
                '            text-align: left;' +
                '        }' +
                '    </style>' +
                '</head>' +
                '<body onload="myFunction()">' +
                '    <table style="margin-left:10px;">' +
                '        <tr>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" id="Image1" alt="" style="width: 90%;"></div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
                '                </div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
                '                </div>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '    <br>' +
                '    <table style="margin-left:10px;width: 518px;">' +
                '        <tr>' +
                '            <td style="width: 60%;">' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">' + CustomerName + '</span>' +
                '                </div>' +
                '' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">+91' + Phone + '</span>' +
                '                </div>' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">' + CustomerAddress + '</span>' +
                '                </div>' +
                GST_Place +
                '            </td>' +
                '            <td style="width: 40%;">' +
                '                <table id="Table1">' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Date: </span></strong></td>' +
                '                        <td style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + currentDateTime + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Due Date: </span></strong></td>' +
                '                        <td class="cell1" style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + due_date + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Customer No: </span></strong></td>' +
                '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + CustomerNo + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Invoice No:</span></strong></td>' +
                '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + InvoiceNumber + '</span></td>' +
                '                    </tr>' +
                '                </table>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '<table style="margin-left:10px;width:519px;z-index:7;" id="Table2">' +
                headdata +
                rowdata +
                '</table>' +
                '<table style="margin-top: 12px;margin-left:325px;top:275px;width:200px;height:91px;z-index:8;" id="Table3">' +
                '<tr>' +
                '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">SubTotal</span></td>' +
                '            <td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell2"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">' + Total_Delivery_Price + '</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Tax Amount</span></td>' +
                '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">0</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Pending Balances</span></td>' +
                '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">' + Previous_Dues + '</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Miscellaneous</span></td>' +
                '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell8"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">' + Miscellaneous_Dues + '</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;"><strong>Total Due</strong></span></td>' +
                '<td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell9"><span style="color:#FFFFFF;font-family:Arial;font-size:13px;line-height:16px;"><strong>' + Total_Collection + '</strong></span></td>' +
                '</tr>' +
                '</table>' +
                Last_Template +
                '</body>' +
                '</html>';
            // nfile = os.tmpDir() + '/' + fname + '.pdf';
            // nfile = './' + fname + '.pdf';
            fname = fname + '.pdf';
            console.log(10);
            console.log(fname);
            // var header = '<div style="position:absolute;left:287px;top:5px;width:2px;height:70px;z-index:1;">' +
            //     '            <img src="https://s3.amazonaws.com/ezshippimages/line.png" alt="" style="border-width: 0;height: 78px;width: 8px;"></div>' +
            //     '        <div style=" background-color: transparent;background-image: none;border: 0px #000000 solid;padding: 0;margin: 0;text-align: left;position:absolute;left:316px;top:11px;width:213px;height:60px;z-index:2;">' +
            //     '            <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span></div>' +
            //     '        <div style="text-align: left;position:absolute;left:17px;top:17px;width:263px;height:49px;z-index:3;">' +
            //     '            <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" alt="" style="border: 0px #000000 solid;padding: 0px 0px 0px 0px;left: 0;top: 0;width: 100%;height: 100%;">' +
            //     '        </div>';

            // htmlToPdf.setDebug(true);
            // htmlToPdf.convertHTMLString(html, nfile,
            //     function (error, success) {
            var conversion = require("phantom-html-to-pdf")({
                phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
                tmpDir: os.tmpDir(),
                waitForJS: true,
                waitForJSVarName: script,
                NumberOfWorkers: 4,
                paperSize: {
                    format: "A4", orientation: "portrait"
                },
                fitToPage: true,
                format: {
                    quality: 100
                }
            });
            var optionsPDF = {
                html: html,
                footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
                    '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
                fitToPage: true
            }
            conversion(optionsPDF, function (err, res) {
                console.log("PDF process going")
                if (err) {
                    console.log('Oh noes! Errorz!');
                    console.log(err);
                    callback(null, err);
                } else {
                    // if (parseInt(success.process_code) == 0) {
                    console.log("response")
                    console.log(res);
                    nfile = res.stream.path;
                    console.log("path");
                    console.log(nfile);
                    // console.log(res.logs);
                    // console.log(res.NumberOfPages);
                    console.log("pdf done");
                    me.Upload_PDF_AWS(nfile, fname, function (err, responcer) {
                        console.log("pdf uploaded");
                        var query = {
                            CustomerInvoiceID: InvoiceData.CustomerInvoiceID
                        }
                        var changes = {
                            ProcessStage: 2,
                            PDFLink: fname
                        };
                        var multiplicity = {
                            multi: false
                        }
                        me.Customer_Invoicing.update(query, changes, multiplicity).exec(function (err, Result) {
                            console.log("pdf processed")
                            callback(null, 'Updated Successfully');
                        })
                    })
                    // }
                }
            });
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        console.log("Results got");
        console.log("Previous Dues ->" + values.Previous_Dues);
        var Previous_Dues = 0;
        if (values.Previous_Dues == null || values.Previous_Dues == "" || values.Previous_Dues == "0" || values.Previous_Dues == 0) {
            Previous_Dues = 0;
        } else {
            Previous_Dues = Number(values.Previous_Dues);
        }
        var Miscellaneous_Dues = 0;
        if (values.Miscellaneous_Dues == null || values.Miscellaneous_Dues == "" || values.Miscellaneous_Dues == "0" || values.Miscellaneous_Dues == 0) {
            Miscellaneous_Dues = 0;
        } else {
            Miscellaneous_Dues = Number(values.Miscellaneous_Dues);
        }
        var GST = "";
        if (values.GST == null || values.GST == "") {
            GST = "";
        } else {
            GST = String(values.GST);
        }
        var PDFResult = Converting_PDF.sync(null, Result, CustomerData, InvoiceData, Previous_Dues, Miscellaneous_Dues, GST);
        callback('All operations Completed Successfully');
    });
};

customermod.prototype.Testing_New_PDF = function (callback) {
    var me = this;
    var script = '<script>' +
        'function myFunction() {' +
        'var elmnt = document.getElementById("Table2");' +
        'var txt =  elmnt.offsetHeight;' +
        'var newheight = txt + 230;' +
        'var otherheight = txt+350;' +
        '    var something = document.getElementById("Table3");' +
        '    something.style.top = newheight+"px";' +
        '    var otherthing = document.getElementById("wb_Text6");' +
        '    otherthing.style.top = otherheight+"px"; ' +
        '}' +
        '</script>';
    var html = '<!doctype html>' +
        '<html>' +
        '' +
        '<head>' +
        '    <meta charset="utf-8">' +
        '    <style>' +
        '        a {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '' +
        '        a:visited {' +
        '            color: #800080;' +
        '        }' +
        '' +
        '        a:active {' +
        '            color: #FF0000;' +
        '        }' +
        '' +
        '        a:hover {' +
        '            color: #0000FF;' +
        '            text-decoration: underline;' +
        '        }' +
        '' +
        '        h1 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 32px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h2 {' +
        '            font-family: Arial;' +
        '            font-weight: bold;' +
        '            font-size: 27px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h3 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 24px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h4 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 21px;' +
        '            font-style: italic;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h5 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 19px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        h6 {' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #000000;' +
        '            background-color: transparent;' +
        '            margin: 0px 0px 0px 0px;' +
        '            padding: 0px 0px 0px 0px;' +
        '            display: inline;' +
        '        }' +
        '' +
        '        .CustomStyle {' +
        '            font-family: "Courier New";' +
        '            font-weight: bold;' +
        '            font-size: 16px;' +
        '            font-style: normal;' +
        '            text-decoration: none;' +
        '            color: #2E74B5;' +
        '            background-color: transparent;' +
        '        }' +
        '' +
        '        body {' +
        '            background-color: #FFFFFF;' +
        '            color: #000000;' +
        '            font-family: Arial;' +
        '            font-weight: normal;' +
        '            font-size: 13px;' +
        '            line-height: 1.1875;' +
        '            margin: 0;' +
        '            padding: 0;' +
        '        }' +
        '' +
        '        #wb_Text1 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text1 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text2 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text2 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text3 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text3 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text4 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text4 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text5 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text5 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #Table1 {' +
        '            border: 0px #C0C0C0 solid;' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border-collapse: separate;' +
        '            border-spacing: 1px;' +
        '        }' +
        '' +
        '        #Table1 td {' +
        '            padding: 0px 0px 0px 0px;' +
        '        }' +
        '' +
        '        #Table1 td div {' +
        '            white-space: nowrap;' +
        '        }' +
        '' +
        '        #Table1 .cell0 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: top;' +
        '            width: 62px;' +
        '            height: 14px;' +
        '        }' +
        '' +
        '        #Table1 .cell1 {' +
        '            background-color: #e57373;' +
        '            background-image: none;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            height: 14px;' +
        '            color: #FFF;' +
        '        }' +
        '' +
        '        #Table1 .cell2 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            height: 14px;' +
        '        }' +
        '' +
        '        #Table1 .cell3 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: top;' +
        '            width: 62px;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table1 .cell4 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: center;' +
        '            vertical-align: middle;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table2 {' +
        '            border: 1px #000000 solid;' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border-collapse: collapse;' +
        '            border-spacing: 0px;' +
        '        }' +
        '' +
        '        #Table2 td {' +
        '            padding: 0px 0px 0px 0px;' +
        '        }' +
        '' +
        '        #Table2 td div {' +
        '            white-space: nowrap;' +
        '        }' +
        '' +
        '        #Table2 .cell0 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 60px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell1 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 64px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell2 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 102px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell3 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 116px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell4 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 54px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table2 .cell5 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 60px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table2 .cell6 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 64px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table2 .cell7 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 102px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table2 .cell8 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 116px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table2 .cell9 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 54px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table2 .cell10 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 1px #000000 solid;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            width: 60px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table3 {' +
        '            border: 0px #C0C0C0 solid;' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border-collapse: separate;' +
        '            border-spacing: 1px;' +
        '        }' +
        '' +
        '        #Table3 td {' +
        '            padding: 0px 0px 0px 0px;' +
        '        }' +
        '' +
        '        #Table3 td div {' +
        '            white-space: nowrap;' +
        '        }' +
        '' +
        '        #Table3 .cell0 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 66px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table3 .cell1 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 20px;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table3 .cell2 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Table3 .cell3 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 66px;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table3 .cell4 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 20px;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table3 .cell5 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            height: 18px;' +
        '        }' +
        '' +
        '        #Table3 .cell6 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 66px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table3 .cell7 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: left;' +
        '            vertical-align: middle;' +
        '            width: 20px;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table3 .cell8 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            height: 20px;' +
        '        }' +
        '' +
        '        #Table3 .cell9 {' +
        '            background-color: #705137;' +
        '            background-image: none;' +
        '            text-align: right;' +
        '            vertical-align: middle;' +
        '            height: 24px;' +
        '        }' +
        '' +
        '        #Line1 {' +
        '            border-width: 0;' +
        '            height: 78px;' +
        '            width: 8px;' +
        '        }' +
        '' +
        '        #wb_Text7 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text7 div {' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #Image1 {' +
        '            border: 0px #000000 solid;' +
        '            padding: 0px 0px 0px 0px;' +
        '            left: 0;' +
        '            top: 0;' +
        '            width: 100%;' +
        '            height: 100%;' +
        '        }' +
        '' +
        '        #wb_Text8 {' +
        '            background-color: transparent;' +
        '            background-image: none;' +
        '            border: 0px #000000 solid;' +
        '            padding: 0;' +
        '            margin: 0;' +
        '            text-align: left;' +
        '        }' +
        '' +
        '        #wb_Text8 div {' +
        '            text-align: left;' +
        '        }' +
        '    </style>' +
        '</head>' +
        '' +
        '<body>' +
        '    <table>' +
        '        <tr>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" id="Image1" alt="" style="width: 90%;"></div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
        '                </div>' +
        '            </td>' +
        '            <td>' +
        '                <div>' +
        '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
        '                </div>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <br>' +
        '    <table style="width: 518px;">' +
        '        <tr>' +
        '            <td style="width: 60%;">' +
        '                <div style="margin-bottom: 5px;">' +
        '                    <span style="font-size: 11px;">Sri Balaji Den Pro</span>' +
        '                </div>' +
        '                <div style="margin-bottom: 5px;">' +
        '                    <span style="font-size: 11px;">1-126 Pragathi nagar, Chaitanyapuri Besides Chatanyapuri post office</span>' +
        '                </div>' +
        '' +
        '                <div style="margin-bottom: 5px;">' +
        '                    <span style="font-size: 11px;">+917331149356</span>' +
        '                </div>' +
        '            </td>' +
        '            <td style="width: 40%;">' +
        '                <table id="Table1">' +
        '                    <tr>' +
        '                        <td style="text-align: right;"><strong><span style="font-weight: bold;">Date: </span></strong></td>' +
        '                        <td style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">29/08/2017 10:05 AM</span></td>' +
        '                    </tr>' +
        '                    <tr>' +
        '                        <td style="text-align: right;"><strong><span style="font-weight: bold;">Due Date: </span></strong></td>' +
        '                        <td class="cell1" style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">10/09/2017</span></td>' +
        '                    </tr>' +
        '                    <tr>' +
        '                        <td style="text-align: right;"><strong><span style="font-weight: bold;">Customer No: </span></strong></td>' +
        '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">1001</span></td>' +
        '                    </tr>' +
        '                    <tr>' +
        '                        <td style="text-align: right;"><strong><span style="font-weight: bold;">Invoice #</span></strong></td>' +
        '                        <td style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">100000001</span></td>' +
        '                    </tr>' +
        '                </table>' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="left:10px;top:211px;width:518px;height:47px;z-index:7;" id="Table2">' +
        '        <tr>' +
        '            <td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"> Order ID</span></td>' +
        '            <td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;">  Date</span></td>' +
        '            <td class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"> Pickup Address</span></td>' +
        '            <td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:12px;"> Drop Address</span></td>' +
        '            <td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:16px;">Distance</span></td>' +
        '            <td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:16px;">Duration</span></td>' +
        '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:9.3px;line-height:16px;">Charge</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '            <td class="cell6"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '            <td class="cell8"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '            <td class="cell9"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '            <td class="cell9"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '            <td class="cell10"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span></td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="margin-top: 15px;margin-left:315px;top:275px;width:188px;height:91px;z-index:8;" id="Table3">' +
        '        <tr>' +
        '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">SubTotal</span></td>' +
        '            <td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
        '            <td class="cell2"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"> value</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell3"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">Taxable</span></td>' +
        '            <td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
        '            <td class="cell5"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"> value</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell6"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">Previous Dues</span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
        '            <td class="cell8"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"> value</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell6"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">Others</span></td>' +
        '            <td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
        '            <td class="cell8"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;"> value</span></td>' +
        '        </tr>' +
        '        <tr>' +
        '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:11px;line-height:13px;">Total Due</span></td>' +
        '            <td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
        '            <td class="cell9"><span style="color:#FFFFFF;font-family:Arial;font-size:13px;line-height:16px;"><strong> value</strong></span></td>' +
        '        </tr>' +
        '    </table>' +
        '    <table style="width: 518px;margin-top: 15px;">' +
        '        <!-- <tr>' +
        '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
        '                        Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you have any concerns/suggestions on the service' +
        '                </td>' +
        '            </tr> -->' +
        '        <tr>' +
        '            <td style="font-style: italic;text-align: center;">' +
        '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
        '                have any concerns/suggestions on the service' +
        '            </td>' +
        '        </tr>' +
        '    </table>' +
        '</body>' +
        '' +
        '</html>';
    var conversion = require("phantom-html-to-pdf")({
        phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
        tmpDir: '/Users/uday/Desktop/',
        NumberOfWorkers: 2,
        waitForJS: true,
        waitForJSVarName: script,
        paperSize: {
            format: "A5", orientation: "portrait"
        },
        fitToPage: true,
        format: {
            quality: 100
        }
    });
    var optionsPDF = {
        html: html,
        footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;padding: 5px 0px 5px 0px;margin: 0;text-align: center;text-align:center;">' +
            '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span></div>',
        fitToPage: true
    }
    conversion(optionsPDF, function (err, res) {
        if (err) {
            console.log('Oh noes! Errorz!');
            console.log(err);
            callback(null, err);
        } else {
            callback('suuccess');
        }
    })

}
//Add or Update Driver License Details
customermod.prototype.Add_Update_Driver_Driving_License_Details = function (values, callback) {
    var me = this;
    var nfile, fname;

    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    fname = generateFilename();
    //Converting Base64 dataUrl to Jpeg Image
    me.base64ImageToFile(values.Picture, os.tmpDir() + '', fname, function (err, imgPath) {
        nfile = os.tmpDir() + '/' + fname + '.jpeg';
        fname = fname + '.jpeg';
        // Upload to the S3 Bucket
        me.UploadImageAWS(nfile, fname, function (err, responcer) {
            var query = {
                "_id": values.DriverID
            }
            var moment = require('moment');
            var expr_date = moment(values.Driving_License_Expiry_Date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var changes = {
                $set: {
                    Driving_License_Available: true,
                    Driving_License_Expiry_Date: expr_date,
                    Driving_License_Image: fname
                }
            }
            var multiplicity = {
                multi: false
            }
            me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
                if (err) {
                    console.log(err);
                } else {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: "Driver Driving License Details Stored Succesfully"
                        }
                    }));
                }
            })
        })
    })
};
//Add or Update Driver Bank Details
customermod.prototype.Add_Update_Driver_Bank_Details = function (values, callback) {
    var me = this;
    var nfile, fname;

    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    fname = generateFilename();
    //Converting Base64 dataUrl to Jpeg Image
    me.base64ImageToFile(values.Picture, os.tmpDir() + '', fname, function (err, imgPath) {
        nfile = os.tmpDir() + '/' + fname + '.jpeg';
        fname = fname + '.jpeg';
        // Upload to the S3 Bucket
        me.UploadImageAWS(nfile, fname, function (err, responcer) {
            var query = {
                "_id": values.DriverID
            }
            var changes = {
                $set: {
                    Bank_Details_Available: true,
                    Bank_Account_No: values.Bank_Account_No,
                    Bank_Name: values.Bank_Name,
                    Bank_IFSC_No: values.Bank_IFSC_No,
                    Bank_Passbook_Image: fname
                }
            }
            var multiplicity = {
                multi: false
            }
            me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
                if (err) {
                    console.log(err);
                } else {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: "Driver Bank Details Stored Succesfully"
                        }
                    }));
                }
            })
        })
    })
};
customermod.prototype.Find_All_Driver_Documents = function (values, DriverData, callback) {
    var me = this;
    var Bank_Details_Available, Bank_Account_No, Bank_Name, Bank_IFSC_No, Bank_Passbook_Image;
    var S3URL = me.config.S3URL;
    var moment = require('moment');
    if (DriverData.Bank_Details_Available == null || DriverData.Bank_Details_Available == false) {
        Bank_Details_Available = false;
        Bank_Account_No = "";
        Bank_Name = "";
        Bank_IFSC_No = "";
        Bank_Passbook_Image = "";
    } else if (DriverData.Bank_Details_Available == true) {
        Bank_Details_Available = true;
        Bank_Account_No = String(DriverData.Bank_Account_No);
        Bank_Name = String(DriverData.Bank_Name);
        Bank_IFSC_No = String(DriverData.Bank_IFSC_No);
        Bank_Passbook_Image = S3URL + String(DriverData.Bank_Passbook_Image);
    }
    var Driving_License_Available, Driving_License_Image, Driving_License_Expiry_Date;
    if (DriverData.Driving_License_Available == null || DriverData.Driving_License_Available == false) {
        Driving_License_Available = false;
        Driving_License_Image = "";
        Driving_License_Expiry_Date = "";
    } else if (DriverData.Driving_License_Available == true) {
        Driving_License_Available = true;
        Driving_License_Image = S3URL + String(DriverData.Driving_License_Image);
        Driving_License_Expiry_Date = moment(DriverData.Driving_License_Expiry_Date).utcOffset(330).format('DD/MM/YYYY');
    }
    var Address_Proof_Available, Address_Proof_Details, Address_Proof_Image;
    if (DriverData.Address_Proof_Available == null || DriverData.Address_Proof_Available == false) {
        Address_Proof_Available = false;
        Address_Proof_Details = "";
        Address_Proof_Image = "";
    } else if (DriverData.Address_Proof_Available == true) {
        Address_Proof_Available = true;
        Address_Proof_Details = String(DriverData.Address_Proof_Details);
        Address_Proof_Image = S3URL + String(DriverData.Address_Proof_Image);
    }
    var DocumentData = {
        DriverID: String(DriverData._id),
        DriverName: DriverData.name + ' ' + DriverData.lname,
        DriverPhoneNumber: DriverData.phone,
        Bank_Details_Available: Bank_Details_Available,
        Bank_Account_No: Bank_Account_No,
        Bank_Name: Bank_Name,
        Bank_IFSC_No: Bank_IFSC_No,
        Bank_Passbook_Image: Bank_Passbook_Image,
        Driving_License_Available: Driving_License_Available,
        Driving_License_Image: Driving_License_Image,
        Driving_License_Expiry_Date: Driving_License_Expiry_Date,
        Address_Proof_Available: Address_Proof_Available,
        Address_Proof_Details: Address_Proof_Details,
        Address_Proof_Image: Address_Proof_Image
    }
    return callback(false, new me.ApiResponce({
        success: true,
        extras: {
            DocumentData: DocumentData
        }
    }));
}

//********  Driver Document End */


/*********  Business Models  **********/
//Random Password
//Generating the Random parseFloat for Security
customermod.prototype.Check_for_CityID = function (values, callback) {
    var me = this;
    me.City.findOne({ "_id": values.CityID }, function (err, CityData) {
        if (err) {
            console.log(err)
        } else {
            if (CityData == null) {
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.City_Not_Found
                    }
                }));
            } else {
                return callback(false, CityData);
            }
        }
    })
};
//Generating the Random parseFloat for Security
customermod.prototype.Check_for_CountryID = function (values, callback) {
    var me = this;
    me.Country.findOne({ "_id": values.CountryID }, function (err, CountryData) {
        if (err) {
            console.log(err);
        } else {
            if (CountryData == null) {
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.Country_Not_Found
                    }
                }));
            } else {
                return callback(false, CountryData);
            }
        }
    })
};
customermod.prototype.Random_Password = function () {
    var me = this;
    var charBank = "abcdefghijklmnpqrtuvwxyz12346789ABCDEFGHIJKLMNPQRTUVWXYZ12346789";
    var fstring = '';
    for (var i = 0; i < 8; i++) {
        fstring += charBank[parseInt(Math.random() * charBank.length)];
    }
    console.log(fstring);
    return fstring;
};
//Check for StoreName
customermod.prototype.Check_Whether_StoreName_Exist_Or_Not = function (Store_Entity_Name, callback) {
    var me = this;
    me.Store_Entity.findOne({ Store_Entity_Name: Store_Entity_Name }).exec(function (err, EntityData) {
        if (err) {
            console.log(err);
            console.log("Case 1");
        } else {
            if (EntityData == null) {
                console.log("Case 2");
                callback(true, {});
            } else if (EntityData != null) {
                console.log("Case 3");
                callback(false, EntityData);
            }
        }
    })
}
customermod.prototype.Script_for_Orders_Address_LatLong_Functionality_Hitech_Orders = function (values, callback) {
    var me = this;
    var sync = require('sync');
    console.log("Started Script")
    function OrderData_Function(callback) {
        process.nextTick(function () {
            var query = {
                userId: "59d372df28d4fd35d24eb5e0",
                status: {
                    $in: [1, 7, 16, 10, 11, 12, 15, 18, 20]
                }
            };
            me.Orders.find(query).select('orderseqId pickAddress dropAddress').exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    function Address_Function(Address, callback) {
        process.nextTick(function () {
            me.Address_Lat_Long_Function(Address, function (err, Result) {
                if (Result.latlong == true) {
                    callback(null, Result);
                } else {
                    console.log("Address not fetched     " + Address);
                    // callback(null,{"latitude":17.4437,"longitude":78.7892});
                    callback(null, Result);
                }
            })
        })
    }
    function Update_Function(orderId, PickData, DropData, callback) {
        process.nextTick(function () {
            var query = {
                _id: orderId
            }
            var changes = {
                $set: {
                    "pickLocation.Latitude": PickData.latitude,
                    "pickLocation.Longitude": PickData.longitude,
                    "dropLocation.Latitude": DropData.latitude,
                    "dropLocation.Longitude": DropData.longitude
                }
            }
            var multiplicity = {
                multi: false
            }
            me.Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, "Order Updated Successfully");
            })
        })
    }
    sync(function () {
        var Result = OrderData_Function.sync(null);
        console.log("Result count" + Result.length);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var orderId = Result[t]._id;
            var PickupData = Address_Function.sync(null, Result[t].pickAddress);
            var DropData = Address_Function.sync(null, Result[t].dropAddress);
            if (PickupData.latlong == false || DropData.latlong == false) {
                console.log("Order Seq->" + Result[t].orderseqId + "  , Script_Runned_Number->" + t);
                t++;
            } else {
                var to_Update = Update_Function.sync(null, orderId, PickupData, DropData);
                console.log("Order Seq->" + Result[t].orderseqId + "  , Script_Runned_Number->" + t);
                t++;
            }
        }
        callback("Script Runned Successfully");
    })
};

customermod.prototype.Script_for_Orders_Address_LatLong_Functionality = function (values, callback) {
    var me = this;
    var sync = require('sync');
    console.log("Started Script")
    function OrderData_Function(callback) {
        process.nextTick(function () {
            var query = {

            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            me.Orders.find({ Shipping_Distance: 0, Whether_Deleted: false }).select('orderseqId pickAddress dropAddress').skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    function Address_Function(Address, callback) {
        process.nextTick(function () {
            me.Address_Lat_Long_Function(Address, function (err, Result) {
                if (Result.latlong == true) {
                    callback(null, Result);
                } else {
                    console.log("Address not fetched     " + Address);
                    // callback(null,{"latitude":17.4437,"longitude":78.7892});
                    callback(null, Result);
                }
            })
        })
    }
    function Update_Function(orderId, PickData, DropData, callback) {
        process.nextTick(function () {
            var query = {
                _id: orderId
            }
            var changes = {
                $set: {
                    "pickLocation.Latitude": PickData.latitude,
                    "pickLocation.Longitude": PickData.longitude,
                    "dropLocation.Latitude": DropData.latitude,
                    "dropLocation.Longitude": DropData.longitude
                }
            }
            var multiplicity = {
                multi: false
            }
            me.Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, "Order Updated Successfully");
            })
        })
    }
    sync(function () {
        var Result = OrderData_Function.sync(null);
        console.log("Result count" + Result.length);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var orderId = Result[t]._id;
            var PickupData = Address_Function.sync(null, Result[t].pickAddress);
            var DropData = Address_Function.sync(null, Result[t].dropAddress);
            if (PickupData.latlong == false || DropData.latlong == false) {
                console.log("Order Seq->" + Result[t].orderseqId + "  , Script_Runned_Number->" + t);
                t++;
            } else {
                var to_Update = Update_Function.sync(null, orderId, PickupData, DropData);
                console.log("Order Seq->" + Result[t].orderseqId + "  , Script_Runned_Number->" + t);
                t++;
            }
        }
        callback("Script Runned Successfully");
    })
};



customermod.prototype.Address_Lat_Long_Function = function (Address, callback) {
    var me = this;
    var sync = require('sync');

    function LatLongFunction(AddressData, callback) {
        process.nextTick(function () {
            var https = require('https');
            const querystring = require('querystring');
            var config = require("../Config/config.js");
            var ApiKey = config.Google_Api_Key;
            var query = '';
            query = AddressData.toString();
            console.log(query);
            searchquery = querystring.escape(query);
            var url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + searchquery + '&radius=1000&key=' + ApiKey;
            var result = '';
            var jsonresult;
            https.get(url, (res) => {
                res.setEncoding('utf8');
                res.on('data', (d) => {
                    result += d;
                })
                var AddressData;
                res.on('end', () => {
                    jsonresult = JSON.parse(result);
                    if (jsonresult.results.length == 0) {
                        AddressData = {
                            latlong: false
                        }
                    } else {
                        AddressData = {
                            latitude: jsonresult.results[0].geometry.location.lat,
                            longitude: jsonresult.results[0].geometry.location.lng,
                            latlong: true
                        };
                    }
                    callback(null, AddressData);
                })
            });
        })
    }

    sync(function () {

        var Stringdata = String(Address);
        function Address_Shortning(string) {
            string = string.replace(/\)+/g, ' ');
            string = string.replace(/\(+/g, ' ');
            string = string.replace(/\s\s+/g, ' ')
            string = string.replace(/  +/g, ' ');
            string = string.replace(/^ /, '');
            string = string.replace(/\s\s*$/, '');
            string = string.replace(/,,+/g, ',');
            string = string.replace(/^,/, '');
            string = string.replace(/\s\s+/g, ' ');
            string = string.replace(/  +/g, ' ');
            string = string.replace(/^ /, '');
            string = string.replace(/\s\s*$/, '');
            string = string.replace(/,+/g, ' ');
            string = titleString(string);
            function titleString(str) {
                var myArr = str.toLowerCase().split(" ");
                for (var a = 0; a < myArr.length; a++) {
                    myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
                }
                return myArr.join(" ");
            }
            return string;
        }
        var case_no = 0;
        Add_latlong(Stringdata, case_no, callback);
        function Add_latlong(AddressData, case_no, callback) {
            case_no++;
            console.log("Fetch Case:- " + case_no);
            console.log("Address:-> " + AddressData.toString());
            AddressData = String(AddressData);
            AddressData = Address_Shortning(AddressData);
            var LatLongData = LatLongFunction.sync(null, AddressData);
            console.log(LatLongData);
            if (LatLongData.latlong == false) {
                AddressData = String(AddressData);
                AddressData = AddressData.split(" ");
                if (AddressData.length <= 0 || AddressData[0] == null || AddressData[0] == "") {
                    callback(false, LatLongData);
                } else if (AddressData.length > 0) {
                    AddressData.splice(0, 1);
                    Add_latlong(AddressData, case_no, callback);
                }
            } else if (LatLongData.latlong == true) {
                callback(false, LatLongData);
            }
        }
    })
};

customermod.prototype.Edit_Driver_Expenses = function (values, callback) {
    var me = this;
    var query = {
        ExpenseID: values.ExpenseID
    };
    var changes = {
        $set: {
            Amount: values.Amount,
            Payment_Type: values.Payment_Type,
            TransactionID: values.TransactionID,
            Purpose_Type: values.Purpose_Type,
            Comment: values.Comment
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Driver_Expenses.update(query, changes, multiplicity).exec(function (err, Result) {
        callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Driver Expense Updated Successfully"
            }
        }));
    })
}

customermod.prototype.Add_Driver_Expenses = function (values, callback) {
    var me = this;
    var ExpenseID = me.uuid();
    var date = new Date();
    var ExpenseData = new me.Driver_Expenses({
        ExpenseID: ExpenseID,
        DriverID: values.DriverID,
        Amount: values.Amount,
        Payment_Type: values.Payment_Type,
        TransactionID: values.TransactionID,
        Purpose_Type: values.Purpose_Type,
        Comment: values.Comment,
        created_at: date,
        updated_at: date
    });
    ExpenseData.save(function (err, Result) {
        if (err) {
            console.log(err);
        } else {
            callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Expense Added Successfully"
                }
            }));
        }
    });
};

customermod.prototype.Edit_Driver_Salary = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        $set: {
            Salary_Assigned: true,
            Salary: values.Salary
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Salary Edited Successfully"
                }
            }));
            var date = new Date();
            var SalaryData = new me.Driver_Salaries_Logs({
                DriverID: values.DriverID,
                Salary: values.Salary,
                created_at: date,
                updated_at: date
            });
            SalaryData.save();
        }
    });
}
customermod.prototype.Add_Driver_Salary = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        $set: {
            Salary_Assigned: true,
            Salary: values.Salary
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Salary Added Successfully"
                }
            }));
            var date = new Date();
            var SalaryData = new me.Driver_Salaries_Logs({
                DriverID: values.DriverID,
                Salary: values.Salary,
                created_at: date,
                updated_at: date
            });
            SalaryData.save();
        }
    });
}

customermod.prototype.Search_All_Driver_Incompleted_Orders_Interval = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": {
                    $nin: [5, 14]
                },
                "Whether_Deleted": false,
                "eventLog.driverid": values.DriverID,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Search_All_Driver_Completed_Orders_Interval_Booking_Type = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    var bookingType;
    if (parseInt(values.bookingType) == 1) {
        bookingType = 1;
    } else if (parseInt(values.bookingType) == 2) {
        bookingType = 2;
    } else if (parseInt(values.bookingType) == 3) {
        bookingType = 3;
    }
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var DriverID = values.DriverID;
            query = {
                $and: [
                    {
                        $or: [
                            {
                                "Date": {
                                    $gte: fmdate,
                                    $lte: todate
                                },
                                "status": 14,
                                "Whether_Deleted": false,
                                "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                                "collectionType": 1,
                                "bookingType": bookingType
                            }, {
                                "Date": {
                                    $gte: fmdate,
                                    $lte: todate
                                },
                                "status": 14,
                                "Whether_Deleted": false,
                                "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                                "collectionType": 2,
                                "bookingType": bookingType
                            }
                        ]
                    }, {
                        $or: [{
                            orderseqId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerEmail: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            order_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            due_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            dropAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address1: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address2: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            paymentId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemDescription: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverycharge: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            comments: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickupdeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverydeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            reviewMsg: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        }
                        ]
                    }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var last = Result[t].eventLog.length;
            if (Result[t].eventLog[last - 1].driverid == String(values.DriverID)) {
                var Result2 = CustomerDataFunction.sync(null, Result[t]);
                if (Result2 == null) {
                    First_name = "";
                    Email = "";
                    Phone = "";
                    countryCode = "";
                } else {
                    First_name = Result2.First_name;
                    Email = Result2.Email;
                    Phone = Result2.Phone;
                    countryCode = Result2.countryCode;
                }
                var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
                DriverID = DriverData._id;
                Driver_Name = DriverData.name;
                Driver_PhoneNumber = DriverData.phone;
                Driver_Email = DriverData.email;

                var OfferApplied;
                var OfferName;
                var OfferDescription;
                var OfferCode;
                var DiscountPercentage;

                if (Result[t].OfferApplied == true) {
                    var OfferID = Result[t].OfferID;
                    var Result4 = OfferDataFunction.sync(null, OfferID);
                    if (Result4 == null) {
                        OfferApplied = false;
                        OfferName = '';
                        OfferDescription = '';
                        OfferCode = '';
                        DiscountPercentage = '';
                    } else {
                        OfferApplied = true;
                        OfferName = Result4.OfferName;
                        OfferDescription = Result4.OfferDescription;
                        OfferCode = Result4.OfferCode;
                        DiscountPercentage = Result4.DiscountPercentage;
                    }
                } else {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                }
                var moment = require('moment');
                var Order_Accepted_Time;
                var Order_Completed_Time;
                var Order_Journey_Time;
                var Shipping_Distance;
                if (Result[t].Order_Accepted_Time == null) {
                    Order_Accepted_Time = '';
                } else {
                    Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                }
                if (Result[t].Order_Completed_Time == null) {
                    Order_Completed_Time = '';
                    Order_Journey_Time = '';
                } else {
                    Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    Order_Journey_Time = Result[t].Order_Journey_Time;
                }
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
                var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
                OrderData.push({
                    First_name: First_name,
                    Email: Email,
                    Phone: Phone,
                    Order_Accepted_Time: Order_Accepted_Time,
                    Order_Completed_Time: Order_Completed_Time,
                    Order_Journey_Time: Order_Journey_Time,
                    Shipping_Distance: Shipping_Distance,
                    Driver_Assigned: Driver_Assigned,
                    DriverID: DriverID,
                    Driver_Name: Driver_Name,
                    Driver_PhoneNumber: Driver_PhoneNumber,
                    Driver_Email: Driver_Email,
                    OfferApplied: OfferApplied,
                    OfferName: OfferName,
                    OfferDescription: OfferDescription,
                    OfferCode: OfferCode,
                    DiscountPercentage: DiscountPercentage,
                    countryCode: countryCode,
                    order_datetime: FormattedDate,
                    status: Result[t].status,
                    DeviceType: Result[t].Devices.DeviceType,
                    orderId: Result[t]._id,
                    orderseqId: Result[t].orderseqId,
                    orderType: Result[t].orderType,
                    due_datetime: Result[t].due_datetime,
                    CustomerID: Result[t].userId,
                    pickAddress: Result[t].pickAddress,
                    dropAddress: Result[t].dropAddress,
                    pickLatitude: Result[t].pickLocation.Latitude,
                    pickLongitude: Result[t].pickLocation.Longitude,
                    dropLatitude: Result[t].dropLocation.Latitude,
                    dropLongitude: Result[t].dropLocation.Longitude,
                    paymentType: Result[t].paymentType,
                    paymentId: Result[t].paymentId,
                    collectionType: Result[t].collectionType,
                    paymentId: Result[t].paymentId,
                    itemDescription: Result[t].itemDescription,
                    receiverName: Result[t].receiverName,
                    receiverPhone: Result[t].receiverPhone,
                    itemName: Result[t].itemName,
                    deliverycharge: parseFloat(Result[t].deliverycharge),
                    subtotal_amount: parseFloat(Result[t].subtotal_amount),
                    total_amount: parseFloat(Result[t].total_amount),
                    Order_Total_Time: Result[t].Order_Total_Time,
                    item_actual_cost: Result[t].item_actual_cost,
                    itemImage: Result[t].itemImage,
                    PickZone: Result[t].pickupdeponame,
                    DropZone: Result[t].deliverydeponame,
                    Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                    barcodeid: Result[t].barcodeid,
                    bookingType: Result[t].bookingType
                });
                t++;
            } else {
                t++;
            }
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Search_All_Driver_Completed_Orders_Interval = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "Whether_Deleted": false,
                "eventLog.driverid": values.DriverID,
                "eventLog.status": 14,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Search_All_Driver_Completed_Orders_Interval_Delivery_and_Total_Amount = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $and: [
                    {
                        $or: [
                            {
                                "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                                "collectionType": 1
                            }, {
                                "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                                "collectionType": 2
                            }
                        ]
                    }, {
                        $or: [{
                            orderseqId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerEmail: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            order_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            due_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            dropAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address1: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address2: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            paymentId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemDescription: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverycharge: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            comments: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickupdeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverydeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            reviewMsg: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        }
                        ]
                    }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                subtotal_amount: Result[t].subtotal_amount,
                total_amount: Result[t].total_amount,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Search_All_Driver_Completed_Orders_Exceeded_Amount = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "Whether_Parcel_Weight_Exceeded": true,
                "ExceededAmount": {
                    $nin: ["", "0", 0, null]
                },
                $and: [
                    {
                        $or: [
                            {
                                "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                                "collectionType": 1
                            }, {
                                "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                                "collectionType": 2
                            }
                        ]
                    }, {
                        $or: [{
                            orderseqId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerEmail: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            order_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            due_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            dropAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address1: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address2: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            paymentId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemDescription: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverycharge: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            comments: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickupdeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverydeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            reviewMsg: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        }
                        ]
                    }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                subtotal_amount: Result[t].subtotal_amount,
                total_amount: Result[t].total_amount,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                Whether_Parcel_Weight_Exceeded: Result[t].Whether_Parcel_Weight_Exceeded,
                ExceededWeight: Result[t].ExceededWeight,
                ExceededAmount: Result[t].ExceededAmount,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Search_All_Driver_Completed_Orders_Subtotal_Total_Amount = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "subtotal_amount": {
                    $nin: ["", "0", 0]
                },
                $and: [
                    {
                        $or: [
                            {
                                "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                                "collectionType": 1
                            }, {
                                "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                                "collectionType": 2
                            }
                        ]
                    }, {
                        $or: [{
                            orderseqId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            customerEmail: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            order_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            due_datetime: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            dropAddress: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address1: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            address2: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            receiverPhone: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            paymentId: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemName: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            itemDescription: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverycharge: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            comments: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            pickupdeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            deliverydeponame: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        },
                        {
                            reviewMsg: {
                                '$regex': values.SearchValue,
                                $options: 'i'
                            }
                        }
                        ]
                    }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                subtotal_amount: Result[t].subtotal_amount,
                total_amount: Result[t].total_amount,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Search_All_Driver_Cancelled_Orders_Interval = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 5,
                "Whether_Deleted": false,
                "cancellation.userType": 2,
                "cancellation.did": values.DriverID,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            }
            me.Orders.find(query).sort({
                Date: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var CancellArray = Result[t].cancellation;
            var CancellArrayLength = Result[t].cancellation.length;
            var Cancellation_Reason = CancellArray[CancellArrayLength - 1].reason;
            var moment = require('moment');
            var cantime = moment(CancellArray[CancellArrayLength - 1].datetime, 'YYYY-MM-DD HH:mm:ss');
            var Cancelled_Time = moment(cantime).format('MMM Do YYYY, h:mm:ss a');
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Cancellation_Reason: Cancellation_Reason,
                Cancelled_Time: Cancelled_Time,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}


customermod.prototype.Find_All_Driver_Cancelled_Orders_Interval = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 5,
                "Whether_Deleted": false,
                "cancellation.userType": 2,
                "cancellation.did": values.DriverID
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 5,
                "Whether_Deleted": false,
                "cancellation.userType": 2,
                "cancellation.did": values.DriverID
            }
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var CancellArray = Result[t].cancellation;
            var CancellArrayLength = Result[t].cancellation.length;
            var Cancellation_Reason = CancellArray[CancellArrayLength - 1].reason;
            var moment = require('moment');
            var cantime = moment(CancellArray[CancellArrayLength - 1].datetime, 'YYYY-MM-DD HH:mm:ss');
            var Cancelled_Time = moment(cantime).format('MMM Do YYYY, h:mm:ss a');
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Cancellation_Reason: Cancellation_Reason,
                Cancelled_Time: Cancelled_Time,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Find_All_Driver_Incompleted_Orders_Interval = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": {
                    $nin: [5, 14]
                },
                "Whether_Deleted": false,
                "eventLog.driverid": values.DriverID
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": {
                    $nin: [5, 14]
                },
                "Whether_Deleted": false,
                "eventLog.driverid": values.DriverID
            }
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
}

customermod.prototype.Find_All_Driver_Completed_Orders_Interval_Booking_Type = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    var bookingType;
    if (parseInt(values.bookingType) == 1) {
        bookingType = 1;
    } else if (parseInt(values.bookingType) == 2) {
        bookingType = 2;
    } else if (parseInt(values.bookingType) == 3) {
        bookingType = 3;
    }
    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var DriverID = values.DriverID;
            query = {
                $or: [
                    {
                        "Date": {
                            $gte: fmdate,
                            $lte: todate
                        },
                        "status": 14,
                        "Whether_Deleted": false,
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1,
                        "bookingType": bookingType
                    }, {
                        "Date": {
                            $gte: fmdate,
                            $lte: todate
                        },
                        "status": 14,
                        "Whether_Deleted": false,
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2,
                        "bookingType": bookingType
                    }
                ]
            };
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            var DriverID = values.DriverID;
            query = {
                $or: [
                    {
                        "Date": {
                            $gte: fmdate,
                            $lte: todate
                        },
                        "status": 14,
                        "Whether_Deleted": false,
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1,
                        "bookingType": bookingType
                    }, {
                        "Date": {
                            $gte: fmdate,
                            $lte: todate
                        },
                        "status": 14,
                        "Whether_Deleted": false,
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2,
                        "bookingType": bookingType
                    }
                ]
            };
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var last = Result[t].eventLog.length;
            if (Result[t].eventLog[last - 1].driverid == String(values.DriverID)) {
                var Result2 = CustomerDataFunction.sync(null, Result[t]);
                if (Result2 == null) {
                    First_name = "";
                    Email = "";
                    Phone = "";
                    countryCode = "";
                } else {
                    First_name = Result2.First_name;
                    Email = Result2.Email;
                    Phone = Result2.Phone;
                    countryCode = Result2.countryCode;
                }
                var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
                DriverID = DriverData._id;
                Driver_Name = DriverData.name;
                Driver_PhoneNumber = DriverData.phone;
                Driver_Email = DriverData.email;

                var OfferApplied;
                var OfferName;
                var OfferDescription;
                var OfferCode;
                var DiscountPercentage;

                if (Result[t].OfferApplied == true) {
                    var OfferID = Result[t].OfferID;
                    var Result4 = OfferDataFunction.sync(null, OfferID);
                    if (Result4 == null) {
                        OfferApplied = false;
                        OfferName = '';
                        OfferDescription = '';
                        OfferCode = '';
                        DiscountPercentage = '';
                    } else {
                        OfferApplied = true;
                        OfferName = Result4.OfferName;
                        OfferDescription = Result4.OfferDescription;
                        OfferCode = Result4.OfferCode;
                        DiscountPercentage = Result4.DiscountPercentage;
                    }
                } else {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                }
                var moment = require('moment');
                var Order_Accepted_Time;
                var Order_Completed_Time;
                var Order_Journey_Time;
                var Shipping_Distance;
                if (Result[t].Order_Accepted_Time == null) {
                    Order_Accepted_Time = '';
                } else {
                    Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                }
                if (Result[t].Order_Completed_Time == null) {
                    Order_Completed_Time = '';
                    Order_Journey_Time = '';
                } else {
                    Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    Order_Journey_Time = Result[t].Order_Journey_Time;
                }
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
                var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
                OrderData.push({
                    First_name: First_name,
                    Email: Email,
                    Phone: Phone,
                    Order_Accepted_Time: Order_Accepted_Time,
                    Order_Completed_Time: Order_Completed_Time,
                    Order_Journey_Time: Order_Journey_Time,
                    Shipping_Distance: Shipping_Distance,
                    Driver_Assigned: Driver_Assigned,
                    DriverID: DriverID,
                    Driver_Name: Driver_Name,
                    Driver_PhoneNumber: Driver_PhoneNumber,
                    Driver_Email: Driver_Email,
                    OfferApplied: OfferApplied,
                    OfferName: OfferName,
                    OfferDescription: OfferDescription,
                    OfferCode: OfferCode,
                    DiscountPercentage: DiscountPercentage,
                    countryCode: countryCode,
                    order_datetime: FormattedDate,
                    status: Result[t].status,
                    DeviceType: Result[t].Devices.DeviceType,
                    orderId: Result[t]._id,
                    orderseqId: Result[t].orderseqId,
                    orderType: Result[t].orderType,
                    due_datetime: Result[t].due_datetime,
                    CustomerID: Result[t].userId,
                    pickAddress: Result[t].pickAddress,
                    dropAddress: Result[t].dropAddress,
                    pickLatitude: Result[t].pickLocation.Latitude,
                    pickLongitude: Result[t].pickLocation.Longitude,
                    dropLatitude: Result[t].dropLocation.Latitude,
                    dropLongitude: Result[t].dropLocation.Longitude,
                    paymentType: Result[t].paymentType,
                    paymentId: Result[t].paymentId,
                    collectionType: Result[t].collectionType,
                    paymentId: Result[t].paymentId,
                    itemDescription: Result[t].itemDescription,
                    receiverName: Result[t].receiverName,
                    receiverPhone: Result[t].receiverPhone,
                    itemName: Result[t].itemName,
                    deliverycharge: parseFloat(Result[t].deliverycharge),
                    subtotal_amount: parseFloat(Result[t].subtotal_amount),
                    total_amount: parseFloat(Result[t].total_amount),
                    Order_Total_Time: Result[t].Order_Total_Time,
                    item_actual_cost: Result[t].item_actual_cost,
                    itemImage: Result[t].itemImage,
                    PickZone: Result[t].pickupdeponame,
                    DropZone: Result[t].deliverydeponame,
                    Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                    barcodeid: Result[t].barcodeid,
                    bookingType: Result[t].bookingType
                });
                t++;
            } else {
                t++;
            }
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
};
customermod.prototype.Find_All_Driver_Completed_Orders_Interval = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "Whether_Deleted": false,
                "eventLog.driverid": values.DriverID,
                "eventLog.status": 14
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "Whether_Deleted": false,
                "eventLog.driverid": values.DriverID,
                "eventLog.status": 14
            }
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Find_All_Driver_Completed_Orders_Interval_Delivery_and_Total_Amount = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query)
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                console.log(Result);
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        console.log(Count);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                subtotal_amount: Result[t].subtotal_amount,
                total_amount: Result[t].total_amount,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Find_All_Driver_Completed_Orders_Subtotal_Total_Amount = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "subtotal_amount": {
                    $nin: ["", "0", 0]
                },
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "subtotal_amount": {
                    $nin: ["", "0", 0]
                },
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query)
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                console.log(Result);
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        console.log(Count);
        var Result = OrderDataFunction.sync(null, values);
        console.log(Result);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                subtotal_amount: Result[t].subtotal_amount,
                total_amount: Result[t].total_amount,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Find_All_Driver_Completed_Orders_Exceeded_Amount = function (values, DriverData, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function CountFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "Whether_Parcel_Weight_Exceeded": true,
                "ExceededAmount": {
                    $nin: ["", "0", 0, null]
                },
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "Whether_Parcel_Weight_Exceeded": true,
                "ExceededAmount": {
                    $nin: ["", "0", 0, null]
                },
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": values.DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            console.log(query)
            me.Orders.find(query).sort({
                Date: -1
            }).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                console.log(Result);
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountFunction.sync(null, values);
        console.log(Count);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var DriverID, Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            DriverID = DriverData._id;
            Driver_Name = DriverData.name;
            Driver_PhoneNumber = DriverData.phone;
            Driver_Email = DriverData.email;

            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                subtotal_amount: Result[t].subtotal_amount,
                total_amount: Result[t].total_amount,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                Whether_Parcel_Weight_Exceeded: Result[t].Whether_Parcel_Weight_Exceeded,
                ExceededWeight: Result[t].ExceededWeight,
                ExceededAmount: Result[t].ExceededAmount,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Count: Count,
                OrderData: OrderData
            }
        }));
    })
}
customermod.prototype.Total_Driver_Analytics_Interval = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');

    function AnalyticFunction(values, type, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            if (type == 0) {
                query = {
                    "Date": {
                        $gte: fmdate,
                        $lte: todate
                    },
                    "Whether_Deleted": false,
                    "eventLog.driverid": values.DriverID,
                    "eventLog.status": 14
                };
            } else if (type == 1) {
                query = {
                    "Date": {
                        $gte: fmdate,
                        $lte: todate
                    },
                    "bookingType": 1,
                    "Whether_Deleted": false,
                    "eventLog.driverid": values.DriverID,
                    "eventLog.status": 14
                };
            } else if (type == 2) {
                query = {
                    "Date": {
                        $gte: fmdate,
                        $lte: todate
                    },
                    "bookingType": 2,
                    "Whether_Deleted": false,
                    "eventLog.driverid": values.DriverID,
                    "eventLog.status": 14
                };
            } else if (type == 3) {
                query = {
                    "Date": {
                        $gte: fmdate,
                        $lte: todate
                    },
                    "bookingType": 3,
                    "Whether_Deleted": false,
                    "eventLog.driverid": values.DriverID,
                    "eventLog.status": 14
                };
            }
            me.Orders.find(query).count().exec(function (err, Count) {
                callback(null, Count);
            });
        });
    }
    sync(function () {
        var Total_Count = AnalyticFunction.sync(null, values, 0);
        var Instant_Count = AnalyticFunction.sync(null, values, 1);
        var Four_Hours_Count = AnalyticFunction.sync(null, values, 2);
        var Same_Day_Count = AnalyticFunction.sync(null, values, 3);
        var AnalyticData = {
            Total_Count: Total_Count,
            Instant_Count: Instant_Count,
            Four_Hours_Count: Four_Hours_Count,
            Same_Day_Count: Same_Day_Count
        };
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                AnalyticData: AnalyticData
            }
        }));
    })
};

customermod.prototype.Edit_Driver_Password = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        $set: {
            password: values.password
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Password Updated Successfully"
                }
            }));
        }
    });
}

customermod.prototype.Edit_Driver_Information = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        $set: {
            name: values.name,
            lname: values.lname,
            phone: values.phone
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Information Updated"
                }
            }));
        }
    });
}
customermod.prototype.Reject_Driver = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        $set: {
            acc_status: 4
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Account Rejected"
                }
            }));
            var date = new Date();
            console.log("Driver Logout");
            var querystring = require('querystring');
            var https = require('https');
            var fs = require('fs');
            var config = require("../Config/config.js");
            var post_data = querystring.stringify({
                'DriverID': values.DriverID
            });
            var result = '';
            var options = {
                host: 'api.ezshipp.com',
                port: 443,
                method: 'POST',
                path: '/Logout_Reject_Devices',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(post_data)
                }
            };
            var str = '';
            var req = https.request(options, function (res) {
                var data;
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    console.log(chunk);
                });
            });
            req.write(post_data);
            req.end();
        }
    });
}

customermod.prototype.Approve_Inactive_or_New_Customer = function (values, callback) {
    var me = this;
    var query = {
        _id: values.DriverID
    };
    var changes = {
        $set: {
            businessid: values.OperatorID,
            depoId: values.ZoneID,
            acc_status: 3
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Drivers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Driver Approved Successfully"
                }
            }));
        }
    });
}
customermod.prototype.Search_All_Busy_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        status: 5,
        $or: [{
            name: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            lname: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            email: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            phone: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            created_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            last_active_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        ]
    }
    me.Drivers.find(query).sort({
        driverseqId: -1
    }).limit(10).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
customermod.prototype.Search_All_Offline_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        status: 4,
        $or: [{
            name: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            lname: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            email: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            phone: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            created_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            last_active_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        ]
    }
    me.Drivers.find(query).sort({
        driverseqId: -1
    }).limit(10).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
customermod.prototype.Search_All_Online_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        status: 3,
        $or: [{
            name: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            lname: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            email: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            phone: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            created_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            last_active_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        ]
    }
    me.Drivers.find(query).sort({
        driverseqId: -1
    }).limit(10).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
customermod.prototype.Search_All_Rejected_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 4,
        $or: [{
            name: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            lname: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            email: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            phone: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            created_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            last_active_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        ]
    }
    me.Drivers.find(query).sort({
        driverseqId: -1
    }).limit(10).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
customermod.prototype.Find_All_Busy_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        status: 5
    }
    var toSkip = parseInt(values.skip);
    me.Drivers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                var DriverData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var Salary_Assigned;
                    var Salary;
                    if (Result[t].Salary_Assigned == true) {
                        Salary_Assigned = true;
                        Salary = Result[t].Salary;
                    } else {
                        Salary_Assigned = false;
                        Salary = 0;
                    }
                    DriverData.push({
                        DriverID: String(Result[t]._id),
                        driverseqId: parseInt(Result[t].driverseqId),
                        acc_status: parseInt(Result[t].acc_status),
                        name: String(Result[t].name) + ' ' + String(Result[t].lname),
                        email: String(Result[t].email),
                        phone: String(Result[t].phone),
                        Salary_Assigned: Salary_Assigned,
                        Salary: Salary,
                        created_dt: String(Result[t].created_dt),
                        last_active_dt: Result[t].last_active_dt,
                        LastOnline: String(Result[t].LastOnline),
                        profilePic: Result[t].profilePic,
                        Devices: Result[t].Devices,
                        CurrentStatus: Result[t].CurrentStatus,
                        status: Result[t].status,
                        license_pic: Result[t].license_pic,
                        bank_passbook: Result[t].bank_passbook,
                        bank_country: Result[t].bank_country,
                        Account_num: Result[t].Account_num,
                        Routing_num: Result[t].Routing_num,
                        bank_name: Result[t].bank_name
                    })
                    t++;
                }
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        DriverData: DriverData,
                        Count: Count
                    }
                }));
            })
        }
    });
};
customermod.prototype.Find_All_Offline_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        status: 4
    }
    var toSkip = parseInt(values.skip);
    me.Drivers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                var DriverData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var Salary_Assigned;
                    var Salary;
                    if (Result[t].Salary_Assigned == true) {
                        Salary_Assigned = true;
                        Salary = Result[t].Salary;
                    } else {
                        Salary_Assigned = false;
                        Salary = 0;
                    }
                    DriverData.push({
                        DriverID: String(Result[t]._id),
                        driverseqId: parseInt(Result[t].driverseqId),
                        acc_status: parseInt(Result[t].acc_status),
                        name: String(Result[t].name) + ' ' + String(Result[t].lname),
                        email: String(Result[t].email),
                        phone: String(Result[t].phone),
                        Salary_Assigned: Salary_Assigned,
                        Salary: Salary,
                        created_dt: String(Result[t].created_dt),
                        last_active_dt: Result[t].last_active_dt,
                        LastOnline: String(Result[t].LastOnline),
                        profilePic: Result[t].profilePic,
                        Devices: Result[t].Devices,
                        CurrentStatus: Result[t].CurrentStatus,
                        status: Result[t].status,
                        license_pic: Result[t].license_pic,
                        bank_passbook: Result[t].bank_passbook,
                        bank_country: Result[t].bank_country,
                        Account_num: Result[t].Account_num,
                        Routing_num: Result[t].Routing_num,
                        bank_name: Result[t].bank_name
                    })
                    t++;
                }
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        DriverData: DriverData,
                        Count: Count
                    }
                }));
            })
        }
    });
};
customermod.prototype.Find_All_Rejected_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 4,
    }
    var toSkip = parseInt(values.skip);
    me.Drivers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                var DriverData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var Salary_Assigned;
                    var Salary;
                    if (Result[t].Salary_Assigned == true) {
                        Salary_Assigned = true;
                        Salary = Result[t].Salary;
                    } else {
                        Salary_Assigned = false;
                        Salary = 0;
                    }
                    DriverData.push({
                        DriverID: String(Result[t]._id),
                        driverseqId: parseInt(Result[t].driverseqId),
                        acc_status: parseInt(Result[t].acc_status),
                        name: String(Result[t].name) + ' ' + String(Result[t].lname),
                        email: String(Result[t].email),
                        phone: String(Result[t].phone),
                        Salary_Assigned: Salary_Assigned,
                        Salary: Salary,
                        created_dt: String(Result[t].created_dt),
                        last_active_dt: Result[t].last_active_dt,
                        LastOnline: String(Result[t].LastOnline),
                        profilePic: Result[t].profilePic,
                        Devices: Result[t].Devices,
                        CurrentStatus: Result[t].CurrentStatus,
                        status: Result[t].status,
                        license_pic: Result[t].license_pic,
                        bank_passbook: Result[t].bank_passbook,
                        bank_country: Result[t].bank_country,
                        Account_num: Result[t].Account_num,
                        Routing_num: Result[t].Routing_num,
                        bank_name: Result[t].bank_name
                    })
                    t++;
                }
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        DriverData: DriverData,
                        Count: Count
                    }
                }));
            })
        }
    });
};
customermod.prototype.Find_All_Online_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        status: 3
    }
    var toSkip = parseInt(values.skip);
    me.Drivers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                var DriverData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var Salary_Assigned;
                    var Salary;
                    if (Result[t].Salary_Assigned == true) {
                        Salary_Assigned = true;
                        Salary = Result[t].Salary;
                    } else {
                        Salary_Assigned = false;
                        Salary = 0;
                    }
                    DriverData.push({
                        DriverID: String(Result[t]._id),
                        driverseqId: parseInt(Result[t].driverseqId),
                        acc_status: parseInt(Result[t].acc_status),
                        name: String(Result[t].name) + ' ' + String(Result[t].lname),
                        email: String(Result[t].email),
                        phone: String(Result[t].phone),
                        Salary_Assigned: Salary_Assigned,
                        Salary: Salary,
                        created_dt: String(Result[t].created_dt),
                        last_active_dt: Result[t].last_active_dt,
                        LastOnline: String(Result[t].LastOnline),
                        profilePic: Result[t].profilePic,
                        Devices: Result[t].Devices,
                        CurrentStatus: Result[t].CurrentStatus,
                        status: Result[t].status,
                        license_pic: Result[t].license_pic,
                        bank_passbook: Result[t].bank_passbook,
                        bank_country: Result[t].bank_country,
                        Account_num: Result[t].Account_num,
                        Routing_num: Result[t].Routing_num,
                        bank_name: Result[t].bank_name
                    })
                    t++;
                }
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        DriverData: DriverData,
                        Count: Count
                    }
                }));
            })
        }
    });
};
customermod.prototype.Search_All_Active_Drivers = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var async = require('async');
    function Active_Driver_Function(values, callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 3,
                $or: [{
                    name: {
                        $regex: values.SearchValue,
                        $options: "i"
                    }
                },
                {
                    lname: {
                        $regex: values.SearchValue,
                        $options: "i"
                    }
                },
                {
                    email: {
                        $regex: values.SearchValue,
                        $options: "i"
                    }
                },
                {
                    phone: {
                        $regex: values.SearchValue,
                        $options: "i"
                    }
                },
                {
                    created_dt: {
                        $regex: values.SearchValue,
                        $options: "i"
                    }
                },
                {
                    last_active_dt: {
                        $regex: values.SearchValue,
                        $options: "i"
                    }
                },
                ]
            }
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function AnalyticFunction(values, DriverID, type, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes')
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days')
            if (type == 0) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2
                        }
                    ]
                };
            } else if (type == 1) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1,
                            "bookingType": 1
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2,
                            "bookingType": 1
                        }
                    ]
                };
            } else if (type == 2) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1,
                            "bookingType": 2
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2,
                            "bookingType": 2
                        }
                    ]
                };
            } else if (type == 3) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1,
                            "bookingType": 3
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2,
                            "bookingType": 3
                        }
                    ]
                };
            }
            me.Orders.count(query).exec(function (err, Count) {
                callback(null, Count);
            });
        });
    }
    function Driver_Collection_Function_Total(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('subtotal_amount ExceededAmount Monthly_Invoice deliverycharge eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var ExceededAmount = parseFloat(item.ExceededAmount);
                        var deliverycharge = parseFloat(item.deliverycharge);
                        var subtotal_amount = parseFloat(item.subtotal_amount);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = deliverycharge + subtotal_amount + ExceededAmount;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = subtotal_amount;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    };
    function Driver_Collection_Function_Subtotal(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('subtotal_amount Monthly_Invoice deliverycharge eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var subtotal_amount = parseFloat(item.subtotal_amount);
                        Total_Collection += subtotal_amount;
                        resp();
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Collection_Function_Delivery_Charges(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('subtotal_amount Monthly_Invoice deliverycharge eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var deliverycharge = parseFloat(item.deliverycharge);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = deliverycharge;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = 0;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Collection_Function_Exceeded_Price(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('ExceededAmount Monthly_Invoice eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var ExceededAmount = parseFloat(item.ExceededAmount);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = ExceededAmount;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = 0;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Overall_Rating_Function(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes')
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days')
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "Whether_Deleted": false,
                "eventLog.driverid": DriverID,
                "eventLog.status": 14,
                "ratingflag": 1,
            };
            var fetch = me.Orders.find(query);
            fetch.select('ratingNum -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Count = Result.length;
                    if (Count > 0) {
                        var Total_Rating = 0;
                        async.eachSeries(Result, function (item, callback1) {
                            Total_Rating += parseInt(item.ratingNum);
                            callback1();
                        }, function (err) {
                            if (!err) {
                                var Rating = parseFloat(Total_Rating / Count);
                                callback(null, Rating);
                            }
                        })
                    } else {
                        callback(null, 0);
                    }
                }
            });
        });
    }
    function Driver_Total_Expenses_Function(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
            query = {
                DriverID: DriverID,
                created_at: {
                    $gte: fmdate,
                    $lte: todate
                }
            };
            var fetch = me.Driver_Expenses.find(query);
            fetch.select('Purpose_Type Amount -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Expenses = 0;
                    async.eachSeries(Result, function (item, callback2) {
                        if (item.Purpose_Type == 1) {
                            callback2();
                        } else {
                            Total_Expenses += parseInt(item.Amount);
                            callback2();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Expenses);
                        }
                    })
                }
            });
        });
    }
    function ZoneFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.depoId
            }
            me.ZONES.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    sync(function () {
        var query = {
            acc_status: 3
        }
        var Result = Active_Driver_Function.sync(null, values);
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            var Total_Count = AnalyticFunction.sync(null, values, Result[t]._id, 0);
            var Instant_Count = AnalyticFunction.sync(null, values, Result[t]._id, 1);
            var Four_Hours_Count = AnalyticFunction.sync(null, values, Result[t]._id, 2);
            var Same_Day_Count = AnalyticFunction.sync(null, values, Result[t]._id, 3);
            var Total_Collection = Driver_Collection_Function_Total.sync(null, values, Result[t]._id);
            var Total_Delivery_Charges = Driver_Collection_Function_Delivery_Charges.sync(null, values, Result[t]._id);
            var Total_Sub_Total_Charges = Driver_Collection_Function_Subtotal.sync(null, values, Result[t]._id);
            var Total_ExceededAmount = Driver_Collection_Function_Exceeded_Price.sync(null, values, Result[t]._id);
            var Rating = Driver_Overall_Rating_Function.sync(null, values, Result[t]._id);
            var Total_Expenses = Driver_Total_Expenses_Function.sync(null, values, Result[t]._id);
            var ZoneData = ZoneFunction.sync(null, Result[t]);
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                password: String(Result[t].password),
                Total_Count: Total_Count,
                Instant_Count: Instant_Count,
                Four_Hours_Count: Four_Hours_Count,
                Same_Day_Count: Same_Day_Count,
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                Total_Collection: Total_Delivery_Charges + Total_Sub_Total_Charges + Total_ExceededAmount,
                Total_Delivery_Charges: Total_Delivery_Charges,
                Total_Sub_Total_Charges: Total_Sub_Total_Charges,
                Total_ExceededAmount: Total_ExceededAmount,
                Total_Expenses: Total_Expenses,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name,
                ZoneID: ZoneData._id,
                ZoneName: ZoneData.title,
                Rating: Rating
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
customermod.prototype.Find_All_Active_Drivers = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var moment = require('moment');
    var async = require('async');
    function Active_Driver_Function(values, callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 3
            }
            var toSkip = parseInt(values.skip);
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function Active_Driver_Count_Function(values, callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 3
            }
            me.Drivers.count(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function AnalyticFunction(values, DriverID, type, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes')
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days')
            if (type == 0) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2
                        }
                    ]
                };
            } else if (type == 1) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1,
                            "bookingType": 1
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2,
                            "bookingType": 1
                        }
                    ]
                };
            } else if (type == 2) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1,
                            "bookingType": 2
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2,
                            "bookingType": 2
                        }
                    ]
                };
            } else if (type == 3) {
                query = {
                    $or: [
                        {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                            "collectionType": 1,
                            "bookingType": 3
                        }, {
                            "Date": {
                                $gte: fmdate,
                                $lte: todate
                            },
                            "status": 14,
                            "Whether_Deleted": false,
                            "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                            "collectionType": 2,
                            "bookingType": 3
                        }
                    ]
                };
            }
            me.Orders.count(query).exec(function (err, Count) {
                callback(null, Count);
            });
        });
    }
    // function Driver_Collection_Function(values, DriverID, callback) {
    //     process.nextTick(function () {
    //         var query;
    //         var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
    //         var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
    //         query = {
    //             "Date": {
    //                 $gte: fmdate,
    //                 $lte: todate
    //             },
    //             "status": 14,
    //             "Whether_Deleted": false,
    //             "eventLog.driverid": DriverID,
    //             "eventLog.status": "14",
    //             "paymentType": 1
    //         };
    //         var fetch = me.Orders.find(query);
    //         fetch.select('subtotal_amount Monthly_Invoice deliverycharge eventLog -_id');
    //         fetch.exec(function (err, Result) {
    //             if (!err) {
    //                 var Total_Collection = 0;
    //                 async.each(Result, function (item, resp) {
    //                     if (item.collectionType == 1) {

    //                     } else {
    //                         var last = item.eventLog.length;
    //                         if (item.eventLog[last - 1].driverid == String(DriverID)) {
    //                             var deliverycharge = parseFloat(item.deliverycharge);
    //                             var subtotal_amount = parseFloat(item.subtotal_amount);
    //                             if (item.Monthly_Invoice == false) {
    //                                 var tot_amt = deliverycharge + subtotal_amount;
    //                                 Total_Collection += tot_amt;
    //                                 resp();
    //                             } else if (item.Monthly_Invoice == true) {
    //                                 var tot_amt = subtotal_amount;
    //                                 Total_Collection += tot_amt;
    //                                 resp();
    //                             }
    //                         } else {
    //                             resp();
    //                         }
    //                     }
    //                 }, function (err) {
    //                     if (!err) {
    //                         callback(null, Total_Collection);
    //                     }
    //                 })
    //             }
    //         });
    //     });
    // }
    function Driver_Collection_Function_Total(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('subtotal_amount ExceededAmount Monthly_Invoice deliverycharge eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var ExceededAmount = parseFloat(item.ExceededAmount);
                        var deliverycharge = parseFloat(item.deliverycharge);
                        var subtotal_amount = parseFloat(item.subtotal_amount);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = deliverycharge + subtotal_amount + ExceededAmount;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = subtotal_amount;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Collection_Function_Subtotal(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('subtotal_amount Monthly_Invoice deliverycharge eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var subtotal_amount = parseFloat(item.subtotal_amount);
                        Total_Collection += subtotal_amount;
                        resp();
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Collection_Function_Delivery_Charges(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                "paymentType": 1,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('subtotal_amount Monthly_Invoice deliverycharge eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var deliverycharge = parseFloat(item.deliverycharge);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = deliverycharge;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = 0;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Collection_Function_Exceeded_Price(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "status": 14,
                "Whether_Deleted": false,
                $or: [
                    {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "11" } },
                        "collectionType": 1
                    }, {
                        "eventLog": { $elemMatch: { "driverid": DriverID, "status": "14" } },
                        "collectionType": 2
                    }
                ]
            }
            var fetch = me.Orders.find(query);
            fetch.select('ExceededAmount Monthly_Invoice eventLog -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Collection = 0;
                    async.each(Result, function (item, resp) {
                        var ExceededAmount = parseFloat(item.ExceededAmount);
                        if (item.Monthly_Invoice == false) {
                            var tot_amt = ExceededAmount;
                            Total_Collection += tot_amt;
                            resp();
                        } else if (item.Monthly_Invoice == true) {
                            var tot_amt = 0;
                            Total_Collection += tot_amt;
                            resp();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Collection);
                        }
                    })
                }
            });
        });
    }
    function Driver_Overall_Rating_Function(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes')
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days')
            query = {
                "Date": {
                    $gte: fmdate,
                    $lte: todate
                },
                "Whether_Deleted": false,
                "eventLog.driverid": DriverID,
                "eventLog.status": 14,
                "ratingflag": 1,
            };
            var fetch = me.Orders.find(query);
            fetch.select('ratingNum -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Count = Result.length;
                    if (Count > 0) {
                        var Total_Rating = 0;
                        async.eachSeries(Result, function (item, callback1) {
                            Total_Rating += parseInt(item.ratingNum);
                            callback1();
                        }, function (err) {
                            if (!err) {
                                var Rating = parseFloat(Total_Rating / Count);
                                callback(null, Rating);
                            }
                        })
                    } else {
                        callback(null, 0);
                    }
                }
            });
        });
    }
    function Driver_Total_Expenses_Function(values, DriverID, callback) {
        process.nextTick(function () {
            var query;
            var fmdate = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes')
            var todate = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days')
            query = {
                DriverID: DriverID,
                created_at: {
                    $gte: fmdate,
                    $lte: todate
                }
            };
            var fetch = me.Driver_Expenses.find(query);
            fetch.select('Purpose_Type Amount -_id');
            fetch.exec(function (err, Result) {
                if (!err) {
                    var Total_Expenses = 0;
                    async.eachSeries(Result, function (item, callback2) {
                        if (item.Purpose_Type == 1) {
                            callback2();
                        } else {
                            Total_Expenses += parseInt(item.Amount);
                            callback2();
                        }
                    }, function (err) {
                        if (!err) {
                            callback(null, Total_Expenses);
                        }
                    })
                }
            });
        });
    }
    function ZoneFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.depoId
            }
            me.ZONES.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    sync(function () {
        var query = {
            acc_status: 3
        }
        var Result = Active_Driver_Function.sync(null, values);
        var Count = Active_Driver_Count_Function.sync(null, values);
        console.log("Active Biker Count");
        console.log(Count);
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            var Total_Count = AnalyticFunction.sync(null, values, Result[t]._id, 0);
            var Instant_Count = AnalyticFunction.sync(null, values, Result[t]._id, 1);
            var Four_Hours_Count = AnalyticFunction.sync(null, values, Result[t]._id, 2);
            var Same_Day_Count = AnalyticFunction.sync(null, values, Result[t]._id, 3);
            var Total_Collection = Driver_Collection_Function_Total.sync(null, values, Result[t]._id);
            var Total_Delivery_Charges = Driver_Collection_Function_Delivery_Charges.sync(null, values, Result[t]._id);
            var Total_Sub_Total_Charges = Driver_Collection_Function_Subtotal.sync(null, values, Result[t]._id);
            var Total_ExceededAmount = Driver_Collection_Function_Exceeded_Price.sync(null, values, Result[t]._id);
            var Rating = Driver_Overall_Rating_Function.sync(null, values, Result[t]._id);
            var Total_Expenses = Driver_Total_Expenses_Function.sync(null, values, Result[t]._id);
            var ZoneData = ZoneFunction.sync(null, Result[t]);
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                password: String(Result[t].password),
                Total_Count: Total_Count,
                Instant_Count: Instant_Count,
                Four_Hours_Count: Four_Hours_Count,
                Same_Day_Count: Same_Day_Count,
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                Total_Collection: Total_Delivery_Charges + Total_Sub_Total_Charges + Total_ExceededAmount,
                Total_Delivery_Charges: Total_Delivery_Charges,
                Total_Sub_Total_Charges: Total_Sub_Total_Charges,
                Total_ExceededAmount: Total_ExceededAmount,
                Total_Expenses: Total_Expenses,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name,
                ZoneID: ZoneData._id,
                ZoneName: ZoneData.title,
                Rating: Rating
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData,
                Count: Count
            }
        }));


    })
};
customermod.prototype.Search_All_New_or_Inactive_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 1,
        $or: [{
            name: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            lname: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            email: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            phone: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            created_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        {
            last_active_dt: {
                $regex: values.SearchValue,
                $options: "i"
            }
        },
        ]
    }
    me.Drivers.find(query).sort({
        driverseqId: -1
    }).limit(10).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Salary_Assigned;
            var Salary;
            if (Result[t].Salary_Assigned == true) {
                Salary_Assigned = true;
                Salary = Result[t].Salary;
            } else {
                Salary_Assigned = false;
                Salary = 0;
            }
            DriverData.push({
                DriverID: String(Result[t]._id),
                driverseqId: parseInt(Result[t].driverseqId),
                acc_status: parseInt(Result[t].acc_status),
                name: String(Result[t].name) + ' ' + String(Result[t].lname),
                email: String(Result[t].email),
                phone: String(Result[t].phone),
                Salary_Assigned: Salary_Assigned,
                Salary: Salary,
                created_dt: String(Result[t].created_dt),
                last_active_dt: Result[t].last_active_dt,
                LastOnline: String(Result[t].LastOnline),
                profilePic: Result[t].profilePic,
                Devices: Result[t].Devices,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                license_pic: Result[t].license_pic,
                bank_passbook: Result[t].bank_passbook,
                bank_country: Result[t].bank_country,
                Account_num: Result[t].Account_num,
                Routing_num: Result[t].Routing_num,
                bank_name: Result[t].bank_name
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};

customermod.prototype.Find_All_New_or_Inactive_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 1
    }
    var toSkip = parseInt(values.skip);
    me.Drivers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Drivers.find(query).sort({
                driverseqId: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                var DriverData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var Salary_Assigned;
                    var Salary;
                    if (Result[t].Salary_Assigned == true) {
                        Salary_Assigned = true;
                        Salary = Result[t].Salary;
                    } else {
                        Salary_Assigned = false;
                        Salary = 0;
                    }
                    DriverData.push({
                        DriverID: String(Result[t]._id),
                        driverseqId: parseInt(Result[t].driverseqId),
                        acc_status: parseInt(Result[t].acc_status),
                        name: String(Result[t].name) + ' ' + String(Result[t].lname),
                        email: String(Result[t].email),
                        phone: String(Result[t].phone),
                        Salary_Assigned: Salary_Assigned,
                        Salary: Salary,
                        created_dt: String(Result[t].created_dt),
                        last_active_dt: Result[t].last_active_dt,
                        LastOnline: String(Result[t].LastOnline),
                        profilePic: Result[t].profilePic,
                        Devices: Result[t].Devices,
                        CurrentStatus: Result[t].CurrentStatus,
                        status: Result[t].status,
                        license_pic: Result[t].license_pic,
                        bank_passbook: Result[t].bank_passbook,
                        bank_country: Result[t].bank_country,
                        Account_num: Result[t].Account_num,
                        Routing_num: Result[t].Routing_num,
                        bank_name: Result[t].bank_name
                    })
                    t++;
                }
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        DriverData: DriverData,
                        Count: Count
                    }
                }));
            })
        }
    });
};

//Update Operator Info
customermod.prototype.Update_Operator = function (values, callback) {
    var me = this;
    var query = {
        _id: values.OperatorID
    };
    var changes = {
        operator_name: values.operator_name,
        operator_address: values.operator_address,
        manager_name: values.manager_name,
        operator_phone: values.operator_phone,
        operator_email: values.operator_email
    };
    var multiplicity = {
        multi: false
    };
    me.operators.update(query, changes, multiplicity).exec(function (err, Result) {
        console.log(JSON.stringify(err));
        console.log(Result);
        if (!err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Operator Upated Successfully'
                }
            }));
        }
    })
}


//Find All Drivers Under Operator
customermod.prototype.Find_All_Driver_Under_Operator = function (OperatorData, callback) {
    var me = this;
    var sync = require('sync');

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            me.Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var DriverID;
        var Driver_Name, Driver_PhoneNumber, Driver_Email;
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < OperatorData.prolist.length; i++) {
            DriverID = OperatorData.prolist[t].drivid;
            var Result = DriverDataFunction.sync(null, DriverID);
            if (Result == null) {
                t++;
            } else {
                Driver_Assigned = true;
                Driver_Name = Result.name;
                Driver_PhoneNumber = Result.phone;
                Driver_Email = Result.email;
                DriverData.push({
                    DriverID: DriverID,
                    Driver_Name: Driver_Name,
                    Driver_PhoneNumber: Driver_PhoneNumber,
                    Driver_Email: Driver_Email
                })
                t++;
            }
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
}
//Check Whether OperatorID Exist or Not for Security
customermod.prototype.Check_for_ZoneID = function (values, callback) {
    var me = this;
    var error;
    var query = {
        _id: values.ZoneID
    };
    me.ZONES.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.Zone_Not_Found
                }
            }));
        }
    })
};
//Check Whether OperatorID Exist or Not for Security
customermod.prototype.Check_for_OperatorID = function (values, callback) {
    var me = this;
    var error;
    var query = {
        _id: values.OperatorID
    };
    me.operators.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.Operator_Not_Found
                }
            }));
        }
    })
};
//Find All Operators
customermod.prototype.Find_All_Operator = function (callback) {
    var me = this;
    me.operators.find().exec(function (err, Result) {
        var OperatorData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            OperatorData.push({
                OperatorID: Result[t]._id,
                operator_name: Result[t].operator_name,
                operator_address: Result[t].operator_address,
                manager_name: Result[t].manager_name,
                operator_phone: Result[t].operator_phone,
                operator_email: Result[t].operator_email
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OperatorData: OperatorData
            }
        }));
    });
}

//Create Operator
customermod.prototype.Create_Operator = function (callback) {
    var me = this;
    var md5 = require('md5');
    var hashpass = md5(values.operator_password);
    var OperatorData = new me.operators({
        operator_name: values.operator_name,
        operator_address: values.operator_address,
        manager_name: values.manager_name,
        operator_phone: values.operator_phone,
        operator_email: values.operator_email,
        operator_password: hashpass
    })
    OperatorData.save();
    return callback(new me.ApiResponce({
        success: true,
        extras: {
            Status: 'Operator Created Successfully'
        }
    }));
}
//Store Admin Data with Permissions
customermod.prototype.Create_Super_Admin_with_Permissions = function (values, callback) {
    var me = this;
    var md5 = require('md5');
    var hashpass = md5(values.Password);
    var ADMIN_USER_PERMISSIONS, HR_SALARY_PERMISSIONS;
    if (values.ADMIN_USER_PERMISSIONS == true || values.ADMIN_USER_PERMISSIONS == 'true') {
        ADMIN_USER_PERMISSIONS = true;
    } else {
        ADMIN_USER_PERMISSIONS = false;
    }

    if (values.HR_SALARY_PERMISSIONS == true || values.HR_SALARY_PERMISSIONS == 'true') {
        HR_SALARY_PERMISSIONS = true;
    } else {
        HR_SALARY_PERMISSIONS = false;
    }
    var AdminData = new admin_users({
        name: values.Name,
        email: values.EmailID,
        pass: hashpass,
        ADMIN_USER_PERMISSIONS: ADMIN_USER_PERMISSIONS,
        HR_SALARY_PERMISSIONS: HR_SALARY_PERMISSIONS
    })
    AdminData.save(function (err, Result) {
        if (err) {
            console.log(err);
        } else {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Super Admin Created Successfully'
                }
            }));
        }
    })
}

//Store Admin Data
customermod.prototype.Store_SuperAdmin_Data = function (values, callback) {
    var me = this;
    var md5 = require('md5');
    var hashpass = md5(values.Password);
    var AdminData = new admin_users({
        name: values.Name,
        email: values.EmailID,
        pass: hashpass
    })
    AdminData.save(function (err, Result) {
        if (err) {
            console.log(err);
        } else {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Super Admin Created Successfully'
                }
            }));
        }
    })
}

//Check Whether AdminID Exist or Not for Security
customermod.prototype.Check_for_Admin_Email_Already_Exist = function (values, callback) {
    var me = this;
    var query = {
        email: values.EmailID
    };
    admin_users.findOne(query).exec(function (err, Result) {
        if (Result == null) {
            return callback(false);
        } else if (Result != null) {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.EMAIL_ALREADY_REGISTERED
                }
            }));
        }
    })
};
// Customers.createMapping({},function (err,mapping) {
//     if(err){
//         console.log("Customers Mapping Failed!!!!!");
//         console.log(err);
//     }else {
//         console.log("Customers Mapping Established Succesfully")
//         console.log(mapping);
//     }
// })
//
// var stream = Customers.synchronize();
// var count = 0;
// stream.on('data',function () {
//     count++;
// });
// stream.on('close',function () {
//     console.log("Indexed "+count+" documents");
// });
// stream.on('error',function (err) {
//     console.log(err);
// });

/**** Customer Modules Admin Panel ******/
//Find All Vendor Recent Prices
customermod.prototype.Find_All_Customer_Pricing = function (values, callback) {
    var me = this;
    var query = {
        CustomerID: values.CustomerID
    };
    me.Customer_Premium_Pricing.find(query).sort({
        created_at: -1
    }).exec(function (err, Result) {
        var PriceData = [];
        var t = 0;
        var moment = require('moment');
        var date;
        for (var i = 0; i < Result.length; i++) {
            date = moment(Result[t].created_at).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
            PriceData.push({
                Premium_Instant_Pricing: Result[t].Premium_Instant_Pricing,
                Premium_4hours_Pricing: Result[t].Premium_4hours_Pricing,
                Premium_Same_Day_Pricing: Result[t].Premium_Same_Day_Pricing,

                Premium_Instant_Pricing_discount: Result[t].Premium_Instant_Pricing_discount,
                Premium_4hours_Pricing_discount: Result[t].Premium_4hours_Pricing_discount,
                Premium_Same_Day_Pricing_discount: Result[t].Premium_Same_Day_Pricing_discount,
                Premium_min_ordercount: Result[t].Premium_min_ordercount,
                Date: date
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                PriceData: PriceData
            }
        }));
    });
};
//make customer active
customermod.prototype.Make_Customer_Active = function (values, callback) {
    var me = this;
    var query = {
        _id: values.CustomerID
    };
    var changes = {
        $set: {
            acc_status: 1,
            Verify: 0
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Customer Account has been Activated'
            }
        }));
    })
}
//make premium customer active
customermod.prototype.Make_Premium_Customer_Active = function (values, callback) {
    var me = this;
    var query = {
        _id: values.CustomerID
    };
    var changes = {
        $set: {
            Premium_Status: true
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Customer Premium Services have been Enabled'
            }
        }));
    })
}
//make premium customer inactive
customermod.prototype.Make_Premium_Customer_Inactive = function (values, callback) {
    var me = this;
    var query = {
        _id: values.CustomerID
    };
    var changes = {
        $set: {
            Premium_Status: false
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Customer Premium Services have been Disabled'
            }
        }));
    })
}
//make customer inactive
customermod.prototype.Make_Customer_Inactive = function (values, callback) {
    var me = this;
    var query = {
        _id: values.CustomerID
    };
    var changes = {
        $set: {
            acc_status: 2
        }
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Customer Account has been Suspended'
            }
        }));
    })
}


//Search All InActive Ezshipp Customers
customermod.prototype.Search_All_InActive_Customers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 2,
        $or: [{
            First_name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            referral_code: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address1": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address2": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Agreement_Time: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Created_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ]
    }
    var sortOptions = {
        Signup_Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions
    };

    me.Customers.find(query).sort(sortOptions).exec(function (err, Result) {
        var CustomerData = [];
        if (!err) {
            console.log(Result);
            var async = require('async');
            async.eachSeries(Result, function (item, callback1) {
                me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                    if (OrderCount >= 0) {
                        CustomerData.push({
                            CustomerID: item._id,
                            customerseqId: item.customerseqId,
                            OrderCount: OrderCount,
                            acc_status: item.acc_status,
                            First_name: item.First_name,
                            Email: item.Email,
                            Phone: item.Phone,
                            CurrentStatus: item.CurrentStatus,
                            terms_cond: item.terms_cond,
                            referral_code: item.referral_code,
                            Devices: item.Devices,
                            AddressLog: item.AddressLog,
                            CustomerImage: item.CustomerImage,
                            Whether_Guest: item.Whether_Guest,
                            Created_dt: item.Created_dt,
                            Vendor: item.Vendor
                        })
                        callback1();
                    }
                })
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })

};
//Search All Premium Inactive Ezshipp Customers
customermod.prototype.Search_All_Inactive_Premium_Customers = function (values, callback) {
    var me = this;
    var query = {
        Premium_User: true,
        Premium_Status: false,
        $or: [{
            First_name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            referral_code: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address1": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address2": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Agreement_Time: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Created_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ]
    }
    var toSort = {
        customerseqId: -1
    }

    me.Customers.find(query).sort(toSort).exec(function (err, Result) {
        var CustomerData = [];
        if (!err) {
            console.log(Result);
            var async = require('async');
            async.eachSeries(Result, function (item, callback1) {
                me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                    if (OrderCount >= 0) {
                        CustomerData.push({
                            CustomerID: item._id,
                            customerseqId: item.customerseqId,
                            OrderCount: OrderCount,
                            acc_status: item.acc_status,
                            First_name: item.First_name,
                            Email: item.Email,
                            Phone: item.Phone,
                            CurrentStatus: item.CurrentStatus,
                            terms_cond: item.terms_cond,
                            referral_code: item.referral_code,
                            Devices: item.Devices,
                            AddressLog: item.AddressLog,
                            CustomerImage: item.CustomerImage,
                            Whether_Guest: item.Whether_Guest,
                            Created_dt: item.Created_dt,
                            Vendor: item.Vendor,
                            Premium_User: item.Premium_User,
                            Premium_User_Time: item.Premium_User_Time,
                            Premium_Status: item.Premium_Status,
                            Premium_Pricing_Set: item.Premium_Pricing_Set,
                            Premium_Instant_Pricing: item.Premium_Instant_Pricing,
                            Premium_4hours_Pricing: item.Premium_4hours_Pricing,
                            Premium_Same_Day_Pricing: item.Premium_Same_Day_Pricing,
                            
                            Premium_Instant_Pricing_discount: item.Premium_Instant_Pricing_discount,
                            Premium_4hours_Pricing_discount: item.Premium_4hours_Pricing_discount,
                            Premium_Same_Day_Pricing_discount: item.Premium_Same_Day_Pricing_discount,
                            Premium_min_ordercount: item.Premium_min_ordercount,

                            Monthly_Invoice: item.Monthly_Invoice,
                            Flat_Monthly_Price_Available: item.Flat_Monthly_Price_Available,
                            Flat_Monthly_Price: item.Flat_Monthly_Price,
                            Default_Pickup_Location_Exist: item.Default_Pickup_Location_Exist,
                            Default_Pickup_Address: item.Default_Pickup_Address,
                            Default_Pickup_Latitude: item.Default_Pickup_Latitude,
                            Default_Pickup_Longitude: item.Default_Pickup_Longitude
                        })
                        callback1();
                    }
                })
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })

};
//Search All Premium Active Ezshipp Customers
customermod.prototype.Search_All_Active_Premium_Customers = function (values, callback) {
    var me = this;
    var query = {
        Premium_User: true,
        Premium_Status: true,
        $or: [{
            First_name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            referral_code: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address1": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address2": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Agreement_Time: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Created_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ]
    }
    var sortOptions = {
        Signup_Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions
    };
    me.Customers.find(query).sort(sortOptions).exec(function (err, Result) {
        var CustomerData = [];
        if (!err) {
            console.log(Result);
            var async = require('async');
            async.eachSeries(Result, function (item, callback1) {
                me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                    if (OrderCount >= 0) {
                        CustomerData.push({
                            CustomerID: item._id,
                            customerseqId: item.customerseqId,
                            OrderCount: OrderCount,
                            acc_status: item.acc_status,
                            First_name: item.First_name,
                            Email: item.Email,
                            Phone: item.Phone,
                            CurrentStatus: item.CurrentStatus,
                            terms_cond: item.terms_cond,
                            referral_code: item.referral_code,
                            Devices: item.Devices,
                            AddressLog: item.AddressLog,
                            CustomerImage: item.CustomerImage,
                            Whether_Guest: item.Whether_Guest,
                            Created_dt: item.Created_dt,
                            Vendor: item.Vendor,
                            Premium_User: item.Premium_User,
                            Premium_User_Time: item.Premium_User_Time,
                            Premium_Status: item.Premium_Status,
                            Premium_Pricing_Set: item.Premium_Pricing_Set,
                            Premium_Instant_Pricing: item.Premium_Instant_Pricing,
                            Premium_4hours_Pricing: item.Premium_4hours_Pricing,
                            Premium_Same_Day_Pricing: item.Premium_Same_Day_Pricing,
                            Premium_Instant_Pricing_discount: item.Premium_Instant_Pricing_discount,
                            Premium_4hours_Pricing_discount: item.Premium_4hours_Pricing_discount,
                            Premium_Same_Day_Pricing_discount: item.Premium_Same_Day_Pricing_discount,
                            Premium_min_ordercount: item.Premium_min_ordercount,
                            Monthly_Invoice: item.Monthly_Invoice,
                            Flat_Monthly_Price_Available: item.Flat_Monthly_Price_Available,
                            Flat_Monthly_Price: item.Flat_Monthly_Price,
                            Default_Pickup_Location_Exist: item.Default_Pickup_Location_Exist,
                            Default_Pickup_Address: item.Default_Pickup_Address,
                            Default_Pickup_Latitude: item.Default_Pickup_Latitude,
                            Default_Pickup_Longitude: item.Default_Pickup_Longitude
                        })
                        callback1();
                    }
                })
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })

};
//Search All Active Ezshipp Customers
customermod.prototype.Search_All_Active_Customers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 1,
        Verify: 0,
        $or: [{
            First_name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            referral_code: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address1": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            "AddressLog.address2": {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Agreement_Time: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Created_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ]
    }
    var sortOptions = {
        Signup_Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions
    };

    me.Customers.find(query).sort(sortOptions).exec(function (err, Result) {
        var CustomerData = [];
        if (!err) {
            console.log(Result);
            var async = require('async');
            async.eachSeries(Result, function (item, callback1) {
                me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                    if (OrderCount >= 0) {
                        CustomerData.push({
                            CustomerID: item._id,
                            customerseqId: item.customerseqId,
                            OrderCount: OrderCount,
                            acc_status: item.acc_status,
                            First_name: item.First_name,
                            Email: item.Email,
                            Phone: item.Phone,
                            CurrentStatus: item.CurrentStatus,
                            terms_cond: item.terms_cond,
                            referral_code: item.referral_code,
                            Devices: item.Devices,
                            AddressLog: item.AddressLog,
                            CustomerImage: item.CustomerImage,
                            Whether_Guest: item.Whether_Guest,
                            Created_dt: item.Created_dt,
                            Vendor: item.Vendor
                        })
                        callback1();
                    }
                })
            }, function (err) {
                if (!err) {
                    return callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            CustomerData: CustomerData
                        }
                    }));
                }
            })
        }
    })

};
//Find All Active Premium Customers
customermod.prototype.Find_All_Inactive_Premium_Customers = function (values, callback) {
    var me = this;
    var query = {
        Premium_User: true,
        Premium_Status: false
    }
    var toSort = {
        customerseqId: -1
    }
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Customers.find(query).sort(toSort).skip(toSkip).limit(10).exec(function (err, Result) {
                var CustomerData = [];
                if (!err) {
                    console.log(Result);
                    var async = require('async');
                    async.eachSeries(Result, function (item, callback1) {
                        me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                            if (OrderCount >= 0) {
                                CustomerData.push({
                                    CustomerID: item._id,
                                    customerseqId: item.customerseqId,
                                    OrderCount: OrderCount,
                                    acc_status: item.acc_status,
                                    First_name: item.First_name,
                                    Email: item.Email,
                                    Phone: item.Phone,
                                    CurrentStatus: item.CurrentStatus,
                                    terms_cond: item.terms_cond,
                                    referral_code: item.referral_code,
                                    Devices: item.Devices,
                                    AddressLog: item.AddressLog,
                                    CustomerImage: item.CustomerImage,
                                    Whether_Guest: item.Whether_Guest,
                                    Created_dt: item.Created_dt,
                                    Vendor: item.Vendor,
                                    Premium_User: item.Premium_User,
                                    Premium_User_Time: item.Premium_User_Time,
                                    Premium_Status: item.Premium_Status,
                                    CustomerKey: item.CustomerKey,
                                    Premium_Pricing_Set: item.Premium_Pricing_Set,
                                    Premium_Instant_Pricing: item.Premium_Instant_Pricing,
                                    Premium_4hours_Pricing: item.Premium_4hours_Pricing,
                                    Premium_Same_Day_Pricing: item.Premium_Same_Day_Pricing,
                                    Premium_Instant_Pricing_discount: item.Premium_Instant_Pricing_discount,
                                    Premium_4hours_Pricing_discount: item.Premium_4hours_Pricing_discount,
                                    Premium_Same_Day_Pricing_discount: item.Premium_Same_Day_Pricing_discount,
                                    Premium_min_ordercount: item.Premium_min_ordercount,
                                    Monthly_Invoice: item.Monthly_Invoice,
                                    Flat_Monthly_Price_Available: item.Flat_Monthly_Price_Available,
                                    Flat_Monthly_Price: item.Flat_Monthly_Price,
                                    Default_Pickup_Location_Exist: item.Default_Pickup_Location_Exist,
                                    Default_Pickup_Address: item.Default_Pickup_Address,
                                    Default_Pickup_Latitude: item.Default_Pickup_Latitude,
                                    Default_Pickup_Longitude: item.Default_Pickup_Longitude
                                })
                                callback1();
                            }
                        })
                    }, function (err) {
                        if (!err) {
                            return callback(new me.ApiResponce({
                                success: true,
                                extras: {
                                    CustomerData: CustomerData,
                                    Count: Count
                                }
                            }));
                        }
                    })
                }
            })
        }
    })
};
//Find All Active Premium Customers
customermod.prototype.Find_All_Active_Premium_Customers = function (values, callback) {
    var me = this;
    var query = {
        Premium_User: true,
        Premium_Status: true
    }
    var sortOptions = {
        Signup_Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions
    };
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Customers.find(query).sort(sortOptions).skip(toSkip).limit(10).exec(function (err, Result) {
                var CustomerData = [];
                if (!err) {
                    console.log(Result);
                    var async = require('async');
                    async.eachSeries(Result, function (item, callback1) {
                        me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                            if (OrderCount >= 0) {
                                CustomerData.push({
                                    CustomerID: item._id,
                                    customerseqId: item.customerseqId,
                                    OrderCount: OrderCount,
                                    acc_status: item.acc_status,
                                    First_name: item.First_name,
                                    Email: item.Email,
                                    Phone: item.Phone,
                                    CurrentStatus: item.CurrentStatus,
                                    terms_cond: item.terms_cond,
                                    referral_code: item.referral_code,
                                    Devices: item.Devices,
                                    AddressLog: item.AddressLog,
                                    CustomerImage: item.CustomerImage,
                                    Whether_Guest: item.Whether_Guest,
                                    Created_dt: item.Created_dt,
                                    Vendor: item.Vendor,
                                    Premium_User: item.Premium_User,
                                    Premium_User_Time: item.Premium_User_Time,
                                    Premium_Status: item.Premium_Status,
                                    CustomerKey: item.CustomerKey,
                                    Premium_Pricing_Set: item.Premium_Pricing_Set,
                                    Premium_Instant_Pricing: item.Premium_Instant_Pricing,
                                    Premium_4hours_Pricing: item.Premium_4hours_Pricing,
                                    Premium_Same_Day_Pricing: item.Premium_Same_Day_Pricing,
                                    Premium_Instant_Pricing_discount: item.Premium_Instant_Pricing_discount,
                                    Premium_4hours_Pricing_discount: item.Premium_4hours_Pricing_discount,
                                    Premium_Same_Day_Pricing_discount: item.Premium_Same_Day_Pricing_discount,
                                    Premium_min_ordercount: item.Premium_min_ordercount,
                                    Monthly_Invoice: item.Monthly_Invoice,
                                    Flat_Monthly_Price_Available: item.Flat_Monthly_Price_Available,
                                    Flat_Monthly_Price: item.Flat_Monthly_Price,
                                    Default_Pickup_Location_Exist: item.Default_Pickup_Location_Exist,
                                    Default_Pickup_Address: item.Default_Pickup_Address,
                                    Default_Pickup_Latitude: item.Default_Pickup_Latitude,
                                    Default_Pickup_Longitude: item.Default_Pickup_Longitude
                                })
                                callback1();
                            }
                        })
                    }, function (err) {
                        if (!err) {
                            return callback(new me.ApiResponce({
                                success: true,
                                extras: {
                                    CustomerData: CustomerData,
                                    Count: Count
                                }
                            }));
                        }
                    })
                }
            })
        }
    })
};
//Find All InActive Ezshipp Customers
customermod.prototype.Find_All_InActive_Customers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 2
    }
    var sortOptions = {
        Signup_Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions
    };
    var toSkip = parseInt(values.skip);
    me.Customers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Customers.find(query).sort(sortOptions).skip(toSkip).limit(10).exec(function (err, Result) {
                var CustomerData = [];
                if (!err) {
                    console.log(Result);
                    var async = require('async');
                    async.eachSeries(Result, function (item, callback1) {
                        me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                            if (OrderCount >= 0) {
                                CustomerData.push({
                                    CustomerID: item._id,
                                    customerseqId: item.customerseqId,
                                    OrderCount: OrderCount,
                                    acc_status: item.acc_status,
                                    First_name: item.First_name,
                                    Email: item.Email,
                                    Phone: item.Phone,
                                    CurrentStatus: item.CurrentStatus,
                                    terms_cond: item.terms_cond,
                                    referral_code: item.referral_code,
                                    Devices: item.Devices,
                                    AddressLog: item.AddressLog,
                                    CustomerImage: item.CustomerImage,
                                    Whether_Guest: item.Whether_Guest,
                                    Created_dt: item.Created_dt,
                                    Vendor: item.Vendor
                                })
                                callback1();
                            }
                        })
                    }, function (err) {
                        if (!err) {
                            return callback(new me.ApiResponce({
                                success: true,
                                extras: {
                                    CustomerData: CustomerData,
                                    Count: Count
                                }
                            }));
                        }
                    })
                }
            })
        }
    })
};

//Find All Active Ezshipp Customers
customermod.prototype.Find_All_Active_Customers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 1,
        Verify: 0
    }

    var toSkip = parseInt(values.skip);
    var sortOptions = {
        Signup_Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions
    };

    me.Customers.find(query).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Customers.find(query).sort(sortOptions).skip(toSkip).limit(10).exec(function (err, Result) {
                var CustomerData = [];
                if (!err) {
                    console.log(Result);
                    var async = require('async');
                    async.eachSeries(Result, function (item, callback1) {
                        me.Orders.count({ userId: item._id, Whether_Deleted: false, status: { $in: [1, 7, 16, 10, 11, 12, 15, 18, 20, 14] } }).exec(function (err, OrderCount) {
                            if (OrderCount >= 0) {
                                CustomerData.push({
                                    CustomerID: item._id,
                                    customerseqId: item.customerseqId,
                                    OrderCount: OrderCount,
                                    acc_status: item.acc_status,
                                    First_name: item.First_name,
                                    Email: item.Email,
                                    Phone: item.Phone,
                                    CurrentStatus: item.CurrentStatus,
                                    terms_cond: item.terms_cond,
                                    referral_code: item.referral_code,
                                    Devices: item.Devices,
                                    AddressLog: item.AddressLog,
                                    CustomerImage: item.CustomerImage,
                                    Whether_Guest: item.Whether_Guest,
                                    Created_dt: item.Created_dt,
                                    Vendor: item.Vendor
                                })
                                callback1();
                            }
                        })
                    }, function (err) {
                        if (!err) {
                            return callback(new me.ApiResponce({
                                success: true,
                                extras: {
                                    CustomerData: CustomerData,
                                    Count: Count
                                }
                            }));
                        }
                    })
                }
            })
        }
    })
};

/***  End of Customer Modules */

customermod.prototype.Delete_Order = function (values, callback) {
    var me = this;
    var query = {
        _id: values.orderId
    };
    var changes = {
        $set: {
            "Whether_Deleted": true
        }
    };
    var multiplicity = {
        multi: false
    }
    me.Orders.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Order Removed Successfully"
                }
            }));
        }
    })
};

customermod.prototype.Edit_Job = function (values, callback) {
    var me = this;
    var pickAddress = values.pickAddress;
    var dropAddress = values.dropAddress;
    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    var bookingType = values.bookingType;
    var receiverName = values.receiverName;
    var receiverPhone = values.receiverPhone;
    var itemName = values.itemName;
    var itemDescription = values.itemDescription;
    var itemImage = values.itemImage;
    var deliverycharge = values.deliverycharge;
    var item_actual_cost = values.item_actual_cost;

    var query = {
        _id: values.orderId
    };
    var changes = {
        $set: {
            "bookingType": parseFloat(bookingType),
            "pickAddress": pickAddress,
            "receiverName": receiverName,
            "receiverPhone": receiverPhone,
            "pickLocation": {
                "Longitude": pickLongitude,
                "Latitude": pickLatitude
            },
            "dropAddress": dropAddress,
            "dropLocation": {
                "Longitude": dropLongitude,
                "Latitude": dropLatitude
            },
            "itemName": itemName,
            "itemDescription": itemDescription,
            "itemImage": itemImage,
            "deliverycharge": deliverycharge,
            "item_actual_cost": item_actual_cost
        }
    };
    var multiplicity = {
        multi: false
    }
    me.Orders.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Order Data Updated Successfully"
                }
            }));
        }
    })
}


/****   Ezshipp JOBS  ****/
//Job Count by Job type
customermod.prototype.Job_Count_By_Job_Type = function (values, callback) {
    var me = this;
    var query;
    var Orders = me.Orders;
    var JOB_TYPE = parseInt(values.JOB_TYPE);
    if (JOB_TYPE == 0) {
        query = {
            Whether_Deleted: false
        };
    } else if (JOB_TYPE == 1) {
        query = {
            Whether_Deleted: false,
            status: 14
        };
    } else if (JOB_TYPE == 2) {
        query = {
            Whether_Deleted: false,
            status: 9
        };
    } else if (JOB_TYPE == 3) {
        query = {
            "Whether_Deleted": false,
            "status": 5,
            "cancellation.userType": {
                $in: [1, "1"]
            }
        };
    } else if (JOB_TYPE == 4) {
        query = {
            "Whether_Deleted": false,
            "status": 5,
            "cancellation.userType": {
                $in: [2, "2"]
            }
        };
    } else if (JOB_TYPE == 5) {
        query = {
            Whether_Deleted: false,
            status: {
                $in: [7, 10, 11, 12, 15, 16, 18, 20]
            }
        };
    } else if (JOB_TYPE == 6) {
        query = {
            Whether_Deleted: false,
            status: {
                $in: [1]
            }
        };
    } else if (JOB_TYPE == 7) {
        query = {
            Whether_Deleted: true
        };
    }
     else if (JOB_TYPE == 8) {
        query = {
            Whether_Deleted: false,
            Monthly_Invoice:true
        };
    }
    else if (JOB_TYPE == 9) {
        query = {
            Whether_Deleted: false,
            Monthly_Invoice:false
        };
    }
    else if (JOB_TYPE == 10) {
        query ={
            subtotal_amount: {$ne: "0"},
            Whether_Deleted: false
     };
    }
    Orders.find(query).count().exec(function (err, Count) {
        return callback(false, Count);
    })

};

// Search all New Jobs
customermod.prototype.Search_All_NEW_JOBS_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: {
                    $in: [1]
                },
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Color = 0;
            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log("Order:->" + Result[t].orderseqId);
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 300000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 600000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 900000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

// Find all New Jobs
customermod.prototype.Find_All_NEW_JOBS_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: {
                    $in: [1]
                },
                Whether_Deleted: false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Color = 0;
            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log("Order:->" + Result[t].orderseqId);
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                DriverID: DriverID,
                Driver_Assigned: Driver_Assigned,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
// Find all On Going Jobs
customermod.prototype.Search_All_On_Going_JOBS_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: {
                    $in: [7, 10, 11, 12, 15, 16, 18, 20]
                },
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }

            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};
// Find all On Going Jobs
customermod.prototype.Find_All_On_Going_JOBS_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    var moment = require('moment');
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: {
                    $in: [7, 10, 11, 12, 15, 16, 18, 20]
                },
                Whether_Deleted: false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
// Search all Driver Cancelled Jobs
customermod.prototype.Search_All_Driver_Cancelled_Orders_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                "status": 5,
                "cancellation.userType": {
                    $in: [2, "2"]
                },
                "Whether_Deleted": false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var CancellArray = Result[t].cancellation;
            var CancellArrayLength = Result[t].cancellation.length;
            var Cancellation_Reason = CancellArray[CancellArrayLength - 1].reason;
            var moment = require('moment');
            var cantime = moment(CancellArray[CancellArrayLength - 1].datetime, 'YYYY-MM-DD HH:mm:ss');
            var Cancelled_Time = moment(cantime).format('MMM Do YYYY, h:mm:ss a');
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                Cancellation_Reason: Cancellation_Reason,
                Cancelled_Time: Cancelled_Time,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

// Find all Driver Cancelled Jobs
customermod.prototype.Find_All_Driver_Cancelled_Orders_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                "status": 5,
                "cancellation.userType": {
                    $in: [2, "2"]
                },
                "Whether_Deleted": false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var CancellArray = Result[t].cancellation;
            var CancellArrayLength = Result[t].cancellation.length;
            var Cancellation_Reason = CancellArray[CancellArrayLength - 1].reason;
            var moment = require('moment');
            var cantime = moment(CancellArray[CancellArrayLength - 1].datetime, 'YYYY-MM-DD HH:mm:ss');
            var Cancelled_Time = moment(cantime).format('MMM Do YYYY, h:mm:ss a');
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                Cancellation_Reason: Cancellation_Reason,
                Cancelled_Time: Cancelled_Time,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
// Search all Driver Cancelled Jobs
customermod.prototype.Search_All_Customer_Cancelled_Orders_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                "status": 5,
                "cancellation.userType": {
                    $in: [1, "1"]
                },
                "Whether_Deleted": false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var CancellArray = Result[t].cancellation;
            var CancellArrayLength = Result[t].cancellation.length;
            var Cancellation_Reason = CancellArray[CancellArrayLength - 1].reason;
            var moment = require('moment');
            var cantime = moment(CancellArray[CancellArrayLength - 1].datetime, 'YYYY-MM-DD HH:mm:ss');
            var Cancelled_Time = moment(cantime).format('MMM Do YYYY, h:mm:ss a');
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                Cancellation_Reason: Cancellation_Reason,
                Cancelled_Time: Cancelled_Time,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

// Find all Customer Cancelled Jobs
customermod.prototype.Find_All_Customer_Cancelled_Orders_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                "status": 5,
                "cancellation.userType": {
                    $in: [1, "1"]
                },
                "Whether_Deleted": false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var CancellArray = Result[t].cancellation;
            var CancellArrayLength = Result[t].cancellation.length;
            var Cancellation_Reason = CancellArray[CancellArrayLength - 1].reason;
            var moment = require('moment');
            var cantime = moment(CancellArray[CancellArrayLength - 1].datetime, 'YYYY-MM-DD HH:mm:ss');
            var Cancelled_Time = moment(cantime).format('MMM Do YYYY, h:mm:ss a');
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                Cancellation_Reason: Cancellation_Reason,
                Cancelled_Time: Cancelled_Time,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};

// Find all Expired Jobs
customermod.prototype.Find_All_Expired_Orders_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: 9,
                Whether_Deleted: false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
// Find all Expired Jobs
customermod.prototype.Search_All_Expired_Orders_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: 9,
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

// Search all Completed Ezshipp Orders
customermod.prototype.Search_All_Completed_Orders_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: 14,
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            OrderData.push({
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

// Find all Completed Ezshipp Orders
customermod.prototype.Find_All_Completed_Orders_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                status: 14,
                Whether_Deleted: false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            console.log("sortOptions");
            console.log(sortOptions);
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            OrderData.push({
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount, Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
// Search all Thrash Ezshipp Orders
customermod.prototype.Search_All_Thrash_Orders_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: true,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }
            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};
// Search all Completed Ezshipp Orders
customermod.prototype.Search_All_Orders_Ezshipp = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    customerEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    paymentId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    comments: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    reviewMsg: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(query).sort(sortOptions).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Color = 0;
            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            OrderData.push({
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};
// Find all Thrash Ezshipp Orders
customermod.prototype.Find_All_Thrash_Orders_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: true
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }

            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
function findElement1(arr, propName, propValue) {
    for (var i = 0; i < arr.length; i++)
        if (arr[i][propName] == propValue)
            return arr[i];

    // will return undefined if not found; you could return a default instead
}
// Find all  Ezshipp Orders by without Filter
customermod.prototype.Find_All_Orders_Ezshipp_without_Filter = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    var OrderQuery;
    var toSort;
    var toSkip = parseInt(values.skip);
    var toLimit = parseInt(values.limit);
    OrderQuery = {
        Whether_Deleted: false
    }
    console.log(OrderQuery);
    function CountOrderFunction(callback) {
        process.nextTick(function () {
            console.log("Entering Count");
            Orders.count(OrderQuery).exec(function (err, Count) {
                console.log(Count);
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(OrderQuery).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountOrderFunction.sync(null);
        console.log(Count);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var pickInformation = findElement1(EventArray, "status", "11");
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Picked_Time;
            var Order_Journey_Time;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }

            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Color = 0;
            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }; 5
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            };
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }

            var Shipping_Distance = 0;
            if (Result[t].Shipping_Distance == null || Result[t].Shipping_Distance == 0) {
                Shipping_Distance = 0;
            } else {
                Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            }
            OrderData.push({
                Shipping_Distance: Shipping_Distance,
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};

//Check Whether  Filter Available
customermod.prototype.Check_PhoneNumber_Filter_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_PhoneNumber_Filter != null) {
        if (values.Whether_PhoneNumber_Filter == true || values.Whether_PhoneNumber_Filter == "true") {
            if (values.PhoneNumber != null) {
                callback(false)
            } else {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.ENTER_ALL_TAGS
                    }
                }));
            }
        } else {
            callback(false)
        }
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
}
//Check Whether Name Filter Available
customermod.prototype.Check_Name_Filter_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_Name_Filter != null) {
        if (values.Whether_Name_Filter == true || values.Whether_Name_Filter == "true") {
            if (values.Name != null) {
                callback(false)
            } else {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.ENTER_ALL_TAGS
                    }
                }));
            }
        } else {
            callback(false)
        }
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};


//Check New , Ongoing , Completed Jobs, Expired Jobs and Date Filter
customermod.prototype.Check_New_Ongoing_Completed_Expired_Date_Filter_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_New_Jobs_Filter != null && values.Whether_Ongoing_Jobs_Filter != null && values.Whether_Completed_Jobs_Filter != null
        && values.Whether_Expired_Jobs_Filter != null && values.Whether_Date_Filter != null) {
        if (values.Whether_Date_Filter == true || values.Whether_Date_Filter == "true") {
            if (values.from_date != null && values.to_date != null) {
                callback(false)
            } else {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.ENTER_ALL_TAGS
                    }
                }));
            }
        } else {
            callback(false)
        }
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
}
//Check Whether Driver Filter Available
customermod.prototype.Check_Driver_Filter_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_Driver_Filter != null) {
        if (values.Whether_Driver_Filter == true || values.Whether_Driver_Filter == "true") {
            if (values.DriverID != null && values.DriverID != "") {
                callback(false)
            } else {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.ENTER_ALL_TAGS
                    }
                }));
            }
        } else {
            callback(false)
        }
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};
customermod.prototype.Find_All_Completed_Orders_Filtering = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    var toSkip = parseInt(values.skip);
    var toLimit = parseInt(values.limit);
    var sortOptions = {
        Date: -1
    };
    if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
        sortOptions = values.sortOptions;
    }
    var Name = '';
    var PhoneNumber = '';
    var NameMatch = {
        $regex: "", $options: "i"
    };
    if (values.Whether_Name_Filter == true || values.Whether_Name_Filter == "true") {
        var Name = values.Name;
        NameMatch = {
            $regex: Name, $options: "i"
        };
        if (values.Name_Query_Type != null) {
            if (parseInt(values.Name_Query_Type) == 1) {
                //Equal too
                NameMatch = {
                    $regex: '^' + Name + '$',
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 2) {
                //not equal too
                NameMatch = {
                    $regex: '^((?!' + Name + ').)*$',
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 3) {
                //Start with
                NameMatch = {
                    $regex: '^' + Name,
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 4) {
                //contain
                NameMatch = {
                    $regex: Name,
                    $options: "i"
                }
            }
            else if (parseInt(values.Name_Query_Type) == 5) {
                //does not contain
                NameMatch = {
                    $regex: '^((?!' + Name + ').)*$',
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 6) {
                //end with
                NameMatch = {
                    $regex: Name + '$',
                    $options: "i"
                }
            }
        }
    }
    var PhoneMatch = {
        $regex: "", $options: "i"
    };
    if (values.Whether_PhoneNumber_Filter == true || values.Whether_PhoneNumber_Filter == "true") {
        var PhoneNumber = values.PhoneNumber;
        PhoneMatch = {
            $regex: PhoneNumber, $options: "i"
        }
    };
    var DateMatch = {
        $ne: null
    };
    var from_moment;
    var to_moment;
    if (values.Whether_Date_Filter == true || values.Whether_Date_Filter == "true") {
        from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
        to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
        DateMatch = {
            $gte: from_moment,
            $lte: to_moment
        }
    }
    var bookingType = {
        $in: [1, 2, 3]
    };
    if (values.InstantType == false && values.fourHoursType == false && values.SameType == false) {
        bookingType = {
            $in: [1, 2, 3]
        };
    } else if (values.InstantType == true || values.fourHoursType == true || values.SameType == true) {
        var bookArray = [];
        if (values.InstantType == true) {
            bookArray.push(1);
        }
        if (values.fourHoursType == true) {
            bookArray.push(2);
        }
        if (values.SameType == true) {
            bookArray.push(3);
        }
        bookingType = {
            $in: bookArray
        };
    }
    var paymentType = {
        $in: [1, 2, 3]
    };
    if (values.Whether_COD == true && values.Whether_Online == true) {
        paymentType = {
            $in: [1, 2]
        };
    } else if (values.Whether_COD == true && values.Whether_Online == false) {
        paymentType = {
            $in: [1]
        };
    } else if (values.Whether_COD == false && values.Whether_Online == true) {
        paymentType = {
            $in: [2]
        };
    } else {
        paymentType = {
            $in: [1, 2, 3]
        };
    };
    var Whether_Payment_Capture = {
        $in: [true, false, null]
    };
    if (values.Payment_Captured == true && values.Payment_Not_Captured == true) {
        Whether_Payment_Capture = {
            $in: [true, false, null]
        };
    } else if (values.Payment_Captured == true && values.Payment_Not_Captured == false) {
        Whether_Payment_Capture = {
            $in: [true]
        };
    } else if (values.Payment_Captured == false && values.Payment_Not_Captured == true) {
        Whether_Payment_Capture = {
            $in: [false, null]
        };
    } else if (values.Payment_Captured == false && values.Payment_Not_Captured == false) {
        Whether_Payment_Capture = {
            $in: [true, false, null]
        };
    };
    var pickupdepo = {
        $nin: []
    };
    var deliverydepo = {
        $nin: []
    };
    if (values.Whether_Pick_Zone_Filter == true) {
        if (values.PickZoneArray.length > 0) {
            pickupdepo = {
                $in: values.PickZoneArray
            };
        }
    }
    if (values.Whether_Drop_Zone_Filter == true) {
        if (values.DropZoneArray.length > 0) {
            deliverydepo = {
                $in: values.DropZoneArray
            };
        }
    };
    var DriverMatch = {
        $regex: "", $options: "i"
    };
    if (values.Whether_Driver_Filter == true || values.Whether_Driver_Filter == "true") {
        var DriverID = values.DriverID;
        DriverMatch = DriverID;
    }

    var query = {
        "status": 14,
        "Whether_Deleted": false,
        "Date": DateMatch,
        "customerName": NameMatch,
        "customerPhone": PhoneMatch,
        "bookingType": bookingType,
        "paymentType": paymentType,
        "Whether_Payment_Capture": Whether_Payment_Capture,
        "pickupdepo": pickupdepo,
        "deliverydepo": deliverydepo,
        "eventLog.driverid": DriverMatch
    };
    console.log(query);
    function OrderCountFunction(values, callback) {
        process.nextTick(function () {
            Orders.count(query).exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    sync(function () {
        var Count = OrderCountFunction.sync(null, values);
        console.log("Count")
        console.log(Count)
        var Result = OrderDataFunction.sync(null, values);
        console.log("Result")
        console.log(Result)
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;
            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            OrderData.push({
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
}
customermod.prototype.Find_All_Customer_Name_Filtering = function (values, callback) {
    var me = this;
    var NameMatch;
    if (parseInt(values.Name_Query_Type) == 1) {
        //Equal too
        NameMatch = {
            $regex: '^' + Name + '$',
            $options: "i"
        }
    } else if (parseInt(values.Name_Query_Type) == 2) {
        //not equal too
        NameMatch = {
            $regex: '^((?!' + Name + ').)*$',
            $options: "i"
        }
    } else if (parseInt(values.Name_Query_Type) == 3) {
        //Start with
        NameMatch = {
            $regex: '^' + Name,
            $options: "i"
        }
    } else if (parseInt(values.Name_Query_Type) == 4) {
        //contain
        NameMatch = {
            $regex: Name,
            $options: "i"
        }
    }
    else if (parseInt(values.Name_Query_Type) == 5) {
        //does not contain
        NameMatch = {
            $regex: '^((?!' + Name + ').)*$',
            $options: "i"
        }
    } else if (parseInt(values.Name_Query_Type) == 6) {
        //end with
        NameMatch = {
            $regex: Name + '$',
            $options: "i"
        }
    }
    console.log(NameMatch);
    var query = {
        First_name: NameMatch
    }
    console.log(query);
    me.Customers.find(query).select('First_name').exec(function (err, Result) {
        if (!err) {
            callback(false, Result);
        }
    })
}
customermod.prototype.Check_for_Drop_Zone_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_Drop_Zone_Filter != null) {
        if (values.Whether_Drop_Zone_Filter == true || values.Whether_Drop_Zone_Filter == "true") {
            if (values.DropZoneArray != null) {
                callback(false)
            } else {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.ENTER_ALL_TAGS
                    }
                }));
            }
        } else {
            callback(false);
        }
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
}
customermod.prototype.Check_for_Pick_Zone_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_Pick_Zone_Filter != null) {
        if (values.Whether_Pick_Zone_Filter == true || values.Whether_Pick_Zone_Filter == "true") {
            if (values.PickZoneArray != null) {
                callback(false)
            } else {
                callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.ENTER_ALL_TAGS
                    }
                }));
            }
        } else {
            callback(false);
        }
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
}
customermod.prototype.Check_for_Payment_Types_Validation = function (values, callback) {
    var me = this;
    if (values.Whether_Online != null && values.Whether_COD != null && values.Payment_Captured != null && values.Payment_Not_Captured != null) {
        callback(false);
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};
//Check for Booking Types Validation
customermod.prototype.Check_for_Booking_Types_Validation = function (values, callback) {
    var me = this;
    if (values.InstantType != null && values.fourHoursType != null && values.SameType != null) {
        callback(false)
    } else {
        callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};
// Find all  Ezshipp Orders by without Filter
customermod.prototype.Find_All_Orders_Ezshipp_with_Filter = function (values, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
    var OrderQuery;
    var toSort;
    var toSkip = parseInt(values.skip);
    var toLimit = parseInt(values.limit);
    var Name = '';
    var PhoneNumber = '';
    var NameMatch = {
        $regex: "", $options: "i"
    };
    var paymentType = {
        $in: [1, 2, 3]
    };
    var bookingType = {
        $in: [1, 2, 3]
    };
    var pickupdepo = {
        $nin: []
    };
    var deliverydepo = {
        $nin: []
    };
    if (values.Whether_Pick_Zone_Filter != null) {
        if (values.Whether_Pick_Zone_Filter == true) {
            if (values.PickZoneArray.length > 0) {
                pickupdepo = {
                    $in: values.PickZoneArray
                };
            }
        }
    };
    if (values.Whether_Drop_Zone_Filter != null) {
        if (values.Whether_Drop_Zone_Filter == true) {
            if (values.DropZoneArray.length > 0) {
                deliverydepo = {
                    $in: values.DropZoneArray
                };
            }
        }
    };
    if (values.InstantType != null && values.fourHoursType != null && values.SameType != null) {
        if (values.InstantType == false && values.fourHoursType == false && values.SameType == false) {
            bookingType = {
                $in: [1, 2, 3]
            };
        } else if (values.InstantType == true || values.fourHoursType == true || values.SameType == true) {
            var bookArray = [];
            if (values.InstantType == true) {
                bookArray.push(1);
            }
            if (values.fourHoursType == true) {
                bookArray.push(2);
            }
            if (values.SameType == true) {
                bookArray.push(3);
            }
            bookingType = {
                $in: bookArray
            };
        }
    }
    if (values.Whether_COD == true && values.Whether_Online == true) {
        paymentType = {
            $in: [1, 2]
        };
    } else if (values.Whether_COD == true && values.Whether_Online == false) {
        paymentType = {
            $in: [1]
        };
    } else if (values.Whether_COD == false && values.Whether_Online == true) {
        paymentType = {
            $in: [2]
        };
    } else {
        paymentType = {
            $in: [1, 2, 3]
        };
    };
    var Whether_Payment_Capture = {
        $in: [true, false, null]
    };
    if (values.Payment_Captured != null && values.Payment_Not_Captured != null) {
        if (values.Payment_Captured == true && values.Payment_Not_Captured == true) {
            Whether_Payment_Capture = {
                $in: [true, false, null]
            };
        } else if (values.Payment_Captured == true && values.Payment_Not_Captured == false) {
            Whether_Payment_Capture = {
                $in: [true]
            };
        } else if (values.Payment_Captured == false && values.Payment_Not_Captured == true) {
            Whether_Payment_Capture = {
                $in: [false, null]
            };
        } else if (values.Payment_Captured == false && values.Payment_Not_Captured == false) {
            Whether_Payment_Capture = {
                $in: [true, false, null]
            };
        }
    } else {
        Whether_Payment_Capture = {
            $in: [true, false]
        };
    }
    if (values.Whether_Name_Filter == true || values.Whether_Name_Filter == "true") {
        Name = values.Name;
        NameMatch = {
            $regex: Name, $options: "i"
        };
        if (values.Name_Query_Type != null) {
            if (parseInt(values.Name_Query_Type) == 1) {
                //Equal too
                NameMatch = {
                    $regex: '^' + Name + '$',
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 2) {
                //not equal too
                NameMatch = {
                    $regex: '^((?!' + Name + ').)*$',
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 3) {
                //Start with
                NameMatch = {
                    $regex: '^' + Name,
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 4) {
                //contain
                NameMatch = {
                    $regex: Name,
                    $options: "i"
                }
            }
            else if (parseInt(values.Name_Query_Type) == 5) {
                //does not contain
                NameMatch = {
                    $regex: '^((?!' + Name + ').)*$',
                    $options: "i"
                }
            } else if (parseInt(values.Name_Query_Type) == 6) {
                //end with
                NameMatch = {
                    $regex: Name + '$',
                    $options: "i"
                }
            }
        }
    }
    if (values.Whether_PhoneNumber_Filter == true || values.Whether_PhoneNumber_Filter == "true") {
        PhoneNumber = values.PhoneNumber;
    }
    var statusArray = [];
    if (values.Whether_New_Jobs_Filter == true || values.Whether_New_Jobs_Filter == "true") {
        statusArray.push(1);
    }
    if (values.Whether_Ongoing_Jobs_Filter == true || values.Whether_Ongoing_Jobs_Filter == "true") {
        statusArray.push(7);
        statusArray.push(8);
        statusArray.push(10);
        statusArray.push(11);
        statusArray.push(12);
        statusArray.push(15);
        statusArray.push(16);
        statusArray.push(18);
        statusArray.push(20);
    }
    if (values.Whether_Completed_Jobs_Filter == true || values.Whether_Completed_Jobs_Filter == "true") {
        statusArray.push(14);
    }
    if (values.Whether_Expired_Jobs_Filter == true || values.Whether_Expired_Jobs_Filter == "true") {
        statusArray.push(9);
    }
    var from_moment = moment('01/05/2017', 'DD/MM/YYYY').subtract(330, 'minutes');
    var to_moment = new Date();
    if (values.Whether_Date_Filter == true || values.Whether_Date_Filter == "true") {
        from_moment = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes');
        to_moment = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
    }
    if (values.Whether_Driver_Filter == true || values.Whether_Driver_Filter == "true") {
        var DriverID = values.DriverID;
        if (statusArray.length >= 1) {
            OrderQuery = {
                "Whether_Deleted": false,
                "customerName": NameMatch,
                "customerPhone": {
                    $regex: PhoneNumber,
                    $options: "i"
                },
                "Date": {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "status": {
                    $in: statusArray
                },
                "eventLog.driverid": DriverID,
                "paymentType": paymentType,
                "Whether_Payment_Capture": Whether_Payment_Capture,
                "bookingType": bookingType,
                "pickupdepo": pickupdepo,
                "deliverydepo": deliverydepo
            }
        } else if (statusArray.length < 1) {
            OrderQuery = {
                "Whether_Deleted": false,
                "customerName": NameMatch,
                "customerPhone": {
                    $regex: PhoneNumber,
                    $options: "i"
                },
                "Date": {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "eventLog.driverid": DriverID,
                "paymentType": paymentType,
                "Whether_Payment_Capture": Whether_Payment_Capture,
                "bookingType": bookingType,
                "pickupdepo": pickupdepo,
                "deliverydepo": deliverydepo
            }
        }
    } else {
        if (statusArray.length >= 1) {
            OrderQuery = {
                Whether_Deleted: false,
                "customerName": NameMatch,
                customerPhone: {
                    $regex: PhoneNumber,
                    $options: "i"
                },
                Date: {
                    $gte: from_moment,
                    $lte: to_moment
                },
                status: {
                    $in: statusArray
                },
                "paymentType": paymentType,
                "Whether_Payment_Capture": Whether_Payment_Capture,
                "bookingType": bookingType,
                "pickupdepo": pickupdepo,
                "deliverydepo": deliverydepo
            }
        } else if (statusArray.length < 1) {
            OrderQuery = {
                Whether_Deleted: false,
                "customerName": NameMatch,
                customerPhone: {
                    $regex: PhoneNumber,
                    $options: "i"
                },
                Date: {
                    $gte: from_moment,
                    $lte: to_moment
                },
                "paymentType": paymentType,
                "Whether_Payment_Capture": Whether_Payment_Capture,
                "bookingType": bookingType,
                "pickupdepo": pickupdepo,
                "deliverydepo": deliverydepo
            }
        }
    }

    console.log(OrderQuery);
    function CountOrderFunction(callback) {
        process.nextTick(function () {
            console.log("Entering Count");
            Orders.count(OrderQuery).exec(function (err, Count) {
                console.log(Count);
                callback(null, Count);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var sortOptions = {
                Date: -1
            };
            console.log("sortOptions");
            console.log(sortOptions);
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            };
            Orders.find(OrderQuery).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                console.log(err);
                console.log(Result);
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = CountOrderFunction.sync(null);
        console.log(Count);
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');
            var Color = 0;
            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            OrderData.push({
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};
function generateFilename() {
    var date = new Date().getTime();
    var charBank = "abcdefghijklmnopqrstuvwxyz";
    var fstring = '';
    for (var i = 0; i < 15; i++) {
        fstring += charBank[parseInt(Math.random() * 26)];
    }
    return (fstring += date);
}
customermod.prototype.Generate_Customer_Order_Record = function (values, RecordData, CustomerData, OrderData, callback) {
    var me = this;
    var sync = require("sync");

    console.log("1");
    console.log("3");

    var Orders = me.Orders;
    var moment = require('moment');

    function Converting_PDF(values, OrderData, CustomerData, RecordData, callback) {
        process.nextTick(function () {
            console.log("entering")
            var moment = require("moment")
            var customerName = me.Format_Beautify_String(CustomerData.First_name);
            console.log(customerName);
            console.log("4");
            var Address = '';
            if (CustomerData.Default_Pickup_Location_Exist == true && CustomerData.Default_Pickup_Address != "") {
                Address = CustomerData.Default_Pickup_Address
            };
            console.log(Address);
            console.log("5");
            var Date = moment().utcOffset(330).format("DD/MM/YYYY");
            var from_date = values.from_date;
            var to_date = values.to_date;
            var rowdata = '';
            var ImageURL = '';
            var orderseqId;
            var RecipientDetails;
            var Created_Date;
            var Completed_Date;
            var Order_Total_Time;
            var Shipping_Distance;
            var ImageURL;
            var path = require('path');
            var os = require('os');
            console.log("6");
            console.log("7");
            var t = 0;
            console.log(OrderData);
            for (var i = 0; i < OrderData.length; i++) {
                console.log("No of orders " + RecordData.length);
                orderseqId = OrderData[t].orderseqId;
                RecipientDetails = OrderData[t].RecipientDetails;
                Created_Date = OrderData[t].Created_Date;
                Completed_Date = OrderData[t].Completed_Date;
                Order_Total_Time = OrderData[t].Order_Total_Time;
                Shipping_Distance = OrderData[t].Shipping_Distance;
                ImageURL = OrderData[t].ImageURL;
                console.log(ImageURL)
                rowdata += ' <tr>' +
                    ' <td class="td" style="text-align:center;">' +
                    orderseqId +
                    '  </td>' +
                    '  <td class="td" style="text-align:center;">' +
                    RecipientDetails +
                    '  </td>' +
                    '  <td class="td" style="text-align:center;">' +
                    Created_Date +
                    '</td>' +
                    '  <td class="td" style="text-align:center;">' +
                    Completed_Date +
                    '</td>' +
                    '  <td class="td" style="text-align:center;">' +
                    Order_Total_Time +
                    '</td>' +
                    '  <td class="td" style="text-align:center;">' +
                    Shipping_Distance +
                    '</td>' +
                    '            <td class="td" style="text-align:center;">' +
                    '                <img src="' + ImageURL + '" style="border-width: 0;height: 78px;width:108px;"' +
                    '                    alt="Not Available">' +
                    '            </td>' +
                    '        </tr>';
                t++;
            }
            console.log("rowdata");
            console.log(rowdata);

            console.log("9");
            var fname = generateFilename();
            var html = '<!doctype html>' +
                '<html>' +
                '' +
                '<head>' +
                '    <title>ezshipp - Report</title>' +
                '    <meta charset="utf-8">' +
                '    <style>' +
                '        body {' +
                '            background-color: #FFFFFF;' +
                '            color: #000000;' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 13px;' +
                '            line-height: 1.1875;' +
                '            margin: 0;' +
                '            padding: 0;' +
                '            max-width: 490px;' +
                '        }' +
                '' +
                '        #Line1 {' +
                '            border-width: 0;' +
                '            height: 78px;' +
                '            width: 8px;' +
                '        }' +
                '' +
                '        a {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        a:visited {' +
                '            color: #800080;' +
                '        }' +
                '' +
                '        a:active {' +
                '            color: #FF0000;' +
                '        }' +
                '' +
                '        a:hover {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        h1 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 32px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h2 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 27px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h3 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 24px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h4 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 21px;' +
                '            font-style: italic;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h5 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 19px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h6 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        .table2 {' +
                '            margin-left: 5px;' +
                '            border: 1px solid #dddddd;' +
                '            width: 470px;' +
                '            margin-top: 10px;' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 8px;' +
                '            font-style: bolder;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '        }' +
                '' +
                '        .th {' +
                '            border-left: 1px solid #dddddd;' +
                '            border-bottom: 1px solid #dddddd;' +
                '            border-right: 1px solid #dddddd;' +
                '            border-top: 1px solid #dddddd;' +
                '        }' +
                '' +
                '        .td {' +
                '            border-left: 1px solid #dddddd;' +
                '            border-bottom: 1px solid #dddddd;' +
                '            border-right: 1px solid #dddddd;' +
                '            border-top: 1px solid #dddddd;' +
                '        }' +
                '    </style>' +
                '</head>' +
                '' +
                '<body>' +
                '    <table>' +
                '        <tr>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" alt="" style="margin-left:10px;width: 90%;">' +
                '                </div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
                '                </div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,' +
                '                        <br>OPP SBI, MAXCURE HOSPITAL LANE,' +
                '                        <br>PATRIKA NAGAR, HI TECH CITY - 500081.' +
                '                        <br>+91 9949529308' +
                '                        <br>CONTACTUS@EZSHIPP.COM</span>' +
                '                </div>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '    <table style="margin-top:10px;width: 470px;">' +
                '        <tr>' +
                '            <td style="padding-left: 5px;width: 230px;">' + customerName +
                '            </td>' +
                '            <td align="right" style="width: 230px;">' +
                '                <strong>Date:</strong>' + Date +
                '            </td>' +
                '        </tr>' +
                '        <tr>' +
                '            <td style="padding-left: 5px;width: 230px;">' +
                Address +
                '            </td>' +
                '            <td align="right" style="width: 230px;">' +
                '                <strong>Orders-From:</strong>' + from_date +
                '            </td>' +
                '        </tr>' +
                '        <tr>' +
                '            <td style="width: 230px;"></td>' +
                '            <td align="right" style="width: 230px;">' +
                '                <strong>Orders-To:</strong>' + to_date +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '    <table class="table2" style="border: none;">' +
                '        <tr>' +
                '            <th class="th">' +
                '                <strong>Order ID</strong>' +
                '            </th>' +
                '            <th class="th">' +
                '                <strong>Reciever' +
                '                    <br />Name & Phone</strong>' +
                '            </th>' +
                '            <th class="th">' +
                '                <strong>Created Time</strong>' +
                '            </th>' +
                '            <th class="th">' +
                '                <strong>Delivery Time</strong>' +
                '            </th>' +
                '            <th class="th">' +
                '                <strong>Total Time</strong>' +
                '            </th>' +
                '            <th class="th">' +
                '                <strong>Distance (Kms)</strong>' +
                '            </th>' +
                '            <th class="th">' +
                '                <strong>Signature</strong>' +
                '            </th>' +
                '        </tr>' +
                rowdata +
                '    </table>' +
                '</body>' +
                '' +
                '</html>';
            console.log(fname);
            var moment = require('moment');
            fname = fname + '.pdf';
            console.log(10);
            console.log(fname);
            var conversion = require("phantom-html-to-pdf")({
                phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
                tmpDir: os.tmpDir(),
                waitForJS: false,
                NumberOfWorkers: 4,
                paperSize: {
                    format: "A4", orientation: "portrait"
                },
                fitToPage: true,
                format: {
                    quality: 100
                }
            });
            console.log(html);
            var optionsPDF = {
                html: html,
                footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
                    '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
                fitToPage: true
            };
            conversion(optionsPDF, function (err, res) {
                console.log("PDF process going")
                if (err) {
                    console.log('Oh noes! Errorz!');
                    console.log(err);
                    callback(null, err);
                } else {
                    // if (parseInt(success.process_code) == 0) {
                    console.log("response")
                    console.log(res);
                    nfile = res.stream.path;
                    console.log("path");
                    console.log(nfile);
                    // console.log(res.logs);
                    // console.log(res.NumberOfPages);
                    console.log("pdf done");
                    me.Upload_PDF_AWS(nfile, fname, function (err, responcer) {
                        console.log("pdf uploaded");
                        var query = {
                            RecordID: RecordData.RecordID
                        }
                        var changes = {
                            ProcessStage: 2,
                            PDFLink: fname
                        };
                        var multiplicity = {
                            multi: false
                        }
                        var Customer_Order_Records =  require("../Models/Customer_Order_Records.js");
                        Customer_Order_Records.update(query, changes, multiplicity).exec(function (err, Result) {
                            console.log("pdf processed")
                            callback(null, 'Updated Successfully');
                        })
                    })
                    // }
                }
            });
        })
    }
    sync(function () {
        console.log(2);
        var PDFResult = Converting_PDF.sync(null, values, OrderData, CustomerData, RecordData);
        callback('All operations Completed Successfully');
    })
}
customermod.prototype.Completed_Order_Customer_Report = function (values, callback) {
    var me = this;
    var moment = require('moment');
    var from_date = moment(values.from_date, 'DD/MM/YYYY').subtract(330, 'minutes').toDate();
    var to_date = moment(values.to_date, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days').toDate();
    var query = {
        Whether_Deleted: false,
        status: 14,
        userId: values.CustomerID,
        Date: {
            $gte: from_date,
            $lte: to_date
        }
    };
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {

            var Selected = {
                orderseqId: 1,
                receiverName: 1,
                receiverPhone: 1,
                Date: 1,
                Order_Completed_Time: 1,
                Order_Total_Time: 1,
                Shipping_Distance: 1,
                customerSign: 1
            }
            Orders.find(query, Selected).sort('-Date').exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        async.eachSeries(Result, function (item, resp) {
            var Created_Date = moment(item.Date).utcOffset(330).format('MMM DD h:mm A');
            var Completed_Date = moment(item.Order_Completed_Time).utcOffset(330).format('MMM DD h:mm A');
            var RecipientDetails = '';
            if (item.receiverName != null && item.receiverName != "") {
                RecipientDetails = item.receiverName;
                if (item.receiverPhone != null && item.receiverPhone != "") {
                    RecipientDetails = RecipientDetails + ' (' + item.receiverPhone + ')';
                }
            }
            RecipientDetails = me.Format_Beautify_String(RecipientDetails);
            OrderData.push({
                orderseqId: item.orderseqId,
                RecipientDetails: RecipientDetails,
                Created_Date: Created_Date,
                Completed_Date: Completed_Date,
                Order_Total_Time: item.Order_Total_Time,
                Shipping_Distance: parseFloat(item.Shipping_Distance),
                ImageURL: item.customerSign
            });
            resp();
        }, function (err) {
            return callback(false, OrderData);
        })
    })
}
customermod.prototype.Completed_Order_Delivery_Reports = function (values, callback) {
    var me = this;
    var moment = require('moment');
    function OrderCountFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                status: 14
            };
            Orders.count(query).exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }
    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                status: 14
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && values.sortOptions != '') {
                console.log("options ");
                console.log(values.sortOptions);
                if (values.sortOptions == {}) {
                    console.log("Entering 1")
                    sortOptions = {
                        Date: -1
                    };
                } else {
                    console.log("Entering 2")
                    sortOptions = values.sortOptions;
                }
            }
            var Selected = {
                _id: 1,
                orderseqId: 1,
                bookingType: 1,
                Shipping_Distance: 1,
                Date: 1,
                Order_Accepted_Time: 1,
                Order_Completed_Time: 1,
                Order_Journey_Time: 1,
                Order_Total_Time: 1,
                eventLog: 1
            }
            Orders.find(query, Selected).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Count = OrderCountFunction.sync(null, values);
        var Result = OrderDataFunction.sync(null, values);
        console.log(Count);
        var OrderData = [];
        async.eachSeries(Result, function (item, resp) {
            var EventArray = item.eventLog;
            var EventArrayLength = item.eventLog.length;
            var Driver_Name;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Name = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Name = '';
                } else {
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                }
            }
            var Order_Accepted_Time;
            var Order_Picked_Time;
            var Order_Completed_Time;
            var Order_Accept_Pick_Time;
            var Order_Pick_Drop_Time;
            var Order_Journey_Time;
            var Order_Total_Time;
            var pickTime;
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                console.log("pick information not found");
                console.log(item);
                pickTime = moment(item.Order_Completed_Time);
                Order_Picked_Time = '';
            } else {
                pickTime = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').subtract(330, 'minutes');
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD h:mm A');
            }
            if (item.Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(item.Order_Accepted_Time).utcOffset(330).format('MMM DD h:mm A');
            }
            if (item.Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(item.Order_Completed_Time).utcOffset(330).format('MMM DD h:mm A');
                Order_Journey_Time = item.Order_Journey_Time;
            }
            // var duration2 = moment.duration(end_time.diff(order_place_time));
            // var Order_Total_Time = moment.utc(duration2.as('milliseconds')).format('HH:mm:ss');

            var FormattedDate = moment(item.Date).utcOffset(330).format('MMM DD h:mm A');
            var Color = 0;
            var deliver = moment(item.Order_Completed_Time);
            var place = moment(item.Date);
            var diff = Math.abs(deliver.diff(place, "ms"));
            var accepttime = moment(item.Order_Accepted_Time)
            console.log(pickTime);
            console.log(accepttime);
            var accept_pick = moment.duration(pickTime.diff(accepttime, "ms"));
            Order_Accept_Pick_Time = moment.utc(accept_pick.as('ms')).format('HH:mm:ss');
            console.log(Order_Accept_Pick_Time);
            var completetime = moment(item.Order_Completed_Time)
            var pick_drop = moment.duration(completetime.diff(pickTime, "ms"));
            Order_Pick_Drop_Time = moment.utc(pick_drop.as('ms')).format('HH:mm:ss');
            var hourvalue;
            if (parseInt(item.bookingType) == 1) {
                hourvalue = 2 * (1 * 60 * 60 * 1000)
                if (diff >= hourvalue) {
                    Color = 1;
                }
            } else if (parseInt(item.bookingType) == 2) {
                hourvalue = 4 * (1 * 60 * 60 * 1000)
                if (diff >= hourvalue) {
                    Color = 1;
                }
            } else if (parseInt(item.bookingType) == 3) {
                hourvalue = 8 * (1 * 60 * 60 * 1000)
                if (diff >= hourvalue) {
                    Color = 1;
                }
            }
            if (pickInformation == null) {
                Order_Accept_Pick_Time = "00:00:00"
            }
            var Whether_Zone_Drop = false;
            if (item.Whether_Zone_Drop == true) {
                Whether_Zone_Drop = true
            } else {
                Whether_Zone_Drop = false
            }
            OrderData.push({
                orderId: item._id,
                Whether_Zone_Drop: Whether_Zone_Drop,
                Date: FormattedDate,
                orderseqId: item.orderseqId,
                Driver_Name: Driver_Name,
                bookingType: item.bookingType,
                Shipping_Distance: parseFloat(item.Shipping_Distance),
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Picked_Time: Order_Picked_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Accept_Pick_Time: Order_Accept_Pick_Time,
                Order_Pick_Drop_Time: Order_Pick_Drop_Time,
                Order_Journey_Time: Order_Journey_Time,
                Order_Total_Time: item.Order_Total_Time,
                Color: Color
            });
            resp();
        }, function (err) {
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    OrderData: OrderData,
                    Count: Count
                }
            }));
        })
    })
    function findElement1(arr, propName, propValue) {
        for (var i = 0; i < arr.length; i++)
            if (arr[i][propName] == propValue)
                return arr[i];

        // will return undefined if not found; you could return a default instead
    }
}


// Find all All Ezshipp Orders
customermod.prototype.Find_All_Orders_Ezshipp = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null && Object.keys(values.sortOptions).length > 0) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Picked_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');

            var Color = 0;

            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            };

            var Whether_Parcel_Weight_Exceeded = false;
            var ExceededWeight = 0;
            var ExceededAmount = 0;
            if (Result[t].Whether_Parcel_Weight_Exceeded == null || Result[t].Whether_Parcel_Weight_Exceeded == false) {
                Whether_Parcel_Weight_Exceeded = false;
                ExceededWeight = 0;
                ExceededAmount = 0;
            } else if (Result[t].Whether_Parcel_Weight_Exceeded == true) {
                Whether_Parcel_Weight_Exceeded = true;
                ExceededWeight = parseInt(Result[t].ExceededWeight);
                ExceededAmount = parseInt(Result[t].ExceededAmount);
            }
            OrderData.push({
                Whether_Parcel_Weight_Exceeded: Whether_Parcel_Weight_Exceeded,
                ExceededWeight: ExceededWeight,
                ExceededAmount: ExceededAmount,
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};


customermod.prototype.Customer_Indexing = function (values, callback) {
    var pageNum = parseInt(values.page);
    var perPage = parseInt(values.per_page);
    var userQuery = values.query;
    var elasticsearch = require('elasticsearch');
    const client = new elasticsearch.Client({
        host: 'localhost:9200'
    })
    var query = {
        "bool": {
            "should": [{
                "match": {
                    "First_name": userQuery
                }
            },
            {
                "match_phrase_prefix": {
                    "First_name": userQuery
                }
            },
            {
                "match_phrase": {
                    "First_name": userQuery
                }
            },
            {
                "match": {
                    "Email": userQuery
                }
            },
            {
                "match_phrase_prefix": {
                    "Email": userQuery
                }
            },
            {
                "match_phrase": {
                    "Email": userQuery
                }
            },
            {
                "match": {
                    "Phone": userQuery
                }
            },
            {
                "match_phrase_prefix": {
                    "Phone": userQuery
                }
            },
            {
                "match_phrase": {
                    "Phone": userQuery
                }
            },
            {
                "match": {
                    "AddressLog.address1": userQuery
                }
            },
            {
                "match_phrase_prefix": {
                    "AddressLog.address1": userQuery
                }
            },
            {
                "match_phrase": {
                    "AddressLog.address1": userQuery
                }
            },
            {
                "match": {
                    "AddressLog.landmark": userQuery
                }
            },
            {
                "match_phrase_prefix": {
                    "AddressLog.landmark": userQuery
                }
            },
            {
                "match_phrase": {
                    "AddressLog.landmark": userQuery
                }
            }
            ]
        }
    };
    Customers.search(query, function (err, res) {
        console.log("result" + res)
        if (err) {
            console.log("Search Failed");
            console.log(err);
            return callback("error");
        } else {
            console.log("ES Index Successfully")
            console.log(res)
            return callback(res.hits.hits);
        }
    })
}



// check Referal code exist
customermod.prototype.Check_for_Customer_Referral_Code = function (values, callback) {
    var me = this;
    var error;
    var query = {
        referral_code: values.referral_code
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Referal Code Applied Successfully',
                    ReferalID: Result._id
                }
            }));
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALID_REFERRAL_CODE
                }
            }));
        }
    })
};


//Generate Random Referral Offer Code
customermod.prototype.Generate_Random_Referal_Offer_Code_And_Generate_Offer_and_Send_Mail = function (values, CustomerData, callback) {
    var me = this;
    var sync = require('sync');
    var mailgunmod = require('../CoreModules/mailgunmod.js');
    var mailgun = new mailgunmod();
    var config = require("../Config/config.js");

    function RelationShipFunction(values, CustomerData, callback) {
        process.nextTick(function () {
            var uuid = require('uuid');
            var RelationID = uuid();
            var date = new Date();
            var customerarray = [];
            customerarray.push(values.ReferalID);
            customerarray.push(CustomerData._id);
            var RelationData = new me.Referral_Relation({
                RelationID: RelationID,
                CustomerIDArray: customerarray,
                created_at: date,
                updated_at: date
            });
            RelationData.save();
            callback(null, 'Relation Made Successfully');
        })
    }

    function ReferralOfferDataFunction(callback) {
        process.nextTick(function () {
            me.Offers.findOne({
                OfferType: 3,
                isActive: true
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            me.Customers.findOne({
                _id: values.ReferalID
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function MailSendingFunction(MailData, callback) {
        process.nextTick(function () {
            mailgun.send_Offer_Code_Mail_Referral(MailData, function (response) {
                callback(null, 'Mail Sent Successfully');
            })
        })
    }
    sync(function () {
        var Result = ReferralOfferDataFunction.sync(null);
        var RelationShip = RelationShipFunction.sync(null, values, CustomerData);
        var ReferalData = CustomerDataFunction.sync(null, values);
        var ReferalMailData = {
            "Email": ReferalData.Email,
            "Name": ReferalData.First_name,
            "OfferCode": Result.OfferCode,
            "DiscountPercentage": Result.DiscountPercentage
        };
        var CustomerMailData = {
            "Email": CustomerData.Email,
            "Name": CustomerData.First_name,
            "OfferCode": Result.OfferCode,
            "DiscountPercentage": Result.DiscountPercentage
        };
        var ReferalMail = MailSendingFunction.sync(null, ReferalMailData);
        var CustomerMail = MailSendingFunction.sync(null, CustomerMailData);
        callback(false, 'All operations performed successfully');
    })
};


//Generate Random Reference Code
customermod.prototype.Generate_Random_Referal_Code = function (callback) {
    var me = this;
    var sync = require('sync');

    function CustomerReferalFunction(referral_code, callback) {
        process.nextTick(function () {
            me.Customers.findOne({
                referral_code: referral_code
            }).exec(function (err, Result) {
                callback(null, Result)
            })
        })
    }
    sync(function () {
        function Referal() {
            var referral_code;
            var charBank = "abcdefghijklmnpqrtuvwxyz12346789ABCDEFGHIJKLMNPQRTUVWXYZ12346789";
            var fstring = '';
            for (var i = 0; i < 7; i++) {
                fstring += charBank[parseInt(Math.random() * charBank.length)];
            }
            referral_code = fstring;
            var Result = CustomerReferalFunction.sync(null, referral_code);
            if (Result != null) {
                Referal();
            } else {
                return referral_code;
            }
        }
        callback(false, Referal());
    })
};
//Check for Seasonal Offer Validity
customermod.prototype.Check_for_Seasonal_Offer_Validity = function (values, OfferData, callback) {
    var me = this;
    var error;
    var date = new Date();
    var query = {
        OfferID: OfferData.OfferID,
        OfferValidFrom: {
            $lte: date
        },
        OfferValidTo: {
            $gte: date
        },
        isActive: true
    };
    me.Offers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.SEASONAL_OFFER_EXPIRED
                }
            }));
        }
    })
};
//Check for Referal Offer There or Not for Customer and Check if all are used or not
customermod.prototype.Check_Whether_User_Have_Referral_Offer = function (values, callback) {
    var me = this;
    var error;
    var customearray = [];
    customearray.push(values.CustomerID);
    var query = {
        CustomerIDArray: {
            $in: customearray
        },
        OfferUsed: {
            $nin: customearray
        }
    };
    me.Referral_Relation.findOne(query).exec(function (err, Result) {
        if (Result) {
            return callback(false);
        } else {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.YOU_CANT_APPLY_REFFERAL_CODE_OFFER_CODE
                }
            }));
        }
    })
};

//Check for Offer Code
customermod.prototype.Check_for_OfferCode = function (values, callback) {
    var me = this;
    var userBooktype = parseInt(values.BookingType);
    var error;
    var Offers = me.Offers;
    var query = {
        OfferCode: values.OfferCode
    };
    Offers.findOne(query, function (err, Result) {
        if (Result) {
            if (Result.BookingType == userBooktype) {
                if (Result.isActive == true) {
                    error = false;
                    return callback(false, Result);
                } else {
                    error = true;
                    return callback(error, new me.ApiResponce({
                        success: false,
                        extras: {
                            msg: me.ApiMessages.OFFER_NOT_FOUND
                        }
                    }));
                }
            } else {
                error = true;
                return callback(error, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.YOU_CANT_APPLY_OFFER_TO_THIS_BOOKING_TYPE
                    }
                }));
            }
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_NOT_FOUND
                }
            }));
        }
    })
};

//Check for Offer
customermod.prototype.Check_for_OfferID = function (values, callback) {
    var me = this;
    var error;
    var query = {
        OfferID: values.OfferID
    };
    me.Offers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_ID_NOT_FOUND
                }
            }));
        }
    })
};

//Inactivate Offer
customermod.prototype.Inactivate_Offer = function (values, callback) {
    var me = this;
    var date = new Date();
    me.Offers.update({
        OfferID: values.OfferID
    }, {
            isActive: false,
            updated_at: date
        }, {
            multi: false
        }).exec(function (err, Result) {
            if (!err) {
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        Status: "Offer Removed Successfully"
                    }
                }));
            }
        })
};
//Check Whether OfferID Locked Used by Customer
customermod.prototype.Check_Whether_OfferID_lOCK = function (values, OfferData, callback) {
    var me = this;
    var error;
    var query = {
        OfferID: OfferData.OfferID,
        CustomerID: values.CustomerID,
        Lock: true
    };
    me.Offers_Used_Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_LOCKED_TRY_AGAIN_AFTER_30_MINUTES
                }
            }));
        } else {
            return callback(false);
        }
    })
};
//Check Whether First Time Offer Used by Customer
customermod.prototype.Check_Whether_First_Time_Offer_Used_by_Customer = function (values, callback) {
    var me = this;
    var error;
    var query = {
        OfferType: 1,
        CustomerID: values.CustomerID,
        Used: true
    };
    me.Offers_Used_Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.FIRST_TIME_CODE_ALREADY_USED
                }
            }));
        } else {
            return callback(false);
        }
    })
};
//Check Whether Seasonal Offer Used by User in Year
customermod.prototype.Check_Whether_Seasonal_Offer_Used_by_Customer_IN_Year = function (values, OfferData, callback) {
    var me = this;
    var error;
    var moment = require('moment');
    var Year = moment().utcOffset(330).format('YYYY');
    var query = {
        OfferType: 2,
        OfferID: values.OfferID,
        CustomerID: values.CustomerID,
        Year: Year,
        Used: true
    };
    me.Offers_Used_Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_CODE_ALREADY_USED
                }
            }));
        } else {
            return callback(false);
        }
    })
};
//Lock Offer Used to Customer and Store it
customermod.prototype.Store_Offer_User_and_Locked_it = function (values, OfferData, callback) {
    var me = this;
    var date = new Date();
    var OfferFields;
    var moment = require('moment');
    var Year = moment().utcOffset(330).format('YYYY');
    var ReferenceOfferID = me.uuid();
    var OfferUserData = new me.Offers_Used_Customers({
        ReferenceOfferID: ReferenceOfferID,
        OfferID: OfferData.OfferID,
        OfferType: OfferData.OfferType,
        CustomerID: values.CustomerID,
        DiscountPercentage: OfferData.DiscountPercentage,
        Year: Year,
        Used: false,
        created_at: date,
        updated_at: date
    });
    OfferUserData.save();
    OfferFields = {
        ReferenceOfferID: ReferenceOfferID,
        OfferID: OfferData.OfferID,
        OfferDescription: OfferData.OfferDescription,
        OfferType: OfferData.OfferType,
        OfferName: OfferData.OfferName,
        OfferCode: OfferData.OfferCode,
        DiscountPercentage: OfferData.DiscountPercentage
    };
    return callback(false, new me.ApiResponce({
        success: true,
        extras: {
            Status: "Offer Applied Successfully",
            OfferData: OfferFields
        }
    }));
};


//Check Whether OfferID Used by Customer
customermod.prototype.Check_Whether_OfferID_Used = function (values, OfferData, callback) {
    var me = this;
    var error;
    var moment = require('moment');
    var Year = moment().utcOffset(330).format('YYYY');
    if (OfferData.OfferType == 3 || OfferData.OfferType == 4) {
        return callback(false);
    } else {
        if (OfferData.OfferType == 2) {
            var query = {
                OfferType: 2,
                OfferID: OfferData.OfferID,
                CustomerID: values.CustomerID,
                Year: Year,
                Used: true
            };
        } else {
            var query = {
                OfferID: OfferData.OfferID,
                CustomerID: values.CustomerID,
                Used: true
            };
        }
        me.Offers_Used_Customers.findOne(query).exec(function (err, Result) {
            if (Result) {
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.OFFER_CODE_ALREADY_USED
                    }
                }));
            } else {
                return callback(false);
            }
        })
    }
};



//Cancel Order
customermod.prototype.cancelOrder = function (values, callback) {
    var me = this;
    var ObjectID = require('mongodb').ObjectID;
    var moment = require('moment');
    var orderid = values.orderId;
    var userid = values.CustomerID;
    var cancellation_reason = values.cancellationReason;
    var usertype = 1;
    var datetime = me.DateTime();
    var orderID = new ObjectID(orderid);
    var Customer = me.Customers;
    var Order = me.Orders;
    var Driver = me.Drivers;
    var mailgunmod = require('../CoreModules/mailgunmod.js');
    var mailgun = new mailgunmod();
    var config = require("../Config/config.js");
    var publishkey = config.pubnubkeys.publishkey;
    var subscribekey = config.pubnubkeys.subscribekey;
    var pubnubs = require("pubnub");
    var pubnub = new pubnubs({
        ssl: true,
        publish_key: publishkey,
        subscribe_key: subscribekey
    });
    Order.findOne({
        $and: [{
            "_id": orderID,
            "userId": userid
        }]
    }, function (err, orderObj) {
        if (!err) {
            if (orderObj.status != 11 || orderObj.status != 12 || orderObj.status != 15 || orderObj.status != 14) {

                var orderstatus = orderObj.status;
                console.log("Cancellation Reason " + cancellation_reason);
                var updobjs = {
                    $set: {
                        "status": 5
                    }, //cancell
                    $push: {
                        "cancellation": {
                            "reason": cancellation_reason,
                            "datetime": datetime,
                            "userType": usertype,
                            "cid": userid
                        }
                    }
                }

                Order.update({
                    "_id": orderID
                }, updobjs, function (err, resObj) {
                    if (!err) {
                        if (orderstatus == 7 || orderstatus == 10 || orderstatus == 16 || orderstatus == 14) {
                            sendemailtocustomer_customercancellation1(orderObj.driversLog, orderObj.orderseqId);
                            sendmailtodriver_customercancellation(orderObj.driversLog, orderObj.orderseqId, orderObj._id);
                        } else {
                            sendemailtocustomer_customercancellation(orderObj.orderseqId);


                            Driver.find({
                                newapp_ids: {
                                    $elemMatch: {
                                        "app_id": String(orderid)
                                    }
                                }
                            }).exec(function (err, driverObjs) {
                                console.log("Driver Inside Main error " + JSON.stringify(err))
                                console.log("Driver Inside Main success " + JSON.stringify(driverObjs))

                                // })

                                Driver.update({
                                    newapp_ids: {
                                        $elemMatch: {
                                            "app_id": String(orderid)
                                        }
                                    }
                                }, {
                                        $pull: {
                                            "newapp_ids": {
                                                "app_id": String(orderid)
                                            }
                                        }
                                    }, {
                                        multi: true
                                    }, function (err, driver) {
                                        console.log("Driver Inside Main error update" + JSON.stringify(err))
                                        console.log("Driver Inside Main success update" + JSON.stringify(driverObjs))
                                        if (!err) {

                                            for (var i = 0; i < driverObjs.length; i++) {

                                                var driverid = String(driverObjs[i]._id);
                                                sendcancelorderpushtodriver(driverid, 2, me);
                                            }

                                        }
                                    })

                            })

                        }

                        //send fcm push to customer cancel the order
                        var message = {
                            "status": 5,
                            "orderid": orderid
                        }
                        getTokenandSendPush(message);

                        return callback(false, new me.ApiResponce({
                            success: true,
                            extras: {
                                Status: 'Your Order Cancelled Successfully'
                            }
                        }));
                    }
                })

            } else {
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.CANNOT_CANCEL_THIS_ORDER
                    }
                }));
            }
        }
    })

    function getTokenandSendPush(message) {
        console.log("Entering 5th Function " + JSON.stringify(message));
        var status = message.status;
        var OrderId = new ObjectID(message.orderid);
        var Order = me.Orders;
        Order.findOne({
            "_id": OrderId
        }, function (err, result3) {
            if (!err) {
                if (result3) {
                    var orderid = String(result3._id);
                    var orderseqid = result3.orderseqId;
                    var customer = me.Customers;
                    var _id = new ObjectID(result3.userId);

                    customer.aggregate([{
                        "$match": {
                            $and: [{
                                "_id": _id,
                                "Devices.Active": '1'
                            }]
                        }
                    }, {
                        "$unwind": "$Devices"
                    }, {
                        "$match": {
                            "Devices.Active": '1'
                        }
                    }, {
                        "$project": {
                            "_id": 0,
                            "Devices": 1
                        }
                    }], function (err, result) {
                        if (!err) {
                            if (result.length > 0) {
                                var message;
                                var notify;
                                if (parseFloat(status) == 7) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': 'Your order has been confirmed and is scheduled for delivery'
                                    };
                                    message = {
                                        "action": 7,
                                        "orderId": orderseqid,
                                        "message": 'Your order has been confirmed and is scheduled for delivery',
                                        "orderid": orderid
                                    }

                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        //console.log(status, response);
                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }
                                        me.FCMMod.sendpush_android_ios(data, function (err, response) {

                                        })
                                    }
                                } else if (parseFloat(status) == 16) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': 'Driver is enroute to pickup'
                                    };
                                    message = {
                                        "action": 16,
                                        "orderId": orderseqid,
                                        "message": 'Driver is enroute to pickup',
                                        "orderid": orderid
                                    }
                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        //console.log(status, response);
                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }
                                        me.FCMMod.sendpush_android_ios(data, function (err, response) {

                                        })
                                    }
                                } else if (parseFloat(status) == 10) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': 'Driver reached at pickup location'
                                    };
                                    message = {
                                        "action": 10,
                                        "orderId": orderseqid,
                                        "message": 'Driver reached at pickup location',
                                        "orderid": orderid
                                    }

                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        // console.log(status, response);
                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }
                                        me.FCMMod.sendpush_android_ios(data, function (err, response) {

                                        })
                                    }
                                } else if (parseFloat(status) == 11) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': 'Driver has picked up your order and is on the way'
                                    };
                                    message = {
                                        "action": 11,
                                        "orderId": orderseqid,
                                        "message": 'Driver has picked up your order and is on the way',
                                        "orderid": orderid
                                    }

                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        //console.log(status, response);
                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }
                                        me.FCMMod.sendpush_android_ios(data, function (err, response) {

                                        })
                                    }
                                } else if (parseFloat(status) == 12) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': 'Driver reached delivery location'
                                    };
                                    message = {
                                        "action": 12,
                                        "orderId": orderseqid,
                                        "message": 'Driver reached delivery location',
                                        "orderid": orderid
                                    }

                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        //console.log(status, response);
                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }

                                        me.FCMMod.sendpush_android_ios(data, function (err, response) {

                                        })
                                    }
                                } else if (parseFloat(status) == 14) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': 'Your order has been completed. '
                                    };
                                    message = {
                                        "action": 14,
                                        "orderId": orderseqid,
                                        "message": 'Your order has been completed. ',
                                        "orderid": orderid
                                    }

                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        //console.log(status, response);
                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }
                                        me.FCMMod.sendpush_android_driver(data, function (err, response) {

                                        })
                                    }
                                }
                            }
                        }
                    })
                }
            }
        })
    }
    //Completed
    function sendemailtocustomer_customercancellation1(driversLog, orderseqid) {
        console.log("Entering 2nd Function " + JSON.stringify(driversLog));
        var date = moment(datetime).format('MMM Do YYYY');
        var time = moment(datetime).format('LT');
        var userID = new ObjectID(userid);
        Customer.findOne({
            "_id": userID
        }, function (err, customerObj) {
            if (!err) {
                driversLog.forEach(function (item) {
                    if (item.status == "7") {
                        driverid = item.driverid;
                    }
                })
                driverID = new ObjectID(driverid);
                console.log("Driver ID" + driverID);
                Driver.findOne({
                    "_id": driverID
                }, function (err, driverObj) {
                    console.log("Driver Data Error " + JSON.stringify(err))
                    console.log("Driver Data found " + JSON.stringify(driverObj))
                    if (!err) {
                        var maildata = {
                            "email": customerObj.Email,
                            "customerName": customerObj.First_name,
                            "orderId": orderseqid,
                            "driverName": driverObj.name + ' ' + driverObj.lname,
                            "date": date,
                            "time": time
                        }

                        mailgun.cancelledByCustomerSendEmailToCustomer1(maildata, function (response) {
                            //console.log(response);
                        })
                    }
                })
            }
        })
    }


    //Completed
    function sendemailtocustomer_customercancellation(orderseqid) {
        console.log("Entering 1st Function " + orderseqid);
        var date = moment(datetime).format('MMM Do YYYY');
        var time = moment(datetime).format('LT');
        var userID = new ObjectID(userid);
        Customer.findOne({
            "_id": userID
        }, function (err, customerObj) {
            if (!err) {
                var maildata = {
                    "email": customerObj.Email,
                    "customerName": customerObj.First_name,
                    "orderId": orderseqid,
                    "date": date,
                    "time": time
                }
                mailgun.cancelledByCustomerSendEmailToCustomer(maildata, function (response) {
                    //console.log(response);
                })
            }
        })
    }
    //completed
    function sendmailtodriver_customercancellation(driversLog, orderseqid, orderid) {
        console.log("Entering 3rd Function " + JSON.stringify(driversLog));
        var userID = new ObjectID(userid);
        var date = moment(datetime).format('MMM Do YYYY');
        var time = moment(datetime).format('LT');
        Customer.findOne({
            "_id": userID
        }, function (err, customerObj) {
            if (!err) {
                var driverid;
                driversLog.forEach(function (item) {
                    if (item.status == "7") {
                        driverid = item.driverid;
                    }
                })
                console.log("driverid ..............." + driverid);
                driverID = new ObjectID(driverid);
                Driver.findOne({
                    "_id": driverID
                }, function (err, driverObj) {
                    console.log("Driver Data Error " + JSON.stringify(err))
                    console.log("Driver Data found " + JSON.stringify(driverObj))
                    if (!err) {
                        var maildata = {
                            "email": driverObj.Email,
                            "customerName": customerObj.First_name,
                            "orderId": orderseqid,
                            "driverName": driverObj.name + ' ' + driverObj.lname,
                            "cancellationReason": cancellation_reason,
                            "date": date,
                            "time": time
                        }

                        mailgun.cancelledByCustomerSendEmailToDriver(maildata, function (response) {
                            //console.log(response);
                        })

                        console.log(orderid);

                        Driver.update({
                            "_id": driverID
                        }, {
                                $pull: {
                                    "app_ids": {
                                        "app_id": String(orderid)
                                    }
                                }
                            }, function (err, driver) {
                                console.log("Driver Data update Error " + JSON.stringify(err))
                                console.log("Driver Data update success " + JSON.stringify(driverObj))
                                if (!err) {
                                    var publishConfig = {
                                        channel: driverid,
                                        message: {
                                            "a": 23, //customer cancel order
                                            "cancelmsg": "Customer has cancelled the order"
                                        }
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        console.log("customer cancelled ........");
                                    })
                                    sendcancelorderpushtodriver(driverid, 1, me);
                                }
                            })
                    }
                })
            }
        })
    }

    function sendcancelorderpushtodriver(did, type, me) {
        console.log("Entering 4th Function " + JSON.stringify(did));
        var did = new ObjectID(did);
        var notify, message;
        if (type == 1) {
            notify = {
                'title': 'Ezshipp',
                'body': 'Hi, Customer has cancelled the order.'
            };
            message = {
                "a": 23, //Customer has cancelled the order
                "errFlag": 1,
                "errMsg": "Customer has cancelled the order"
            }
        } else if (type == 2) {
            notify = {
                'title': 'Ezshipp',
                'body': 'Hi, Customer has cancelled the order.'
            };
            message = {
                "a": 25, //Customer has cancelled the order
                "errFlag": 1,
                "errMsg": "Customer has cancelled the order"
            }
        } else {
            notify = {
                'title': 'Ezshipp',
                'body': "Customer has cancelled the order" //'Hi, This is order has been accepted by another driver. Please be prompt in responding to the next order.'
            };
            message = {
                "a": 25, //if any one login any otherdevice same account
                "errFlag": 1,
                "errMsg": "Customer has cancelled the order" //"This is order has been accepted by another driver. Please be prompt in responding to the next order."
            }
        }

        var Driver = me.Drivers;
        Driver.aggregate([{
            "$match": {
                $and: [{
                    "_id": did,
                    "Devices.Active": '1'
                }]
            }
        }, {
            "$unwind": "$Devices"
        }, {
            "$match": {
                "Devices.Active": '1'
            }
        }, {
            "$project": {
                "_id": 0,
                "Devices": 1
            }
        }], function (err, result) {
            if (!err) {
                if (result.length > 0) {
                    result.forEach(function (item) {
                        var devicetoken = item.Devices.DeviceToken;
                        if (item.Devices.DeviceType == "1") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_ios_driver(data, function (err, response) {

                            })
                        } else if (item.Devices.DeviceType == "2") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_android_driver(data, function (err, response) {

                            })
                        }
                    })
                }
            }
        })
    }
}
//Find All Customer Cancellation Reasons
customermod.prototype.Find_All_Customer_Cancellation_Reasons = function (callback) {
    var me = this;
    me.can_reason.find({
        res_for: "Passenger"
    }).sort({
        reasons: 1
    }).exec(function (err, Result) {
        var ReasonData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            ReasonData.push({
                Reason: Result[t].reasons[0]
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                ReasonData: ReasonData
            }
        }));
    })
}

//Check for Vendor
customermod.prototype.Check_for_VendorOrderID = function (values, callback) {
    var me = this;
    var error;
    var query = {
        VendorOrderID: values.VendorOrderID
    };
    me.Vendors_Orders.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.VENDOR_BULK_ORDER_NOT_FOUND
                }
            }));
        }
    })
};
customermod.prototype.Find_All_Orders_of_Bulk_Order = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function DetailDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                VendorOrderID: values.VendorOrderID
            };
            me.Vendor_Orders_Detail.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function DriverDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 3,
                _id: values.DriverID
            };
            me.Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };
    sync(function () {
        var Result = DetailDataFunction.sync(null);
        console.log("Result " + JSON.stringify(Result));
        var OrderData = [];
        var DriverName;
        var DriverID;
        var DriverName;
        var DriverPhoneNumber;
        var DriverEmailID;
        var t = 0;
        for (var i = 0; i < Result.length; i++) {

            if (Result[t].DriverID == "" || Result[t].DriverID == null) {
                DriverID = "";
                DriverName = "";
                DriverPhoneNumber = "";
                DriverEmailID = "";
            } else {
                DriverData = DriverDataFunction.sync(null, Result[t]);
                DriverID = DriverData._id;
                DriverName = DriverData.name;
                DriverPhoneNumber = DriverData.phone;
                DriverEmailID = DriverData.email;
            }
            OrderData.push({
                VendorOrderID: Result[t].VendorOrderID,
                VendorOrderDetailID: Result[t].VendorOrderDetailID,
                orderType: Result[t].orderType,
                bookingType: Result[t].bookingType,
                PickAddress: Result[t].PickAddress,
                PickLatitude: Result[t].PickLatitude,
                PickLongitude: Result[t].PickLongitude,
                DropAddress: Result[t].DropAddress,
                DropLatitude: Result[t].DropLatitude,
                DropLongitude: Result[t].DropLongitude,
                PickDropDistance: Result[t].PickDropDistance,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemName: Result[t].itemName,
                itemDescription: Result[t].itemDescription,
                itemweight: Result[t].itemweight,
                deliverycharge: Result[t].deliverycharge,
                Pincode: Result[t].Pincode,
                LocationFound: Result[t].LocationFound,
                IP_Address: Result[t].IP_Address,
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                DriverEmailID: DriverEmailID
            });
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
}
//Bulk Order Processing Vendors
customermod.prototype.Vendor_Bulk_Order_Processing = function (values, VendorOrderData, callback) {
    var me = this;
    var sync = require('sync');
    function OrderProcessingFunction(OrderArray, DriverID, me, callback) {
        process.nextTick(function () {
            function OrderDataFunction(VendorOrderDetailID, me, callback) {
                process.nextTick(function () {
                    var query = {
                        VendorOrderDetailID: VendorOrderDetailID
                    }
                    me.Vendor_Orders_Detail.findOne(query).exec(function (err, Result) {
                        callback(null, Result);
                    })
                })
            };
            function OrderPlacingFunction(OrderData, DriverID, me, callback) {
                process.nextTick(function () {
                    var querystring = require('querystring');
                    var https = require('https');
                    var config = require("../Config/config.js");
                    var post_data = querystring.stringify({
                        'CustomerID': OrderData.CustomerID,
                        'pickAddress': OrderData.PickAddress,
                        'dropAddress': OrderData.DropAddress,
                        'pickLatitude': OrderData.PickLatitude,
                        'pickLongitude': OrderData.PickLongitude,
                        'dropLatitude': OrderData.DropLatitude,
                        'dropLongitude': OrderData.DropLongitude,
                        'itemName': OrderData.itemName,
                        'itemDescription': OrderData.itemDescription,
                        'order_datetime': me.DateTime(),
                        'orderType': 1,
                        'bookingType': 3,
                        'receiverName': OrderData.receiverName,
                        'receiverPhone': OrderData.receiverPhone,
                        'paymentType': OrderData.paymentType,
                        'paymentId': OrderData.paymentId,
                        'deliverycharge': OrderData.deliverycharge,
                        'DriverID': DriverID
                    });
                    var result = '';

                    var options = {
                        host: config.website,
                        port: 443,
                        method: 'POST',
                        path: '/Vendor_Single_Ordering',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'Content-Length': Buffer.byteLength(post_data)
                        }
                    };
                    var str = '';
                    var req = https.request(options, function (res) {
                        var data;
                        res.setEncoding('utf8');
                        res.on('data', function (chunk) {
                            str += chunk;
                        });
                        res.on('end', function () {
                            var result = JSON.parse(str);
                            callback(null, result);
                        });
                    });
                    req.write(post_data);
                    req.end();
                })
            };

            function UpdateDriver(VendorOrderDetailID, DriverID, me, callback) {
                process.nextTick(function () {
                    var query = {
                        VendorOrderDetailID: VendorOrderDetailID
                    }
                    var changes = {
                        DriverID: DriverID
                    }
                    var multiplicity = {
                        multi: false
                    }
                    me.Vendor_Orders_Detail.update(query, changes, multiplicity).exec(function (err, Result) {
                        callback(null, 'Updated Successfully');
                    })
                })
            };
            var sync = require('sync');
            sync(function () {
                var t = 0;
                for (var i = 0; i < OrderArray.length; i++) {
                    var Result = OrderDataFunction.sync(null, OrderArray[t], me);
                    var Result2 = OrderPlacingFunction.sync(null, Result, DriverID, me);
                    var Result3 = UpdateDriver.sync(null, OrderArray[t], DriverID, me);
                    t++;
                }
                callback(null, 'Orders Placed Successfully');

            })
        })
    };

    function UpdateBulkOrderStatus(VendorOrderID, callback) {
        process.nextTick(function () {
            var query = {
                VendorOrderID: VendorOrderID
            }
            var changes = {
                Processing_Status: 3
            }
            var multiplicity = {
                multi: false
            }
            me.Vendors_Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    };
    sync(function () {
        var DirectionArray = [];
        var DriverData = [];
        DirectionArray = VendorOrderData.DirectionArray;
        console.log(DirectionArray.length);
        DriverData = values.DriverData;
        console.log(DirectionArray);
        console.log(DriverData);
        var drivelength = DriverData.length;
        var t = 0;
        var DriverID;
        var OrderArray = [];
        for (var i = 0; i < DirectionArray.length; i++) {
            if (t == drivelength) {
                t = 0;
                DriverID = DriverData[t];
                OrderArray = DirectionArray[i];
            } else {
                DriverID = DriverData[t];
                OrderArray = DirectionArray[i];
            }
            var Result = OrderProcessingFunction.sync(null, OrderArray, DriverID, me);
            console.log("Result of " + Result);
            t++;
        }
        var Result2 = UpdateBulkOrderStatus.sync(null, values.VendorOrderID);
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                Status: "Vendors Order Placed Successfully"
            }
        }));
    })
};
//Find All Vendor Bulk Orders
customermod.prototype.Find_All_Vendor_COMPLETED_Bulk_Orders = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var toSkip = parseInt(values.skip);
            var query = {
                Processing_Status: {
                    $eq: 3
                }
            }
            me.Vendors_Orders.find(query).sort({
                created_at: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function CountDataFunction(callback) {
        process.nextTick(function () {
            me.Vendors_Orders.count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    };

    function VendorDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                VendorID: values.VendorID
            }
            me.Vendors.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var Count = CountDataFunction.sync(null);
        var t = 0;
        var OrderData = [];
        var moment = require('moment');
        for (var i = 0; i < Result.length; i++) {
            var Result2 = VendorDataFunction.sync(null, Result[t]);
            var date = moment(Result[t].created_at).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
            OrderData.push({
                VendorOrderID: Result[t].VendorOrderID,
                VendorID: Result[t].VendorID,
                CustomerID: Result[t].CustomerID,
                VendorName: Result2.VendorName,
                VendorEmail: Result2.VendorEmail,
                VendorPhone: Result2.VendorPhone,
                Total_Weight: Result[t].Total_Weight,
                Total_Orders: Result[t].Total_Orders,
                Total_Price: Result[t].Total_Price,
                No_Of_Directions: Result[t].No_Of_Directions,
                BearingArray: Result[t].BearingArray,
                DetailsOrderIDArray: Result[t].DetailsOrderIDArray,
                DirectionArray: Result[t].DirectionArray,
                IP_Address: Result[t].IP_Address,
                Processing_Status: Result[t].Processing_Status,
                Date: date
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    })
};
//Find All Vendor Bulk Orders
customermod.prototype.Find_All_Vendor_Bulk_Orders = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var toSkip = parseInt(values.skip);
            var query = {
                Processing_Status: {
                    $ne: 3
                }
            }
            me.Vendors_Orders.find(query).sort({
                created_at: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function CountDataFunction(callback) {
        process.nextTick(function () {
            me.Vendors_Orders.count().exec(function (err, Count) {
                callback(null, Count);
            })
        })
    };

    function VendorDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                VendorID: values.VendorID
            }
            me.Vendors.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var Count = CountDataFunction.sync(null);
        var t = 0;
        var OrderData = [];
        var moment = require('moment');
        for (var i = 0; i < Result.length; i++) {
            var Result2 = VendorDataFunction.sync(null, Result[t]);
            var date = moment(Result[t].created_at).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
            OrderData.push({
                VendorOrderID: Result[t].VendorOrderID,
                VendorID: Result[t].VendorID,
                CustomerID: Result[t].CustomerID,
                VendorName: Result2.VendorName,
                VendorEmail: Result2.VendorEmail,
                VendorPhone: Result2.VendorPhone,
                Total_Weight: Result[t].Total_Weight,
                Total_Orders: Result[t].Total_Orders,
                Total_Price: Result[t].Total_Price,
                No_Of_Directions: Result[t].No_Of_Directions,
                BearingArray: Result[t].BearingArray,
                DetailsOrderIDArray: Result[t].DetailsOrderIDArray,
                DirectionArray: Result[t].DirectionArray,
                IP_Address: Result[t].IP_Address,
                Processing_Status: Result[t].Processing_Status,
                Date: date
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    })
};

//Check Validity of Field for Vendor Registration
customermod.prototype.Check_Validity_Vendor_Registration = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.CustomerID == null || values.VendorName == null || values.VendorEmail == null || values.VendorPhone == null || values.PickAddress == null || values.PickLatitude == null || values.PickLongitude == null || values.Price == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};
//SEARCH All Vendors
customermod.prototype.Search_All_Vendors = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function VendorDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                $or: [{
                    VendorName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    VendorEmail: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    VendorPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    PickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.Vendors.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 3,
                _id: values.DriverID
            };
            me.Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };
    sync(function () {
        var Result = VendorDataFunction.sync(null);
        console.log(Result);
        var VendorData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var DriverData = DriverDataFunction.sync(null, Result[t]);
            var DriverID = DriverData._id;
            var DriverName = DriverData.name;
            var DriverPhoneNumber = DriverData.phone;
            var DriverEmailID = DriverData.email;

            VendorData.push({
                CustomerID: Result[t].CustomerID,
                VendorID: Result[t].VendorID,
                VendorName: Result[t].VendorName,
                VendorEmail: Result[t].VendorEmail,
                VendorPhone: Result[t].VendorPhone,
                PickAddress: Result[t].PickAddress,
                PickLatitude: Result[t].PickLatitude,
                PickLongitude: Result[t].PickLongitude,
                Price: Result[t].Price,
                VendorStatus: Result[t].VendorStatus,
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                DriverEmailID: DriverEmailID
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                VendorData: VendorData
            }
        }));
    })

};
//Find All Vendors
customermod.prototype.Find_All_Vendors = function (callback) {
    var me = this;
    var sync = require('sync');

    function VendorDataFunction(callback) {
        process.nextTick(function () {
            var query = {

            };
            me.Vendors.find().exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 3,
                _id: values.DriverID
            };
            me.Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };
    sync(function () {
        var Result = VendorDataFunction.sync(null);
        console.log(Result);
        var VendorData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var DriverData = DriverDataFunction.sync(null, Result[t]);
            var DriverID = DriverData._id;
            var DriverName = DriverData.name;
            var DriverPhoneNumber = DriverData.phone;
            var DriverEmailID = DriverData.email;

            VendorData.push({
                CustomerID: Result[t].CustomerID,
                VendorID: Result[t].VendorID,
                VendorName: Result[t].VendorName,
                VendorEmail: Result[t].VendorEmail,
                VendorPhone: Result[t].VendorPhone,
                PickAddress: Result[t].PickAddress,
                PickLatitude: Result[t].PickLatitude,
                PickLongitude: Result[t].PickLongitude,
                Price: Result[t].Price,
                VendorStatus: Result[t].VendorStatus,
                DriverID: DriverID,
                DriverName: DriverName,
                DriverPhoneNumber: DriverPhoneNumber,
                DriverEmailID: DriverEmailID
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                VendorData: VendorData
            }
        }));
    })

};
//Do Vendor Active
customermod.prototype.Vendor_Do_Active = function (values, callback) {
    var me = this;
    var query = {
        VendorID: values.VendorID
    };
    var changes = {
        VendorStatus: true
    };
    var multiplicity = {
        multi: false
    };
    me.Vendors.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Vendor Account Activated"
                }
            }));
        }
    })
};


//Do Vendor Inactive
customermod.prototype.Vendor_Do_Inactive = function (values, callback) {
    var me = this;
    var query = {
        VendorID: values.VendorID
    };
    var changes = {
        VendorStatus: false
    };
    var multiplicity = {
        multi: false
    };
    me.Vendors.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Vendor Account was Suspended"
                }
            }));
        }
    })
};
//Vendor Update Driver
customermod.prototype.Vendor_Update_Driver = function (values, callback) {
    var me = this;
    var query = {
        VendorID: values.VendorID
    };
    var changes = {
        DriverID: values.DriverID
    };
    var multiplicity = {
        multi: false
    };
    me.Vendors.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Vendor Driver Updated Successfully"
                }
            }));
        }
    })
};

//Update Vendor Profile
customermod.prototype.Update_Vendor_Profile = function (values, callback) {
    var me = this;
    var query = {
        VendorID: values.VendorID
    };
    var changes = {
        VendorName: values.VendorName,
        VendorEmail: values.VendorEmail,
        VendorPhone: values.VendorPhone,
        PickAddress: values.PickAddress,
        PickLatitude: values.PickLatitude,
        PickLongitude: values.PickLongitude
    };
    var multiplicity = {
        multi: false
    };
    me.Vendors.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Vendor Profile Updated Successfully"
                }
            }));
        }
    })
};

//Find All Vendor Recent Prices
customermod.prototype.Find_All_Vendor_Recent_Prices = function (values, callback) {
    var me = this;
    var query = {
        VendorID: values.VendorID
    };
    me.Vendors_Price.find(query).sort({
        created_at: -1
    }).exec(function (err, Result) {
        var PriceData = [];
        var t = 0;
        var moment = require('moment');
        var date;
        for (var i = 0; i < Result.length; i++) {
            date = moment(Result[t].created_at).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
            PriceData.push({
                Price: Result[t].Price,
                Date: date
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                PriceData: PriceData
            }
        }));
    });
};

//Update Vendor Price
customermod.prototype.Update_Vendor_Price = function (values, VendorData, callback) {
    var me = this;
    var date = new Date();
    var PriceData = new me.Vendors_Price({
        CustomerID: VendorData.CustomerID,
        VendorID: values.VendorID,
        Price: values.Price,
        created_at: date,
        updated_at: date
    });
    PriceData.save();
    var query = {
        VendorID: values.VendorID
    };
    var changes = {
        Price: values.Price
    };
    var multiplicity = {
        multi: false
    };
    me.Vendors.update(query, changes, multiplicity, function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Vendor Price Updated Successfully"
                }
            }));
        } else {
            console.log("Update Error " + JSON.stringify(err));
        }
    });
};

//Vendor Registration
customermod.prototype.Register_Vendor = function (values, callback) {
    var me = this;
    var venid = me.uuid();
    var date = new Date();
    var VendorData = new me.Vendors({
        CustomerID: values.CustomerID,
        VendorID: venid,
        DriverID: values.DriverID,
        VendorName: values.VendorName,
        VendorEmail: values.VendorEmail,
        VendorPhone: values.VendorPhone,
        PickAddress: values.PickAddress,
        PickLatitude: values.PickLatitude,
        PickLongitude: values.PickLongitude,
        Price: values.Price,
        created_at: date,
        updated_at: date
    });
    VendorData.save();
    var PriceData = new me.Vendors_Price({
        CustomerID: values.CustomerID,
        VendorID: venid,
        Price: values.Price,
        created_at: date,
        updated_at: date
    });
    PriceData.save();
    var query = {
        _id: values.CustomerID
    };
    var changes = {
        Vendor: true
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity, function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Vendor Registered Successfully"
                }
            }));
        } else {
            console.log("Update Error " + JSON.stringify(err));
        }
    });
};
customermod.prototype.RemoveVendorandPrices = function (callback) {
    var me = this;
    me.Vendors.find().remove().exec(function (err, Result) {
        if (Result) {
            me.Vendors_Price.find().remove().exec(function (err, Result2) {
                if (Result2) {
                    return callback('Script Runned Successfully')
                }
            })
        }
    })
};
customermod.prototype.RemoveVendorOrdersandDetails = function (callback) {
    var me = this;
    me.Vendors_Orders.find().remove().exec(function (err, Result) {
        if (Result) {
            me.Vendor_Orders_Detail.find().remove().exec(function (err, Result2) {
                if (Result2) {
                    return callback('Script Runned Successfully')
                }
            })
        }
    })
};

customermod.prototype.SearchCustomer = function (values, callback) {
    var me = this;
    var query = {
        $or: [{
            First_name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            Phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ],
        Whether_Guest: {
            $ne: true
        }
    };
    me.Customers.find(query).exec(function (err, Result) {
        var CustomerData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Vendor = false;
            if (Result[t].Vendor == true) {
                Vendor = true;
            }
            CustomerData.push({
                CustomerID: Result[t]._id,
                First_name: Result[t].First_name,
                Email: Result[t].Email,
                Phone: Result[t].Phone,
                Vendor: Vendor
            });
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                CustomerData: CustomerData
            }
        }));
    });
};

customermod.prototype.CheckSessionID = function (values, callback) {
    var me = this;
    if (values.SessionID == null) {
        var ery = true;
        return callback(ery, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        me.CUSTOMERSESSION.findOne({
            SessionID: values.SessionID
        }, function (err, users) {
            if (!users) {
                var err = true;
                return callback(err, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.SESSION_EXPIRED
                    }
                }));
            } else {
                var err = false;
                return callback(err);
            }
        });
    }
};

/************  REPORT GENERATION ***************/
customermod.prototype.Report_Generation_From_Query = function (values, callback) {
    var me = this;
    //SEARCHING CUSTOMER FUNCTION
    function CustomerSearchDataFunction(SearchValue, callback) {
        process.nextTick(function () {
            var query = {
                $or: [{
                    Name: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    Email: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    Phone: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.Customers.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderCustomerFunction(values, callback) {
        process.nextTick(function () {
            console.log("Customer data" + JSON.stringify(values));
            var query = {
                userId: values._id,
                Whether_Deleted: false
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderCustomerFunction_Dates(values, keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[2], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[2], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                userId: values._id,
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }]
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    //SEARCHING DRIVER FUNCTION
    function DriverDataFunction(SearchValue, callback) {
        process.nextTick(function () {
            var query = {
                $or: [{
                    driverseqId: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    name: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    lname: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    email: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    phone: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    created_dt: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    Account_num: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    Routing_num: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    bank_name: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    businessid: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.Drivers.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderDriverFunction(values, callback) {
        process.nextTick(function () {
            console.log("Driver data" + JSON.stringify(values));
            var query = {
                driversLog: {
                    $elemMatch: {
                        "driverid": values._id
                    }
                },
                Whether_Deleted: false
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDriverFunction_Dates(values, keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[2], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[2], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                driversLog: {
                    $elemMatch: {
                        "driverid": values._id
                    }
                },
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }]
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    //SEARCHING ZONE FUNCTION
    function ZoneDataFunction(SearchValue, callback) {
        process.nextTick(function () {
            var query = {
                $or: [{
                    city: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    title: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.ZONES.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderZonesFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                pickupdepo: values.zoneseq,
                deliverydepo: values.zoneseq
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderZonesFunction_Dates(values, keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[2], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[2], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                pickupdepo: values.zoneseq,
                deliverydepo: values.zoneseq,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }]
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    //SEARCHING Recursive ORDER FUNCTION
    function RecursiveOrderDataFunction(SearchValue, callback) {
        process.nextTick(function () {
            var query = {
                Subscription: true,
                $or: [{
                    CustomerID: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    CustomerName: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    CustomerEmail: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    CustomerPhone: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    countryCode: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.Recursive_Order_MemberShip.find(query).sort({
                created_at: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function RecursiveOrderDataFunction_Today(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Subscription: true,
                $or: [{
                    From_Date: {
                        $lte: newdate
                    },
                    To_Date: {
                        $gte: curdate
                    }
                },
                {
                    From_Date: {
                        $lte: curdate
                    },
                    To_Date: {
                        $gte: newdate
                    }
                }
                ]
            };
            me.Recursive_Order_MemberShip.find(query).sort({
                created_at: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function RecursiveOrderDataFunction_Between(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var query = {
                $or: [{
                    From_Date: {
                        $lte: date1
                    },
                    To_Date: {
                        $gte: date2
                    }
                },
                {
                    From_Date: {
                        $lte: date2
                    },
                    To_Date: {
                        $gte: date1
                    }
                },
                {
                    From_Date: {
                        $lte: date3
                    },
                    To_Date: {
                        $gte: date4
                    }
                },
                {
                    From_Date: {
                        $lte: date4
                    },
                    To_Date: {
                        $gte: date3
                    }
                }
                ]
            };
            me.Recursive_Order_MemberShip.find(query).sort({
                created_at: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    //SEARCHING ORDER FUNCTION
    function OrderDataFunction(SearchValue, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    userId: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    chargeId: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    subtotal_amount: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    tip_amount: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                console.log("Order Fetch Result");
                console.log(JSON.stringify(Result));
                console.log(err);
                console.log(Result);
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Today(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ]
            };
            console.log("today query " + JSON.stringify(query));
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                console.log("today data " + JSON.stringify(Result));
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Today_Accepted(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [7]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Today_Arrived_At_Shop(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [10]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderDataFunction_Today_Order_Picked(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [11]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderDataFunction_Today_Order_Reached_At_Delivery(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [12]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderDataFunction_Today_Order_Dropped_At_Delivery(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [15]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderDataFunction_Today_Driver_on_Way_To_Pickup(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [16]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function OrderDataFunction_Today_Rejected(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [8]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Today_Completed(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [14]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Today_Cancelled(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [5]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Today_NEW(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var curdate = new Date();
            // var curdate =moment().utcOffset(330);
            var date = moment().utcOffset(330).format("DD/MM/YYYY");
            var newdate = moment(date, 'DD/MM/YYYY').subtract(330, 'minutes');
            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: newdate,
                        $lte: curdate
                    }
                },
                {
                    Date: {
                        $gte: curdate,
                        $lte: newdate
                    }
                }
                ],
                status: {
                    $in: [1]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }]
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Accepted(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [7]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Arrived_At_Shop(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [10]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Order_Picked(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [11]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Reached_At_Delivery(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [12]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Order_Dropped_At_Delivery(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [15]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Driver_on_Way_To_Pickup(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [16]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Rejected(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [8]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Completed(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [14]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_Cancelled(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [5]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction_Between_New(keyvalue, callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date1 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date2 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes');
            var date3 = moment(keyvalue[0], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');
            var date4 = moment(keyvalue[1], 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'd');

            var query = {
                Whether_Deleted: false,
                $or: [{
                    Date: {
                        $gte: date1,
                        $lte: date2
                    }
                }, {
                    Date: {
                        $gte: date2,
                        $lte: date1
                    }
                }, {
                    Date: {
                        $gte: date3,
                        $lte: date4
                    }
                }, {
                    Date: {
                        $gte: date4,
                        $lte: date3
                    }
                }],
                status: {
                    $in: [1]
                }
            };
            me.Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            me.Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    var sync = require('sync');
    sync(function () {
        var OrderTypeNumberArray = [
            "",
            "Order Anything",
            "Store Order"
        ]
        var BookingTypeNumberArray = [
            "",
            "Instant Booking",
            "4 Hours Booking",
            "Same Day Booking"
        ]
        var PaymentTypeArray = [
            "",
            "Cash on Delivery",
            "Online Payment"
        ];
        var OrderStatusNumberArray = [
            "",
            "New Order",
            "2",
            "3",
            "4",
            "Order Cancelled",
            "Order Cancelled",
            "Driver Accepted Order",
            "Driver Rejected Order",
            "Order Expired",
            "Driver Arrived at Shop",
            "Order Picked",
            "Order Reached at Delivery Center",
            "13",
            "Order Completed",
            "Order Drop at depo",
            "Driver on the way to pickup"
        ];
        var Query = values.Query;
        var CollectionArray = [];
        var KeyArray = [];
        var ConditionArray = [];

        var newTxt = Query.split('(');
        for (var i = 1; i < newTxt.length; i++) {
            CollectionArray.push(newTxt[i].split(')')[0]);
        }
        var keyTxt = Query.split('-');
        var regExp = /^[a-zA-Z0-9/]/;
        for (var i = 1; i < keyTxt.length; i++) {
            if (regExp.exec(keyTxt[i]) == null) {

            } else {
                KeyArray.push(keyTxt[i].split('-')[0]);
            }
        }
        var ConditionTxt = Query.split(' ');
        for (var i = 0; i < ConditionTxt.length; i++) {
            if (regExp.exec(ConditionTxt[i]) == null) { } else {
                ConditionArray.push(ConditionTxt[i].split(' ')[0]);
            }
        }
        var CollectionLength = CollectionArray.length;
        var ConditionLength = ConditionArray.length;
        var keyLength = KeyArray.length;
        console.log("Collections");
        console.log(CollectionArray);
        console.log("Conditions");
        console.log(ConditionArray);
        console.log("Keys");
        console.log(KeyArray);
        ResultData = [];

        function GetDeviceType(value) {
            console.log("value")
            console.log(value);
            var msg;
            if (value == null) {
                msg = "";
            } else if (parseInt(value) == 1) {
                msg = "IPhone";
            } else if (parseInt(value) == 2) {
                msg = "Android";
            } else if (parseInt(value) == 3) {
                msg = "Website";
            }
            return msg;
        }


        switch (CollectionArray[0]) {
            case "orders":
            case "Orders":
            case "ORDERS":
                console.log("Enters orders switch");
                switch (ConditionArray[0]) {
                    case "from":
                    case "From":
                    case "FROM":
                        console.log("Entering from");
                        switch (CollectionLength) {
                            case 1:
                                var Result = OrderDataFunction.sync(null, KeyArray[0]);
                                console.log("Result");
                                console.log(JSON.stringify(Result));
                                var OrderData = [];
                                var t = 0;
                                var pickAddress;
                                var dropAddress;
                                var event_length;
                                for (var i = 0; i < Result.length; i++) {
                                    var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                    if (Result2 != null) {
                                        if (Result[t].orderType == 1) {
                                            pickAddress = Result[t].pickAddress;
                                            dropAddress = Result[t].dropAddress;
                                        } else if (Result[t].orderType == 2) {
                                            event_length = Result[t].eventLog.length;
                                            pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                            dropAddress = Result[t].eventLog[event_length - 1].address;
                                        }
                                        // var DeviceType = GetDeviceType(Result[t].Devices.DeviceType);
                                        OrderData.push({
                                            Name: Result2.First_name,
                                            Email: Result2.Email,
                                            Phone: Result2.Phone,
                                            Date: Result[t].order_datetime,
                                            DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                            status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                            orderId: Result[t]._id,
                                            orderseqId: Result[t].orderseqId,
                                            orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                            due_datetime: Result[t].due_datetime,
                                            CustomerID: Result[t].userId,
                                            pickAddress: pickAddress,
                                            dropAddress: dropAddress,
                                            pickLatitude: Result[t].pickLocation.Latitude,
                                            pickLongitude: Result[t].pickLocation.Longitude,
                                            dropLatitude: Result[t].dropLocation.Latitude,
                                            dropLongitude: Result[t].dropLocation.Longitude,
                                            paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                            itemDescription: Result[t].itemDescription,
                                            receiverName: Result[t].receiverName,
                                            receiverPhone: Result[t].receiverPhone,
                                            itemName: Result[t].itemName,
                                            deliverycharge: Result[t].deliverycharge,
                                            Shipping_Distance: Result[t].Shipping_Distance,
                                            Order_Journey_Time: Result[t].Order_Journey_Time,
                                            bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                        });
                                        t++;
                                    } else {
                                        t++;
                                    }
                                }
                                ResultData = OrderData;
                                break;
                            case 2:
                                console.log("Entering for Collection Zones");
                                var OrderData = [];
                                var Result;
                                if (CollectionArray[1] == "zones" || CollectionArray[1] == "Zones" || CollectionArray[1] == "ZONES" || CollectionArray[1] == "zone" || CollectionArray[1] == "Zone" || CollectionArray[1] == "ZONE") {
                                    Result = ZoneDataFunction.sync(null, KeyArray[0]);
                                    console.log("Zones Length " + Result.length);
                                    var p = 0;
                                    var pickAddress;
                                    var dropAddress;
                                    var event_length;
                                    for (var i = 0; i < Result.length; i++) {
                                        var t = 0;
                                        if (KeyArray.length == 1) {
                                            var Result2 = OrderZonesFunction.sync(null, Result[p]);
                                        } else if (KeyArray.length == 3) {
                                            console.log("zones date");
                                            var Result2 = OrderZonesFunction_Dates.sync(null, Result[p], KeyArray);
                                        } else {
                                            var Result2 = [];
                                        }
                                        for (var j = 0; j < Result2.length; j++) {
                                            var Result3 = CustomerDataFunction.sync(null, Result2[t]);
                                            if (Result3 != null) {
                                                if (Result2[t].orderType == 1) {
                                                    pickAddress = Result2[t].pickAddress;
                                                    dropAddress = Result2[t].dropAddress;
                                                } else if (Result2[t].orderType == 2) {
                                                    event_length = Result2[t].eventLog.length;
                                                    pickAddress = Result2[t].address1 + ' ' + Result2[t].address2;
                                                    dropAddress = Result2[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result3.First_name,
                                                    Email: Result3.Email,
                                                    Phone: Result3.Phone,
                                                    Date: Result2[t].order_datetime,
                                                    DeviceType: GetDeviceType(Result2[t].Devices.DeviceType),
                                                    status: OrderStatusNumberArray[parseInt(Result2[t].status)],
                                                    orderId: Result2[t]._id,
                                                    orderseqId: Result2[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result2[t].orderType)],
                                                    due_datetime: Result2[t].due_datetime,
                                                    CustomerID: Result2[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result2[t].pickLocation.Latitude,
                                                    pickLongitude: Result2[t].pickLocation.Longitude,
                                                    dropLatitude: Result2[t].dropLocation.Latitude,
                                                    dropLongitude: Result2[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result2[t].paymentType)],
                                                    itemDescription: Result2[t].itemDescription,
                                                    receiverName: Result2[t].receiverName,
                                                    receiverPhone: Result2[t].receiverPhone,
                                                    itemName: Result2[t].itemName,
                                                    deliverycharge: Result2[t].deliverycharge,
                                                    Shipping_Distance: Result2[t].Shipping_Distance,
                                                    Order_Journey_Time: Result2[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result2[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        p++;
                                    }
                                } else if (CollectionArray[1] == "drivers" || CollectionArray[1] == "Drivers" || CollectionArray[1] == "DRIVERS" || CollectionArray[1] == "driver" || CollectionArray[1] == "Driver" || CollectionArray[1] == "DRIVER") {
                                    Result = DriverDataFunction.sync(null, KeyArray[0]);
                                    console.log("Driver Length " + Result.length);
                                    var p = 0;
                                    var pickAddress;
                                    var dropAddress;
                                    var event_length;
                                    for (var i = 0; i < Result.length; i++) {
                                        var t = 0;
                                        if (KeyArray.length == 1) {
                                            var Result2 = OrderDriverFunction.sync(null, Result[p]);
                                        } else if (KeyArray.length == 3) {
                                            console.log("drivers date");
                                            var Result2 = OrderDriverFunction_Dates.sync(null, Result[p], KeyArray);
                                        } else {
                                            var Result2 = [];
                                        }
                                        for (var j = 0; j < Result2.length; j++) {
                                            var Result3 = CustomerDataFunction.sync(null, Result2[t]);
                                            if (Result3 != null) {
                                                if (Result2[t].orderType == 1) {
                                                    pickAddress = Result2[t].pickAddress;
                                                    dropAddress = Result2[t].dropAddress;
                                                } else if (Result2[t].orderType == 2) {
                                                    event_length = Result2[t].eventLog.length;
                                                    pickAddress = Result2[t].address1 + ' ' + Result2[t].address2;
                                                    dropAddress = Result2[t].eventLog[event_length - 1].address;
                                                }
                                                // var DeviceType = GetDeviceType(Result2[t].Devices.DeviceType);

                                                OrderData.push({
                                                    Name: Result3.First_name,
                                                    Email: Result3.Email,
                                                    Phone: Result3.Phone,
                                                    DeviceType: GetDeviceType(Result2[t].Devices.DeviceType),
                                                    Date: Result2[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result2[t].status)],
                                                    orderId: Result2[t]._id,
                                                    orderseqId: Result2[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result2[t].orderType)],
                                                    due_datetime: Result2[t].due_datetime,
                                                    CustomerID: Result2[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result2[t].pickLocation.Latitude,
                                                    pickLongitude: Result2[t].pickLocation.Longitude,
                                                    dropLatitude: Result2[t].dropLocation.Latitude,
                                                    dropLongitude: Result2[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result2[t].paymentType)],
                                                    itemDescription: Result2[t].itemDescription,
                                                    receiverName: Result2[t].receiverName,
                                                    receiverPhone: Result2[t].receiverPhone,
                                                    itemName: Result2[t].itemName,
                                                    deliverycharge: Result2[t].deliverycharge,
                                                    Shipping_Distance: Result2[t].Shipping_Distance,
                                                    Order_Journey_Time: Result2[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result2[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        p++;
                                    }
                                } else if (CollectionArray[1] == "customers" || CollectionArray[1] == "Customers" || CollectionArray[1] == "CUSTOMERS" || CollectionArray[1] == "customer" || CollectionArray[1] == "Customer" || CollectionArray[1] == "CUSTOMER") {
                                    Result = CustomerSearchDataFunction.sync(null, KeyArray[0]);
                                    console.log("Customer Length " + Result.length);
                                    var p = 0;
                                    var pickAddress;
                                    var dropAddress;
                                    var event_length;
                                    for (var i = 0; i < Result.length; i++) {
                                        var t = 0;
                                        if (KeyArray.length == 1) {
                                            var Result2 = OrderCustomerFunction.sync(null, Result[p]);
                                        } else if (KeyArray.length == 3) {
                                            console.log("customers date");
                                            var Result2 = OrderCustomerFunction_Dates.sync(null, Result[p], KeyArray);
                                        } else {
                                            var Result2 = [];
                                        }
                                        for (var j = 0; j < Result2.length; j++) {
                                            var Result3 = CustomerDataFunction.sync(null, Result2[t]);
                                            if (Result3 != null) {
                                                if (Result2[t].orderType == 1) {
                                                    pickAddress = Result2[t].pickAddress;
                                                    dropAddress = Result2[t].dropAddress;
                                                } else if (Result2[t].orderType == 2) {
                                                    event_length = Result2[t].eventLog.length;
                                                    pickAddress = Result2[t].address1 + ' ' + Result2[t].address2;
                                                    dropAddress = Result2[t].eventLog[event_length - 1].address;
                                                }
                                                // var DeviceType = GetDeviceType(Result2[t].Devices.DeviceType);

                                                OrderData.push({
                                                    Name: Result3.First_name,
                                                    Email: Result3.Email,
                                                    Phone: Result3.Phone,
                                                    DeviceType: GetDeviceType(Result2[t].Devices.DeviceType),
                                                    Date: Result2[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result2[t].status)],
                                                    orderId: Result2[t]._id,
                                                    orderseqId: Result2[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result2[t].orderType)],
                                                    due_datetime: Result2[t].due_datetime,
                                                    CustomerID: Result2[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result2[t].pickLocation.Latitude,
                                                    pickLongitude: Result2[t].pickLocation.Longitude,
                                                    dropLatitude: Result2[t].dropLocation.Latitude,
                                                    dropLongitude: Result2[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result2[t].paymentType)],
                                                    itemDescription: Result2[t].itemDescription,
                                                    receiverName: Result2[t].receiverName,
                                                    receiverPhone: Result2[t].receiverPhone,
                                                    itemName: Result2[t].itemName,
                                                    deliverycharge: Result2[t].deliverycharge,
                                                    Shipping_Distance: Result2[t].Shipping_Distance,
                                                    Order_Journey_Time: Result2[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result2[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        p++;
                                    }
                                } else {

                                }
                                ResultData = OrderData;
                                break;
                            default:
                                console.log("orders from default");
                                var Result = OrderDataFunction.sync(null, KeyArray[0]);
                                var OrderData = [];
                                var t = 0;
                                var pickAddress;
                                var dropAddress;
                                var event_length;
                                for (var i = 0; i < Result.length; i++) {
                                    var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                    if (Result2 != null) {
                                        if (Result[t].orderType == 1) {
                                            pickAddress = Result[t].pickAddress;
                                            dropAddress = Result[t].dropAddress;
                                        } else if (Result[t].orderType == 2) {
                                            event_length = Result[t].eventLog.length;
                                            pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                            dropAddress = Result[t].eventLog[event_length - 1].address;
                                        }
                                        // var DeviceType = GetDeviceType(Result2[t].Devices.DeviceType);

                                        OrderData.push({
                                            Name: Result2.First_name,
                                            Email: Result2.Email,
                                            Phone: Result2.Phone,
                                            DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                            Date: Result[t].order_datetime,
                                            status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                            orderId: Result[t]._id,
                                            orderseqId: Result[t].orderseqId,
                                            orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                            due_datetime: Result[t].due_datetime,
                                            CustomerID: Result[t].userId,
                                            pickAddress: pickAddress,
                                            dropAddress: dropAddress,
                                            pickLatitude: Result[t].pickLocation.Latitude,
                                            pickLongitude: Result[t].pickLocation.Longitude,
                                            dropLatitude: Result[t].dropLocation.Latitude,
                                            dropLongitude: Result[t].dropLocation.Longitude,
                                            paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                            itemDescription: Result[t].itemDescription,
                                            receiverName: Result[t].receiverName,
                                            receiverPhone: Result[t].receiverPhone,
                                            itemName: Result[t].itemName,
                                            deliverycharge: Result[t].deliverycharge,
                                            Shipping_Distance: Result[t].Shipping_Distance,
                                            Order_Journey_Time: Result[t].Order_Journey_Time,
                                            bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                        });
                                        t++;
                                    } else {
                                        t++;
                                    }
                                }
                                ResultData = OrderData;

                        }
                        break;
                    case "today":
                    case "Today":
                    case "TODAY":
                        switch (keyLength) {
                            case 0:
                                var Result = OrderDataFunction_Today.sync(null);
                                var OrderData = [];
                                var t = 0;
                                var pickAddress;
                                var dropAddress;
                                var event_length;
                                for (var i = 0; i < Result.length; i++) {
                                    var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                    if (Result2 != null) {
                                        if (Result[t].orderType == 1) {
                                            pickAddress = Result[t].pickAddress;
                                            dropAddress = Result[t].dropAddress;
                                        } else if (Result[t].orderType == 2) {
                                            event_length = Result[t].eventLog.length;
                                            pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                            dropAddress = Result[t].eventLog[event_length - 1].address;
                                        }
                                        OrderData.push({
                                            Name: Result2.First_name,
                                            Email: Result2.Email,
                                            Phone: Result2.Phone,

                                            Date: Result[t].order_datetime,
                                            status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                            DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                            orderId: Result[t]._id,
                                            orderseqId: Result[t].orderseqId,
                                            orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                            due_datetime: Result[t].due_datetime,
                                            CustomerID: Result[t].userId,
                                            pickAddress: pickAddress,
                                            dropAddress: dropAddress,
                                            pickLatitude: Result[t].pickLocation.Latitude,
                                            pickLongitude: Result[t].pickLocation.Longitude,
                                            dropLatitude: Result[t].dropLocation.Latitude,
                                            dropLongitude: Result[t].dropLocation.Longitude,
                                            paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                            itemDescription: Result[t].itemDescription,
                                            receiverName: Result[t].receiverName,
                                            receiverPhone: Result[t].receiverPhone,
                                            itemName: Result[t].itemName,
                                            deliverycharge: Result[t].deliverycharge,
                                            Shipping_Distance: Result[t].Shipping_Distance,
                                            Order_Journey_Time: Result[t].Order_Journey_Time,
                                            bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                        });
                                        t++;
                                    } else {
                                        t++;
                                    }
                                }
                                ResultData = OrderData;
                                break;
                            case 1:
                                switch (KeyArray[0]) {
                                    case "accepted":
                                    case "Accepted":
                                    case "ACCEPTED":
                                        console.log("Orders Accepted Today Entering");
                                        var Result = OrderDataFunction_Today_Accepted.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "arrived_at_shop":
                                    case "Arrived_At_Shop":
                                    case "ARRIVED_AT_SHOP":
                                        console.log("Orders arrived_At_shop Today Entering");
                                        var Result = OrderDataFunction_Today_Arrived_At_Shop.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "order_picked":
                                    case "Order_Picked":
                                    case "ORDER_PICKED":
                                        console.log("Orders Order_Picked Today Entering");
                                        var Result = OrderDataFunction_Today_Order_Picked.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "Order_Reached_At_Delivery":
                                    case "order_reached_at_delivery":
                                        console.log("Orders Order_Reached_At_Delivery Today Entering");
                                        var Result = OrderDataFunction_Today_Order_Reached_At_Delivery.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "Order_Dropped_At_Delivery":
                                    case "order_dropped_at_delivery":
                                        console.log("Orders Order_Reached_At_Delivery Today Entering");
                                        var Result = OrderDataFunction_Today_Order_Dropped_At_Delivery.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "Driver_On_Way_To_Pickup":
                                    case "driver_on_way_to_pickup":
                                        console.log("Orders Driver_On_Way_To_Pickup Today Entering");
                                        var Result = OrderDataFunction_Today_Driver_on_Way_To_Pickup.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "rejected":
                                    case "Rejected":
                                    case "REJECTED":
                                        console.log("Orders Rejected Today Entering");
                                        var Result = OrderDataFunction_Today_Rejected.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "completed":
                                    case "complete":
                                    case "Completed":
                                    case "Complete":
                                    case "COMPLETED":
                                    case "COMPLETE":
                                    case "finish":
                                    case "Finish":
                                    case "FINISH":
                                        console.log("Orders Completed Today Entering");
                                        var Result = OrderDataFunction_Today_Completed.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "cancel":
                                    case "Cancel":
                                    case "CANCEL":
                                    case "cancelled":
                                    case "Cancelled":
                                    case "CANCELLED":
                                        console.log("Orders Cancelled Today Entering");
                                        var Result = OrderDataFunction_Today_Cancelled.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    case "new":
                                    case "New":
                                    case "NEW":
                                    case "latest":
                                    case "Latest":
                                    case "LATEST":
                                        console.log("Orders NEW Today Entering");
                                        var Result = OrderDataFunction_Today_NEW.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                    default:
                                        console.log("Orders Today Default Entering");
                                        var Result = OrderDataFunction_Today.sync(null);
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                }
                                break;
                            default:
                                console.log("Orders Today Default Entering more than 1 key values");
                                var Result = OrderDataFunction_Today.sync(null);
                                var OrderData = [];
                                var t = 0;
                                var pickAddress;
                                var dropAddress;
                                var event_length;
                                for (var i = 0; i < Result.length; i++) {
                                    var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                    if (Result2 != null) {
                                        if (Result[t].orderType == 1) {
                                            pickAddress = Result[t].pickAddress;
                                            dropAddress = Result[t].dropAddress;
                                        } else if (Result[t].orderType == 2) {
                                            event_length = Result[t].eventLog.length;
                                            pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                            dropAddress = Result[t].eventLog[event_length - 1].address;
                                        }
                                        OrderData.push({
                                            Name: Result2.First_name,
                                            Email: Result2.Email,
                                            Phone: Result2.Phone,

                                            Date: Result[t].order_datetime,
                                            status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                            DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                            orderId: Result[t]._id,
                                            orderseqId: Result[t].orderseqId,
                                            orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                            due_datetime: Result[t].due_datetime,
                                            CustomerID: Result[t].userId,
                                            pickAddress: pickAddress,
                                            dropAddress: dropAddress,
                                            pickLatitude: Result[t].pickLocation.Latitude,
                                            pickLongitude: Result[t].pickLocation.Longitude,
                                            dropLatitude: Result[t].dropLocation.Latitude,
                                            dropLongitude: Result[t].dropLocation.Longitude,
                                            paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                            itemDescription: Result[t].itemDescription,
                                            receiverName: Result[t].receiverName,
                                            receiverPhone: Result[t].receiverPhone,
                                            itemName: Result[t].itemName,
                                            deliverycharge: Result[t].deliverycharge,
                                            Shipping_Distance: Result[t].Shipping_Distance,
                                            Order_Journey_Time: Result[t].Order_Journey_Time,
                                            bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                        });
                                        t++;
                                    } else {
                                        t++;
                                    }
                                }
                                ResultData = OrderData;
                        }
                        break;
                    case "between":
                    case "Between":
                    case "BETWEEN":
                        console.log("Entering between");

                        switch (ConditionLength) {
                            case 1:
                                var Result = OrderDataFunction_Between.sync(null, KeyArray);
                                var OrderData = [];
                                var t = 0;
                                var pickAddress;
                                var dropAddress;
                                var event_length;
                                for (var i = 0; i < Result.length; i++) {
                                    var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                    if (Result2 != null) {
                                        if (Result[t].orderType == 1) {
                                            pickAddress = Result[t].pickAddress;
                                            dropAddress = Result[t].dropAddress;
                                        } else if (Result[t].orderType == 2) {
                                            event_length = Result[t].eventLog.length;
                                            pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                            dropAddress = Result[t].eventLog[event_length - 1].address;
                                        }
                                        OrderData.push({
                                            Name: Result2.First_name,
                                            Email: Result2.Email,
                                            Phone: Result2.Phone,

                                            Date: Result[t].order_datetime,
                                            status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                            DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                            orderId: Result[t]._id,
                                            orderseqId: Result[t].orderseqId,
                                            orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                            due_datetime: Result[t].due_datetime,
                                            CustomerID: Result[t].userId,
                                            pickAddress: pickAddress,
                                            dropAddress: dropAddress,
                                            pickLatitude: Result[t].pickLocation.Latitude,
                                            pickLongitude: Result[t].pickLocation.Longitude,
                                            dropLatitude: Result[t].dropLocation.Latitude,
                                            dropLongitude: Result[t].dropLocation.Longitude,
                                            paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                            itemDescription: Result[t].itemDescription,
                                            receiverName: Result[t].receiverName,
                                            receiverPhone: Result[t].receiverPhone,
                                            itemName: Result[t].itemName,
                                            deliverycharge: Result[t].deliverycharge,
                                            Shipping_Distance: Result[t].Shipping_Distance,
                                            Order_Journey_Time: Result[t].Order_Journey_Time,
                                            bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                        });
                                        t++;
                                    } else {
                                        t++;
                                    }
                                }
                                ResultData = OrderData;
                                break;
                            case 2:
                                switch (ConditionArray[1]) {
                                    case "status":
                                    case "Status":
                                    case "STATUS":
                                        console.log("entering  between Status");
                                        var Result;
                                        if (KeyArray[2] == 'new' || KeyArray[2] == 'New' || KeyArray[2] == 'NEW') {
                                            Result = OrderDataFunction_Between_New.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'accepted' || KeyArray[2] == 'Accepted' || KeyArray[2] == 'ACCEPTED') {
                                            Result = OrderDataFunction_Between_Accepted.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'arrived_at_shop' || KeyArray[2] == 'Arrived_At_Shop') {
                                            Result = OrderDataFunction_Between_Arrived_At_Shop.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'order_picked' || KeyArray[2] == 'Order_Picked') {
                                            Result = OrderDataFunction_Between_Order_Picked.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'Order_Reached_At_Delivery' || KeyArray[2] == 'order_reached_at_delivery') {
                                            Result = OrderDataFunction_Between_Reached_At_Delivery.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'Order_Dropped_At_Delivery' || KeyArray[2] == 'order_dropped_at_delivery') {
                                            Result = OrderDataFunction_Between_Order_Dropped_At_Delivery.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'Driver_On_Way_To_Pickup' || KeyArray[2] == 'driver_on_way_to_pickup') {
                                            Result = OrderDataFunction_Between_Driver_on_Way_To_Pickup.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'rejected' || KeyArray[2] == 'Rejected' || KeyArray[2] == 'REJECTED') {
                                            Result = OrderDataFunction_Between_Rejected.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'completed' || KeyArray[2] == 'Completed' || KeyArray[2] == 'COMPLETED') {
                                            Result = OrderDataFunction_Between_Completed.sync(null, KeyArray);
                                        } else if (KeyArray[2] == 'cancelled' || KeyArray[2] == 'Cancelled' || KeyArray[2] == 'CANCELLED') {
                                            Result = OrderDataFunction_Between_Cancelled.sync(null, KeyArray);
                                        }
                                        var OrderData = [];
                                        var t = 0;
                                        var pickAddress;
                                        var dropAddress;
                                        var event_length;
                                        for (var i = 0; i < Result.length; i++) {
                                            var Result2 = CustomerDataFunction.sync(null, Result[t]);
                                            if (Result2 != null) {
                                                if (Result[t].orderType == 1) {
                                                    pickAddress = Result[t].pickAddress;
                                                    dropAddress = Result[t].dropAddress;
                                                } else if (Result[t].orderType == 2) {
                                                    event_length = Result[t].eventLog.length;
                                                    pickAddress = Result[t].address1 + ' ' + Result[t].address2;
                                                    dropAddress = Result[t].eventLog[event_length - 1].address;
                                                }
                                                OrderData.push({
                                                    Name: Result2.First_name,
                                                    Email: Result2.Email,
                                                    Phone: Result2.Phone,

                                                    Date: Result[t].order_datetime,
                                                    status: OrderStatusNumberArray[parseInt(Result[t].status)],
                                                    DeviceType: GetDeviceType(Result[t].Devices.DeviceType),
                                                    orderId: Result[t]._id,
                                                    orderseqId: Result[t].orderseqId,
                                                    orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                                    due_datetime: Result[t].due_datetime,
                                                    CustomerID: Result[t].userId,
                                                    pickAddress: pickAddress,
                                                    dropAddress: dropAddress,
                                                    pickLatitude: Result[t].pickLocation.Latitude,
                                                    pickLongitude: Result[t].pickLocation.Longitude,
                                                    dropLatitude: Result[t].dropLocation.Latitude,
                                                    dropLongitude: Result[t].dropLocation.Longitude,
                                                    paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                                    itemDescription: Result[t].itemDescription,
                                                    receiverName: Result[t].receiverName,
                                                    receiverPhone: Result[t].receiverPhone,
                                                    itemName: Result[t].itemName,
                                                    deliverycharge: Result[t].deliverycharge,
                                                    Shipping_Distance: Result[t].Shipping_Distance,
                                                    Order_Journey_Time: Result[t].Order_Journey_Time,
                                                    bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)]
                                                });
                                                t++;
                                            } else {
                                                t++;
                                            }
                                        }
                                        ResultData = OrderData;
                                        break;
                                }
                                break;
                        }
                        break;


                }
                break;
            case "recursive_orders":
            case "Recursive_Orders":
            case "RECURSIVE_ORDERS":
            case "recursive_order":
            case "Recursive_Order":
            case "RECURSIVE_ORDER":
                console.log("entering Recursive Orders");
                switch (ConditionArray[0]) {
                    case "from":
                    case "From":
                    case "FROM":
                        console.log("Entering from");
                        switch (ConditionLength) {
                            case 1:
                                var Result = RecursiveOrderDataFunction.sync(null, KeyArray[0]);
                                var RecursiveOrderData = [];
                                var t = 0;
                                var moment = require('moment');

                                for (var i = 0; i < Result.length; i++) {
                                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                                    RecursiveOrderData.push({
                                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                                        CustomerID: Result[t].CustomerID,
                                        CustomerName: Result[t].CustomerName,
                                        CustomerEmail: Result[t].CustomerEmail,
                                        CustomerPhone: Result[t].CustomerPhone,
                                        receiverName: Result[t].receiverName,
                                        receiverPhone: Result[t].receiverPhone,

                                        From_Date: fmdate,
                                        To_Date: todate,
                                        time: Result[t].time,
                                        orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                        pickAddress: Result[t].pickAddress,
                                        dropAddress: Result[t].dropAddress,
                                        itemName: Result[t].itemName,
                                        itemDescription: Result[t].itemDescription,
                                        bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)],
                                        paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                        deliverycharge: Result[t].deliverycharge,
                                        Subscription: Result[t].Subscription,
                                        pickLatitude: Result[t].pickLocation.Latitude,
                                        pickLongitude: Result[t].pickLocation.Longitude,
                                        dropLatitude: Result[t].dropLocation.Latitude,
                                        dropLongitude: Result[t].dropLocation.Longitude,
                                        Date: orderdate
                                    });
                                    t++;
                                }
                                ResultData = RecursiveOrderData;
                                break;
                            default:
                                console.log("recursive orders from default");
                                var Result = RecursiveOrderDataFunction.sync(null, KeyArray[0]);
                                var RecursiveOrderData = [];
                                var t = 0;
                                var moment = require('moment');

                                for (var i = 0; i < Result.length; i++) {
                                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                                    RecursiveOrderData.push({
                                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                                        CustomerID: Result[t].CustomerID,
                                        CustomerName: Result[t].CustomerName,
                                        CustomerEmail: Result[t].CustomerEmail,
                                        CustomerPhone: Result[t].CustomerPhone,
                                        receiverName: Result[t].receiverName,
                                        receiverPhone: Result[t].receiverPhone,

                                        From_Date: fmdate,
                                        To_Date: todate,
                                        time: Result[t].time,
                                        orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                        pickAddress: Result[t].pickAddress,
                                        dropAddress: Result[t].dropAddress,
                                        itemName: Result[t].itemName,
                                        itemDescription: Result[t].itemDescription,
                                        bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)],
                                        paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                        deliverycharge: Result[t].deliverycharge,
                                        Subscription: Result[t].Subscription,
                                        pickLatitude: Result[t].pickLocation.Latitude,
                                        pickLongitude: Result[t].pickLocation.Longitude,
                                        dropLatitude: Result[t].dropLocation.Latitude,
                                        dropLongitude: Result[t].dropLocation.Longitude,
                                        Date: orderdate
                                    });
                                    t++;
                                }
                                ResultData = RecursiveOrderData;
                        }
                        break;
                    case "today":
                    case "Today":
                    case "TODAY":
                        console.log("Entering today");
                        switch (ConditionLength) {
                            case 1:
                                var Result = RecursiveOrderDataFunction_Today.sync(null);
                                var RecursiveOrderData = [];
                                var t = 0;
                                var moment = require('moment');

                                for (var i = 0; i < Result.length; i++) {
                                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                                    RecursiveOrderData.push({
                                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                                        CustomerID: Result[t].CustomerID,
                                        CustomerName: Result[t].CustomerName,
                                        CustomerEmail: Result[t].CustomerEmail,
                                        CustomerPhone: Result[t].CustomerPhone,
                                        receiverName: Result[t].receiverName,
                                        receiverPhone: Result[t].receiverPhone,

                                        From_Date: fmdate,
                                        To_Date: todate,
                                        time: Result[t].time,
                                        orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                        pickAddress: Result[t].pickAddress,
                                        dropAddress: Result[t].dropAddress,
                                        itemName: Result[t].itemName,
                                        itemDescription: Result[t].itemDescription,
                                        bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)],
                                        paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                        deliverycharge: Result[t].deliverycharge,
                                        Subscription: Result[t].Subscription,
                                        pickLatitude: Result[t].pickLocation.Latitude,
                                        pickLongitude: Result[t].pickLocation.Longitude,
                                        dropLatitude: Result[t].dropLocation.Latitude,
                                        dropLongitude: Result[t].dropLocation.Longitude,
                                        Date: orderdate
                                    });
                                    t++;
                                }
                                ResultData = RecursiveOrderData;
                                break;
                            default:
                                console.log("recursive orders between default");
                                var Result = RecursiveOrderDataFunction_Today.sync(null);
                                var RecursiveOrderData = [];
                                var t = 0;
                                var moment = require('moment');

                                for (var i = 0; i < Result.length; i++) {
                                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                                    RecursiveOrderData.push({
                                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                                        CustomerID: Result[t].CustomerID,
                                        CustomerName: Result[t].CustomerName,
                                        CustomerEmail: Result[t].CustomerEmail,
                                        CustomerPhone: Result[t].CustomerPhone,
                                        receiverName: Result[t].receiverName,
                                        receiverPhone: Result[t].receiverPhone,

                                        From_Date: fmdate,
                                        To_Date: todate,
                                        time: Result[t].time,
                                        orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                        pickAddress: Result[t].pickAddress,
                                        dropAddress: Result[t].dropAddress,
                                        itemName: Result[t].itemName,
                                        itemDescription: Result[t].itemDescription,
                                        bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)],
                                        paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                        deliverycharge: Result[t].deliverycharge,
                                        Subscription: Result[t].Subscription,
                                        pickLatitude: Result[t].pickLocation.Latitude,
                                        pickLongitude: Result[t].pickLocation.Longitude,
                                        dropLatitude: Result[t].dropLocation.Latitude,
                                        dropLongitude: Result[t].dropLocation.Longitude,
                                        Date: orderdate
                                    });
                                    t++;
                                }
                                ResultData = RecursiveOrderData;
                        }
                        break;
                    case "between":
                    case "Between":
                    case "BETWEEN":
                        console.log("Entering between");
                        switch (ConditionLength) {
                            case 1:
                                var Result = RecursiveOrderDataFunction_Between.sync(null, KeyArray);
                                var RecursiveOrderData = [];
                                var t = 0;
                                var moment = require('moment');

                                for (var i = 0; i < Result.length; i++) {
                                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                                    RecursiveOrderData.push({
                                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                                        CustomerID: Result[t].CustomerID,
                                        CustomerName: Result[t].CustomerName,
                                        CustomerEmail: Result[t].CustomerEmail,
                                        CustomerPhone: Result[t].CustomerPhone,
                                        receiverName: Result[t].receiverName,
                                        receiverPhone: Result[t].receiverPhone,

                                        From_Date: fmdate,
                                        To_Date: todate,
                                        time: Result[t].time,
                                        orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                        pickAddress: Result[t].pickAddress,
                                        dropAddress: Result[t].dropAddress,
                                        itemName: Result[t].itemName,
                                        itemDescription: Result[t].itemDescription,
                                        bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)],
                                        paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                        deliverycharge: Result[t].deliverycharge,
                                        Subscription: Result[t].Subscription,
                                        pickLatitude: Result[t].pickLocation.Latitude,
                                        pickLongitude: Result[t].pickLocation.Longitude,
                                        dropLatitude: Result[t].dropLocation.Latitude,
                                        dropLongitude: Result[t].dropLocation.Longitude,
                                        Date: orderdate
                                    });
                                    t++;
                                }
                                ResultData = RecursiveOrderData;
                                break;
                            default:
                                console.log("recursive orders between default");
                                var Result = RecursiveOrderDataFunction_Between.sync(null, KeyArray);
                                var RecursiveOrderData = [];
                                var t = 0;
                                var moment = require('moment');

                                for (var i = 0; i < Result.length; i++) {
                                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                                    RecursiveOrderData.push({
                                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                                        CustomerID: Result[t].CustomerID,
                                        CustomerName: Result[t].CustomerName,
                                        CustomerEmail: Result[t].CustomerEmail,
                                        CustomerPhone: Result[t].CustomerPhone,
                                        receiverName: Result[t].receiverName,
                                        receiverPhone: Result[t].receiverPhone,

                                        From_Date: fmdate,
                                        To_Date: todate,
                                        time: Result[t].time,
                                        orderType: OrderTypeNumberArray[parseInt(Result[t].orderType)],
                                        pickAddress: Result[t].pickAddress,
                                        dropAddress: Result[t].dropAddress,
                                        itemName: Result[t].itemName,
                                        itemDescription: Result[t].itemDescription,
                                        bookingType: BookingTypeNumberArray[parseInt(Result[t].bookingType)],
                                        paymentType: PaymentTypeArray[parseInt(Result[t].paymentType)],
                                        deliverycharge: Result[t].deliverycharge,
                                        Subscription: Result[t].Subscription,
                                        pickLatitude: Result[t].pickLocation.Latitude,
                                        pickLongitude: Result[t].pickLocation.Longitude,
                                        dropLatitude: Result[t].dropLocation.Latitude,
                                        dropLongitude: Result[t].dropLocation.Longitude,
                                        Date: orderdate
                                    });
                                    t++;
                                }
                                ResultData = RecursiveOrderData;
                        }
                        break;
                }
                break;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                ResultData: ResultData
            }
        }));
    })
};


/*****LIVE TRACK CUSTOMER ORDER ANYTHING*****/
// customermod.prototype.Live_Track_Order_Anything_Order = function (req, res) {
//     var me = this;
//     console.log("Entering Live Track")
//     var orderid = req.body.orderId;
//     var Order = me.Orders;
//     var async = require('async');
//     var ObjectID = require('mongodb').ObjectID;
//     orderid = new ObjectID(orderid);

//     me.Check_for_Order(req.body, function (err, OrderData) {
//         if (err) {
//             res.send(JSON.stringify(OrderData));
//         } else {
//             Order.findOne({
//                 "_id": orderid
//             }, function (err, orderdetailsObj) {
//                 async.eachSeries(orderdetailsObj.eventLog, function (item, callback) {
//                     if (item.status != "1" && item.status != "15") {
//                         driverid = new ObjectID(item.driverid);
//                         me.Drivers.findOne({
//                             _id: driverid
//                         }, function (err, driverObj) {
//                             if (!err) {
//                                 if (driverObj == null) {
//                                     callback();
//                                 } else {
//                                     item.driverName = driverObj.name + ' ' + driverObj.lname;
//                                     item.driverPhone = driverObj.phone;
//                                     item.driverlocation = driverObj.location;
//                                     item.driverImage = driverObj.profilePic;
//                                     callback();
//                                 }
//                             }
//                         })
//                     } else {
//                         callback();
//                     }
//                 }, function (err) {
//                     delete orderdetailsObj.driversLog;
//                     delete orderdetailsObj.statusLog;
//                     delete orderdetailsObj.Devices;
//                     orderdetailsObj.eventLog = orderdetailsObj.eventLog.reverse();
//                     console.log("Live Track " + parseInt(orderdetailsObj.eventLog[0].status));
//                     res.send(new me.ApiResponce({
//                         success: true,
//                         extras: {
//                             OrderDetails: orderdetailsObj
//                         }
//                     }));
//                 })

//             })
//         }
//     })
// };
customermod.prototype.Live_Track_Order_Anything_Order = function (req, res) {
    var me = this;
    console.log("Entering Live Track")
    var orderid = req.body.orderId;
    var Order = me.Orders;
    var async = require('async');
    var ObjectID = require('mongodb').ObjectID;
    orderid = new ObjectID(orderid);

    me.Check_for_Order(req.body, function (err, OrderData) {
        if (err) {
            res.send(JSON.stringify(OrderData));
        } else {
            Order.findOne({
                "_id": orderid
            }, function (err, orderdetailsObj) {
                orderdetailsObj.eventLog = orderdetailsObj.eventLog.reverse();
                var driverid;
                if (orderdetailsObj.eventLog[0].driverid == null || orderdetailsObj.eventLog[0].driverid == "") {
                    driverid = "";
                } else {
                    driverid = String(orderdetailsObj.eventLog[0].driverid);
                }
                res.send(new me.ApiResponce({
                    success: true,
                    extras: {
                        OrderDetails: orderdetailsObj,
                        driverid: driverid
                    }
                }));
            })
        }
    })
};
//Update Order Cancelled by Driver
customermod.prototype.Driver_Cancelled_Order = function (values, DriverData, callback) {
    var me = this;
    var datetime = me.DateTime();
    var querystring = require('querystring');
    var https = require('https');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'userId': values.DriverID,
        'orderId': values.orderId,
        'cancellationReason': values.cancellationReason,
        'userType': 2,
        'datetime': datetime,
    });
    var result = '';
    var options = {
        host: 'api.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/cancelorder',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log(chunk);
            str += chunk;
        });
        res.on('end', function () {
            var result = JSON.parse(str);
            if (result.errFlag == 0) {
                return callback(false, new me.ApiResponce({
                    success: true,
                    extras: {
                        Status: "Order Cancelled Successfully"
                    }
                }));
            } else if (result.errFlag == 1) {
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.You_Cant_Cancelled_this_Order
                    }
                }));
            }
        });
    });
    req.write(post_data);
    req.end();
}
//Update Order Job Completed if Mobile Fails
customermod.prototype.Update_Job_Completed_If_Mobile_Fails = function (values, DriverData, callback) {
    var me = this;
    var datetime = me.DateTime();
    var querystring = require('querystring');
    var https = require('https');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'SuperAdminComplete': true,
        'driverid': values.DriverID,
        'orderid': values.orderId,
        'status': 14,
        'datetime': datetime,
        'customerSign': '',
        'latitude': parseFloat(DriverData.location.latitude),
        'longitude': parseFloat(DriverData.location.longitude)
    });
    var result = '';
    var options = {
        host: 'api.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/updateOrderReqRes',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            str += chunk;
        });
        res.on('end', function () {
            var result = JSON.parse(str);
            return callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Order Completed Successfully"
                }
            }));
        });
    });
    req.write(post_data);
    req.end();
}

/******************************** Start of CRON jOB SCHEDULING **************************************************/
var cron = require('cron');
var uuid = require('uuid');
var async = require('async');
var moment = require('moment');
var sync = require('sync');
var Customer_Order_Name_Title_Case_Job = new cron.CronJob('*/2 * * * *', function () {
    console.log("Promotional job runned ");
    var date = new Date();
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var options = {
        host: 'superadmin.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Script_for_Title_Case_Customer_Orders',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log("Job Runned Successfully");
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Customer_Order_Name_Title_Case_Job.start();
var Store_Contacts_for_Promotional = new cron.CronJob('1 0 * * *', function () {
    console.log("Promotional job runned ");
    var date = new Date();
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var options = {
        host: 'superadmin.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Store_Contacts_for_Promotional',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log("Job Runned Successfully");
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Store_Contacts_for_Promotional.start();
var Job_for_Daily_Attendance = new cron.CronJob('0 7 * * *', function () {
    var moment = require('moment');
    var todayDate = moment().utcOffset(330).format('DD/MM/YYYY');
    var Ezshipp_Employee = require("../Models/Ezshipp_Employee.js");
    var Ezshipp_Employee_Attendance_Request = require("../Models/Ezshipp_Employee_Attendance_Request.js");
    var Ezshipp_Employee_Attendance = require("../Models/Ezshipp_Employee_Attendance.js");
    var query = {
        Status: true
    }
    Ezshipp_Employee.find(query).exec(function (err, Result) {
        if (!err) {
            async.each(Result, function (item, callback) {
                var from_moment = moment(todayDate, 'DD/MM/YYYY').subtract(330, 'minutes');
                var to_moment = moment(todayDate, 'DD/MM/YYYY').subtract(330, 'minutes').add(1, 'days');
                var nowDate = new Date();
                var LeaveQuery = {
                    EmployeeID: item.EmployeeID,
                    Request_Status: 3,
                    Request_From: {
                        $lte: nowDate
                    },
                    Request_To: {
                        $gte: nowDate
                    }
                };
                Ezshipp_Employee_Attendance_Request.findOne(LeaveQuery, function (err, LeaveStatus) {
                    if (err) {
                        console.log(err);
                    } else {
                        if (LeaveStatus != null) {
                            console.log("Employee Leave Request Exist");
                            callback();
                        } else if (LeaveStatus == null) {
                            var CheckQuery = {
                                EmployeeID: item.EmployeeID,
                                Attendance_Date: {
                                    $gte: from_moment,
                                    $lt: to_moment
                                }
                            }
                            Ezshipp_Employee_Attendance.findOne(CheckQuery, function (err, AttendanceStatus) {
                                if (err || AttendanceStatus != null) {
                                    console.log(err);
                                    console.log("Employee Attendance Already Exist");
                                    callback();
                                } else {
                                    console.log("Employee Attendance Not Found");
                                    var AttendanceID = uuid();
                                    var date = new Date();
                                    var Attendance_Date = new Date();
                                    var AttendanceData = new Ezshipp_Employee_Attendance({
                                        AttendanceID: AttendanceID,
                                        Ezshipp_BranchID: item.Ezshipp_BranchID,
                                        Ezshipp_Branch_Name: item.Ezshipp_Branch_Name,
                                        Employee_Role: item.Employee_Role,
                                        EmployeeID: item.EmployeeID,
                                        Employee_Company_ID: item.Employee_Company_ID,
                                        Employee_Name: item.Employee_Name,
                                        Employee_PhoneNumber: item.Employee_PhoneNumber,
                                        Employee_Email: item.Employee_Email,
                                        Attendance_Date: Attendance_Date,
                                        created_at: date,
                                        updated_at: date
                                    })
                                    AttendanceData.save(function (err, Result) {
                                        console.log(Result);
                                        if (err) {
                                            console.log(err);
                                            callback();
                                        } else {
                                            console.log("Employee Attendance Placed ->" + item.Ezshipp_Branch_Name);
                                            callback();
                                        }
                                    });
                                }
                            })
                        }
                    }
                })
            }, function (err) {
                if (!err) {
                    console.log("All Attendance Functionality Completed Successfully");
                }
            })
        }
    })
}, null, true, 'Asia/Kolkata');
Job_for_Daily_Attendance.start();
var All_Store_Today_Avaiable_True = new cron.CronJob('1 0 * * *', function () {
    var Store_Branch = require("../Models/Store_Branch.js");
    Store_Branch.update({}, { $set: { Today_Working: true } }, { multi: true }).exec(function (err, Result) {
        if (err) {
            console.log(err);
        } else {
            if (Result) {
                console.log('Cron Job Updated Successfully');
            }
        }
    })
}, null, true, 'Asia/Kolkata');
All_Store_Today_Avaiable_True.start();
var RecursiveJobScheduling = new cron.CronJob('1 */1 * * *', function () {
    var date = new Date();
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var options = {
        host: config.website,
        port: 443,
        method: 'POST',
        path: '/Recursive_Ordering',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            var result = JSON.parse(chunk);
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
RecursiveJobScheduling.start();
var Shipping_Distance_Job_New = new cron.CronJob('* * * * *', function () {
    var date = new Date();
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var result = '';
    var options = {
        host: 'api.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Script_for_Storing_Order_Shipping_Distance_new',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log(chunk);
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Shipping_Distance_Job_New.start();
var Monthly_Invoicing_Premium_Customer = new cron.CronJob('0 7 1 * *', function () {
    var customermod = require('../CoreModules/customermod.js'); // Setting the Path for Customer Modules
    var CustomerMod = new customermod();
    var Customers = require('../Models/Customers.js');
    var Orders = require('../Models/Orders.js');
    var Counters = require('../Models/Counters.js');
    var Customer_Invoicing = require('../Models/Customer_Invoicing.js');
    var date = new Date();
    var sync = require('sync');
    var async = require('async');
    var moment = require('moment');
    var uuid = require('uuid');
    var config = require("../Config/config.js");
    var Config = require("../Config/config.js");
    var mailgun = require('mailgun-js')({ apiKey: config.mailgun.api_key, domain: config.mailgun.domain });
    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    function PremiumCustomerCollection(callback) {
        process.nextTick(function () {
            var premiumquery = {
                acc_status: 1,
                Verify: 0,
                Premium_User: true,
                Premium_Status: true,
                Monthly_Invoice: true
            };
            Customers.find(premiumquery).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    var from_date = moment().subtract(1, 'month').startOf("month").subtract(330, 'minutes');
    var to_date = moment().subtract(1, 'month').endOf("month").subtract(330, 'minutes');

    console.log(from_date.toDate());
    console.log(to_date.toDate());
    function OrderCountFunction(CustomerData, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                status: 14,
                userId: String(CustomerData._id),
                Date: {
                    $gte: from_date,
                    $lte: to_date
                }
            };
            console.log(query);
            Orders.count(query).sort({
                Date: -1
            }).exec(function (err, Count) {
                callback(null, Count);
            })
        })
    }
    function OrderDataFunction(CustomerData, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                status: 14,
                userId: String(CustomerData._id),
                Date: {
                    $gte: from_date,
                    $lte: to_date
                }
            };
            console.log(query);
            Orders.find(query).sort({
                Date: -1
            }).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function StoreInvoiceData(CustomerData, callback) {
        process.nextTick(function () {
            Counters.findOneAndUpdate({
                _id: "invoice"
            }, {
                    $set: {
                        _id: "invoice"
                    },
                    $inc: {
                        "seq": 1
                    }
                }, {
                    upsert: true,
                    returnNewDocument: true
                }).exec(function (err, Result) {
                    var InvoiceNumber = parseInt(Result.seq) + 1;
                    var CustomerInvoiceID = uuid();
                    var ProcessStage = 1;
                    date = new Date();
                    var from_date1 = moment().subtract(1, 'month').startOf("month").subtract(330, 'minutes');
                    var to_date1 = moment().subtract(1, 'month').endOf("month").subtract(330, 'minutes');
                    console.log(from_date1)
                    console.log(to_date1)
                    Customer_Invoice_Data = new Customer_Invoicing({
                        CustomerInvoiceID: CustomerInvoiceID,
                        CustomerName: CustomerData.First_name,
                        CustomerPhone: CustomerData.Phone,
                        CustomerID: String(CustomerData._id),
                        from_date: from_date1.utcOffset(330),
                        to_date: to_date1.utcOffset(330),
                        InvoiceNumber: InvoiceNumber,
                        ProcessStage: ProcessStage,
                        created_at: date,
                        updated_at: date
                    });
                    Customer_Invoice_Data.save(function (err, InvoiceData) {
                        if (err) {
                            console.log(err);
                            callback(null, {})
                        } else {
                            console.log(InvoiceData)
                            callback(null, InvoiceData);
                        }
                    })
                })
        })
    }
    function Converting_PDF(values, CustomerData, InvoiceData, callback) {
        process.nextTick(function () {
            var Result = values;
            var Total_Delivery_Calculated_Price_Month = 0;
            var Total_Delivery_Price;
            var t = 0;
            console.log("Entering the pdf processing");
            var headdata;
            var rowdata = '';
            var CustomerName = CustomerData.First_name;
            var CustomerAddress;
            var Last_Template;
            var fname = generateFilename();

            function Address_Shortning(string) {
                string = string.replace(/\s\s+/g, ' ');
                string = string.replace(/  +/g, ' ');
                string = string.replace(/^ /, '');
                string = string.replace(/\s\s*$/, '');
                string = string.replace(', Hyderabad, Telangana, India', '');
                string = string.replace(', Telangana, India', '');
                string = string.replace(', India', '');
                string = string.replace('Hyderabad, Telangana, India', '');
                string = string.replace('Telangana, India', '');
                string = string.replace('Hyderabad,', '');
                string = string.replace('Telangana,', '');
                string = string.replace('Hyderabad', '');
                string = string.replace('Telangana', '');
                string = string.replace('India', '');
                string = string.replace(/,,+/g, ',');
                string = string.replace(/^,/, '');
                string = string.replace(/\s\s+/g, ' ');
                string = string.replace(/  +/g, ' ');
                string = string.replace(/^ /, '');
                string = string.replace(/\s\s*$/, '');
                string = titleString(string);
                function titleString(str) {
                    var myArr = str.toLowerCase().split(" ");
                    for (var a = 0; a < myArr.length; a++) {
                        myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
                    }
                    return myArr.join(" ");
                }
                return string
            }
            if (CustomerData.Default_Pickup_Location_Exist == true) {
                var moment = require('moment');

                CustomerAddress = Address_Shortning(CustomerData.Default_Pickup_Address);
                Last_Template = '    <table style="width: 518px;margin-top: 15px;">' +
                    '        <tr>' +
                    '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
                    '                        * All the orders picked from <span style="color:#504026;">' + CustomerAddress + '</span>' +
                    '                </td>' +
                    '            </tr>' +
                    '        <tr>' +
                    '            <td style="font-style: italic;text-align: center;">' +
                    '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
                    '                have any concerns/suggestions on the service' +
                    '            </td>' +
                    '        </tr>' +
                    '    </table>';
                for (var i = 0; i < values.length; i++) {
                    console.log(3);
                    var Order_DateTime = moment(values[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                    var Order_Accepted_Time = moment(values[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Completed_Time = moment(values[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Journey_Time = values[t].Order_Journey_Time;
                    console.log(4);
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        console.log(5);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '</tr>';
                    } else {
                        console.log(6);
                        var deliverycharge;
                        if (CustomerData.Premium_Pricing_Set == true) {
                            if (values[t].bookingType == 1) {
                                deliverycharge = CustomerData.Premium_Instant_Pricing;
                            } else if (values[t].bookingType == 2) {
                                deliverycharge = CustomerData.Premium_4hours_Pricing;
                            } else if (values[t].bookingType == 3) {
                                deliverycharge = CustomerData.Premium_Same_Day_Pricing;
                            }
                        } else {
                            deliverycharge = parseFloat(values[t].deliverycharge);
                        }
                        Total_Delivery_Calculated_Price_Month += parseFloat(deliverycharge);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + deliverycharge + ' </span></td>' +
                            '</tr>';
                    }
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        Total_Delivery_Price = CustomerData.Flat_Monthly_Price;
                        console.log(7);
                    } else {
                        Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;
                        console.log(8);
                    }
                    t++;
                }
            } else {
                var moment = require('moment');
                CustomerAddress = '<br><br>';
                Last_Template = '    <table style="width: 518px;margin-top: 15px;">' +
                    '        <!-- <tr>' +
                    '                <td style="font-style: italic;text-align: center;padding-bottom: 8px;">' +
                    '                        Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you have any concerns/suggestions on the service' +
                    '                </td>' +
                    '            </tr> -->' +
                    '        <tr>' +
                    '            <td style="font-style: italic;text-align: center;">' +
                    '                Thank you for your business. Please pay within the due date, we expect the more business from you, please call us if you' +
                    '                have any concerns/suggestions on the service' +
                    '            </td>' +
                    '        </tr>' +
                    '    </table>';
                for (var i = 0; i < values.length; i++) {
                    console.log(3);
                    var Order_DateTime = moment(values[t].Date).utcOffset(330).format('MMMM Do YYYY, h:mm:ss a');
                    var Order_Accepted_Time = moment(values[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Completed_Time = moment(values[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                    var Order_Journey_Time = values[t].Order_Journey_Time;
                    console.log(4);
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        console.log(5);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Pickup Address</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].pickAddress) + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '</tr>';
                    } else {
                        console.log(6);
                        var deliverycharge;
                        if (CustomerData.Premium_Pricing_Set == true) {
                            if (values[t].bookingType == 1) {
                                deliverycharge = CustomerData.Premium_Instant_Pricing;
                            } else if (values[t].bookingType == 2) {
                                deliverycharge = CustomerData.Premium_4hours_Pricing;
                            } else if (values[t].bookingType == 3) {
                                deliverycharge = CustomerData.Premium_Same_Day_Pricing;
                            }
                        } else {
                            deliverycharge = parseFloat(values[t].deliverycharge);
                        }
                        Total_Delivery_Calculated_Price_Month += parseFloat(deliverycharge);
                        headdata = '<tr>' +
                            '<td class="cell0"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Order ID</span></td>' +
                            '<td class="cell1"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;">  Date</span></td>' +
                            '<td class="cell2"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Pickup Address</span></td>' +
                            '<td class="cell3"><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:12px;"> Drop Address</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Distance</span></td>' +
                            '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Duration</span></td>' +
                            '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;"> </span><span style="color:#FFFFFF;font-family:Arial;font-size:12px;line-height:16px;">Charge</span></td>' +
                            '</tr>';
                        rowdata += '<tr>' +
                            '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + values[t].orderseqId + '</span></td>' +
                            '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Order_DateTime + '</span></td>' +
                            '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].pickAddress) + '</span></td>' +
                            '<td class="cell8"> <span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + Address_Shortning(values[t].dropAddress) + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Shipping_Distance + '</span></td>' +
                            '<td class="cell9"><span style="color:#000000;font-family:Arial;font-size:10px;line-height:10px;"> ' + values[t].Order_Journey_Time + '</span></td>' +
                            '<td class="cell10"><span style="margin-right:2px;color:#000000;font-family:Arial;font-size:10px;line-height:10px;">' + deliverycharge + ' </span></td>' +
                            '</tr>';
                    }
                    if (CustomerData.Flat_Monthly_Price_Available == true) {
                        Total_Delivery_Price = CustomerData.Flat_Monthly_Price;
                        console.log(7);
                    } else {
                        Total_Delivery_Price = Total_Delivery_Calculated_Price_Month;
                        console.log(8);
                    }
                    t++;
                }
            }
            console.log(1);
            var moment = require('moment');
            var currentDateTime = moment().utcOffset(330).format('DD/MM/YY h:mm A');
            var due_date = moment().utcOffset(330).add(9, 'days').format('DD/MM/YYYY');
            var due_date_mail = moment().utcOffset(330).add(9, 'days').format('Do MMMM, YYYY');
            var Phone = CustomerData.Phone;
            var InvoiceNumber = InvoiceData.InvoiceNumber;
            var CustomerNo = CustomerData.customerseqId;
            console.log(2);
            var script = '<script>' +
                'function myFunction() {' +
                'var elmnt = document.getElementById("Table2");' +
                'var txt =  elmnt.offsetHeight;' +
                'var newheight = txt + 350;' +
                'var otherheight = txt+400;' +
                '    var something = document.getElementById("Table3");' +
                '    something.style.top = newheight+"px";' +
                '    var otherthing = document.getElementById("wb_Text6");' +
                '    otherthing.style.top = otherheight+"px"; ' +
                '}' +
                '</script>';
            var html = '<!doctype html>' +
                '<html>' +
                '<head>' +
                script +
                '    <meta charset="utf-8">' +
                '    <style>' +
                '        a {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        a:visited {' +
                '            color: #800080;' +
                '        }' +
                '' +
                '        a:active {' +
                '            color: #FF0000;' +
                '        }' +
                '' +
                '        a:hover {' +
                '            color: #0000FF;' +
                '            text-decoration: underline;' +
                '        }' +
                '' +
                '        h1 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 32px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h2 {' +
                '            font-family: Arial;' +
                '            font-weight: bold;' +
                '            font-size: 27px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h3 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 24px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h4 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 21px;' +
                '            font-style: italic;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h5 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 19px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        h6 {' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #000000;' +
                '            background-color: transparent;' +
                '            margin: 0px 0px 0px 0px;' +
                '            padding: 0px 0px 0px 0px;' +
                '            display: inline;' +
                '        }' +
                '' +
                '        .CustomStyle {' +
                '            font-family: "Courier New";' +
                '            font-weight: bold;' +
                '            font-size: 16px;' +
                '            font-style: normal;' +
                '            text-decoration: none;' +
                '            color: #2E74B5;' +
                '            background-color: transparent;' +
                '        }' +
                '' +
                '        body {' +
                '            background-color: #FFFFFF;' +
                '            color: #000000;' +
                '            font-family: Arial;' +
                '            font-weight: normal;' +
                '            font-size: 13px;' +
                '            line-height: 1.1875;' +
                '            margin: 0;' +
                '            padding: 0;' +
                '        }' +
                '' +
                '        #wb_Text1 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text1 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text2 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text3 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text4 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text5 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #Table1 {' +
                '            border: 0px #C0C0C0 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: separate;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table1 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table1 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table1 .cell0 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: top;' +
                '            width: 62px;' +
                '            height: 14px;' +
                '        }' +
                '' +
                '        #Table1 .cell1 {' +
                '            background-color: #e57373;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 14px;' +
                '            color: #FFF;' +
                '        }' +
                '' +
                '        #Table1 .cell2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 14px;' +
                '        }' +
                '' +
                '        #Table1 .cell3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: top;' +
                '            width: 62px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table1 .cell4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table2 {' +
                '            border: 1px #000000 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: collapse;' +
                '            border-spacing: 0px;' +
                '        }' +
                '' +
                '        #Table2 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table2 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table2 .cell0 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell1 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell2 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell3 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell4 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table2 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 64px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 102px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 116px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell9 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: center;' +
                '            vertical-align: middle;' +
                '            width: 54px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table2 .cell10 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 1px #000000 solid;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                'margin-right:5px;' +
                '            width: 60px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 {' +
                '            border: 0px #C0C0C0 solid;' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border-collapse: separate;' +
                '            border-spacing: 1px;' +
                '        }' +
                '' +
                '        #Table3 td {' +
                '            padding: 0px 0px 0px 0px;' +
                '        }' +
                '' +
                '        #Table3 td div {' +
                '            white-space: nowrap;' +
                '        }' +
                '' +
                '        #Table3 .cell0 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell1 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell2 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Table3 .cell3 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell4 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell5 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 18px;' +
                '        }' +
                '' +
                '        #Table3 .cell6 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 66px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: left;' +
                '            vertical-align: middle;' +
                '            width: 20px;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 20px;' +
                '        }' +
                '' +
                '        #Table3 .cell9 {' +
                '            background-color: #705137;' +
                '            background-image: none;' +
                '            text-align: right;' +
                '            vertical-align: middle;' +
                '            height: 24px;' +
                '        }' +
                '' +
                '        #Line1 {' +
                '            border-width: 0;' +
                '            height: 78px;' +
                '            width: 8px;' +
                '        }' +
                '' +
                '        #wb_Text7 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text7 div {' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #Image1 {' +
                '            border: 0px #000000 solid;' +
                '            padding: 0px 0px 0px 0px;' +
                '            left: 0;' +
                '            top: 0;' +
                '            width: 100%;' +
                '            height: 100%;' +
                '        }' +
                '' +
                '        #wb_Text8 {' +
                '            background-color: transparent;' +
                '            background-image: none;' +
                '            border: 0px #000000 solid;' +
                '            padding: 0;' +
                '            margin: 0;' +
                '            text-align: left;' +
                '        }' +
                '' +
                '        #wb_Text8 div {' +
                '            text-align: left;' +
                '        }' +
                '    </style>' +
                '</head>' +
                '<body onload="myFunction()">' +
                '    <table style="margin-left:10px;">' +
                '        <tr>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" id="Image1" alt="" style="width: 90%;"></div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <img src="https://s3.amazonaws.com/ezshippimages/line.png" id="Line1" alt="">' +
                '                </div>' +
                '            </td>' +
                '            <td>' +
                '                <div>' +
                '                    <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span>' +
                '                </div>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '    <br>' +
                '    <table style="margin-left:10px;width: 518px;">' +
                '        <tr>' +
                '            <td style="width: 60%;">' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">' + CustomerName + '</span>' +
                '                </div>' +
                '' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">+91' + Phone + '</span>' +
                '                </div>' +
                '                <div style="margin-bottom: 3px;">' +
                '                    <span style="font-size: 11px;">' + CustomerAddress + '</span>' +
                '                </div>' +
                '            </td>' +
                '            <td style="width: 40%;">' +
                '                <table id="Table1">' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Date: </span></strong></td>' +
                '                        <td style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + currentDateTime + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Due Date: </span></strong></td>' +
                '                        <td class="cell1" style="text-align: center;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + due_date + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Customer No: </span></strong></td>' +
                '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + CustomerNo + '</span></td>' +
                '                    </tr>' +
                '                    <tr>' +
                '                        <td style="text-align: right;"><strong><span style="font-weight: bold;font-size:11px;">Invoice No:</span></strong></td>' +
                '                        <td style="text-align: left;"><span style="font-family: Arial;font-size:11px;line-height:13px;">' + InvoiceNumber + '</span></td>' +
                '                    </tr>' +
                '                </table>' +
                '            </td>' +
                '        </tr>' +
                '    </table>' +
                '<table style="margin-left:10px;width:519px;z-index:7;" id="Table2">' +
                headdata +
                rowdata +
                '</table>' +
                '<table style="margin-top: 12px;margin-left:325px;top:275px;width:200px;height:91px;z-index:8;" id="Table3">' +
                '<tr>' +
                '            <td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">SubTotal</span></td>' +
                '            <td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell2"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">' + Total_Delivery_Price + '</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Tax Amount</span></td>' +
                '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">0</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell3"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Pending Balances</span></td>' +
                '<td class="cell4"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell5"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">0</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell6"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">Miscellenous</span></td>' +
                '<td class="cell7"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell8"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;">0</span></td>' +
                '</tr>' +
                '<tr>' +
                '<td class="cell0"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:13px;"><strong>Total Due</strong></span></td>' +
                '<td class="cell1"><span style="color:#000000;font-family:Arial;font-size:13px;line-height:16px;">₹</span></td>' +
                '<td class="cell9"><span style="color:#FFFFFF;font-family:Arial;font-size:13px;line-height:16px;"><strong>' + Total_Delivery_Price + '</strong></span></td>' +
                '</tr>' +
                '</table>' +
                Last_Template +
                '</body>' +
                '</html>';
            // nfile = os.tmpDir() + '/' + fname + '.pdf';
            // nfile = './' + fname + '.pdf';
            fname = fname + '.pdf';
            console.log(10);
            console.log(fname);
            // var header = '<div style="position:absolute;left:287px;top:5px;width:2px;height:70px;z-index:1;">' +
            //     '            <img src="https://s3.amazonaws.com/ezshippimages/line.png" alt="" style="border-width: 0;height: 78px;width: 8px;"></div>' +
            //     '        <div style=" background-color: transparent;background-image: none;border: 0px #000000 solid;padding: 0;margin: 0;text-align: left;position:absolute;left:316px;top:11px;width:213px;height:60px;z-index:2;">' +
            //     '            <span style="color:#705137;font-family:Arial;font-size:9.3px;">1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY - 500081.<br>+91 9949529308<br>CONTACTUS@EZSHIPP.COM</span></div>' +
            //     '        <div style="text-align: left;position:absolute;left:17px;top:17px;width:263px;height:49px;z-index:3;">' +
            //     '            <img src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" alt="" style="border: 0px #000000 solid;padding: 0px 0px 0px 0px;left: 0;top: 0;width: 100%;height: 100%;">' +
            //     '        </div>';

            // htmlToPdf.setDebug(true);
            // htmlToPdf.convertHTMLString(html, nfile,
            //     function (error, success) {
            var conversion = require("phantom-html-to-pdf")({
                phantomPath: './node_modules/phantomjs-prebuilt/bin/phantomjs',
                tmpDir: os.tmpDir(),
                waitForJS: true,
                waitForJSVarName: script,
                NumberOfWorkers: 4,
                paperSize: {
                    format: "A4", orientation: "portrait"
                },
                fitToPage: true,
                format: {
                    quality: 100
                }
            });
            var optionsPDF = {
                html: html,
                footer: '<div  style="background-color: #705137;background-image: none;border: 0px #000000 solid;margin: 0;padding: 5px 0px 5px 0px;text-align: center;">' +
                    '<span style="background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;">WWW.EZSHIPP.COM</span><span style="float:right;background-color:#705137;color:#FFFFFF;font-family:Arial;font-size:11px;right:10px;margin-right:2px;"><strong>{#pageNum}/{#numPages}</strong></span></div>',
                fitToPage: true
            }
            conversion(optionsPDF, function (err, res) {
                console.log("PDF process going")
                if (err) {
                    console.log('Oh noes! Errorz!');
                    console.log(err);
                    callback(null, err);
                } else {
                    // if (parseInt(success.process_code) == 0) {
                    console.log("response")
                    console.log(res);
                    nfile = res.stream.path;
                    console.log("path");
                    console.log(nfile);
                    // console.log(res.logs);
                    // console.log(res.NumberOfPages);
                    console.log("pdf done");

                    var lastMonth = moment().utcOffset(330).subtract(28, 'day').format('MMMM-YYYY');
                    var EMAIL_HTML = '<!DOCTYPE html>' +
                        '<html lang="en">' +
                        '<head>' +
                        '  <title>Registration Successful</title>' +
                        '  <meta charset="utf-8">' +
                        '  <meta name="viewport" content="width=device-width, initial-scale=1">' +
                        '  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">' +
                        '    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">' +
                        '  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>' +
                        '  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>' +
                        '</head>' +
                        '<body style="margin: 0 !important;-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; padding: 0 !important;">' +
                        '<div class="container-fluid">' +
                        '  <div class="row">' +
                        '    <div class="col-xs-12 col-sm-6 col-md-6 col-sm-offset-3 col-md-offset-3">' +
                        '    <table align="center" style="-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%;" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 500px;" class="wrapper">' +
                        '            <tr>' +
                        '                <td align="center" valign="top" style="padding: 15px 0;width:100%;background-color: #1e1f25" class="logo">' +
                        '                        <a href="https://www.ezshipp.com" target="_blank">' +
                        '                            <img alt="Logo" src="https://s3.amazonaws.com/ezshippimages/ezshipp_new_gst.png" style="display: block; font-family: Helvetica, Arial, sans-serif; color: #ffffff; font-size: 16px;width: 120px;" border="0">' +
                        '                        </a>' +
                        '                </td>' +
                        '                </tr>' +
                        '                <tr>' +
                        '                    <td bgcolor="#ffffff" align="center" style="font-size: 32px; font-family: Helvetica, Arial, sans-serif; color: #333333; padding-top: 30px;" class="padding-copy">Invoice of ' + lastMonth + '</td>' +
                        '                </tr>' +
                        '                <tr>' +
                        '                <td><hr style="width: 200px;"/></td>' +
                        '                </tr>' +
                        '                <tr>' +
                        '                    <td align="left" style="padding: 20px 0 0 7%; font-size: 16px; line-height: 25px; font-family: Helvetica, Arial, sans-serif; color: #666666;">Dear ' + CustomerData.First_name + ',</td>' +
                        '                </tr>' +
                        '                <tr>' +
                        '                    <td align="left" style="padding: 20px 0 0 7%; font-size: 16px; line-height: 25px; font-family: Helvetica, Arial, sans-serif; color: #666666;">' +
                        'Invoice# ' + InvoiceNumber + ' has been generated for Ms.' + CustomerData.First_name + '. Total amount due is ₹' + Total_Delivery_Price + ' payable by ' + due_date_mail + '.<br><br>Thanks for your business.<br><br> Warm Regards, <br>eZshipp</td>' +
                        '                        </tr>' +
                        '                <tr>' +
                        '                <td>' +
                        '                    <table width="100%" border="0" cellspacing="0" cellpadding="0">' +
                        '                        <tr>' +
                        '                            <td align="center" style="padding: 30px 0px 10px 0px;font-size:12px;">' +
                        '                                <a href="https://play.google.com/store/apps/details?id=com.ezshipp.customer.app" target="_blank" > <img src="https://s3.amazonaws.com/ezshippimages/androidstore.jpg"></a>        <a href="https://itunes.apple.com/us/app/ezshipp/id1233108964" target="_blank" > <img src="https://s3.amazonaws.com/ezshippimages/applestore.gif"></a>' +
                        '                                </td>' +
                        '                        </tr>' +
                        '                    </table>   ' +
                        '               </td> ' +
                        '            </tr>' +
                        '            <tr>' +
                        '                <td>' +
                        '                    <table width="100%" border="0" cellspacing="0" cellpadding="0" style="margin-left: -30px;">' +
                        '                        <tr>' +
                        '                            <td align="center" style="padding: 10px 0px 10px 0px;font-size:18px;">' +
                        '                                <p style="margin-left: 60px">Follow Us</p>' +
                        '                            </td>' +
                        '                            </tr>' +
                        '                        <tr>' +
                        '                            <td align="center" style="padding: 5px 0px 30px 0px;font-size:18px;">' +
                        '                                <ul style="display:inline;">' +
                        '                                    <li style="display:inline;margin-left: 10px;"><img src="https://s3.amazonaws.com/ezshippimages/fblogo.png" /></li>' +
                        '                                    <li style="display:inline;margin-left: 10px;"><img src="https://s3.amazonaws.com/ezshippimages/twittlogo.png" /></li>' +
                        '                                    <li style="display:inline;margin-left: 10px;"><img src="https://s3.amazonaws.com/ezshippimages/gplogo.png" /></li>' +
                        '                                    <li style="display:inline;margin-left: 10px;"><img src="https://s3.amazonaws.com/ezshippimages/lkinlogo.jpg" /></li>' +
                        '                                </ul>' +
                        '                    </td>' +
                        '                    </tr>' +
                        '                    </table>' +
                        '                    </td>' +
                        '                    </tr>' +
                        '             <tr>' +
                        '                 <td>' +
                        '                     <table align="center" style="-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%;" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 500px;" class="wrapper">' +
                        '            <tr>' +
                        '                <td align="center" valign="top" style="padding: 20px 0;width:100%;background-color: #1e1f25;font-size: 12px;color: #fff; line-height: 18px; font-family: Helvetica, Arial, sans-serif;" class="logo">' +
                        '                    1ST FLOOR, KARAN ARCADE,<br>OPP SBI, MAXCURE HOSPITAL LANE, <br>PATRIKA NAGAR, HI TECH CITY, HYDERABAD - 500081.' +
                        '                   <br /><br />' +
                        '                    You are receiving this mail from  <a href="https://www.ezshipp.com" target="_blank" style="text-decoration: none;"><span style="font-weight: bold;color: #ee9b0a;font-size: 15px;">ezshipp private ltd.</span></a> <span style="font-family: Arial, sans-serif; font-size: 15px; color: #fff;">  |  </span>All rights Reserved.' +
                        '                    <br /><br />' +
                        '                    <a href="https://ezshipp.com/privacy_policy.html" target="_blank"  style="color: #ee9b0a;font-size: 15px; text-decoration: none;">Privacy Policy</a>' +
                        '                        <span style="font-family: Arial, sans-serif; font-size: 15px; color: #fff;">  |  </span>' +
                        '                        <a href="https://ezshipp.com/cancellation.html" target="_blank" style="color: #ee9b0a;font-size: 15px; text-decoration: none;">Cancellations and Refunds</a>' +
                        '                </td>' +
                        '                </tr>' +
                        '            </table>' +
                        '            </td>' +
                        '            </tr>' +
                        '     </table>' +
                        '     </div>' +
                        '   </div>' +
                        '</div>' +
                        '</body>' +
                        '</html>';

                    // var maildata = {
                    //     from: config.mailgun.frommail,
                    //     to: CustomerData.Email,
                    //     cc: ['srinivas.seri@ezshipp.com', 'sri.thokala@ezshipp.com', 'nikhil.bodanpally@ezshipp.com', 'manohar.ganumala@ezshipp.com'],
                    //     bcc: 'uday@evontex.com',
                    //     subject: "Invoice of " + lastMonth,
                    //     html: EMAIL_HTML,
                    //     attachment: nfile
                    // };
                    // var maildata = {
                    //     from: config.mailgun.frommail,
                    //     to: 'uday@evontex.com',
                    //     subject: "Invoice of " + lastMonth,
                    //     html: EMAIL_HTML,
                    //     attachment: nfile
                    // };
                    // mailgun.messages().send(maildata, function (error, body) {
                    CustomerMod.Upload_PDF_AWS(nfile, fname, function (err, responcer) {
                        console.log("pdf uploaded");
                        var query = {
                            CustomerInvoiceID: InvoiceData.CustomerInvoiceID
                        }
                        var changes = {
                            ProcessStage: 2,
                            PDFLink: fname
                        };
                        var multiplicity = {
                            multi: false
                        }
                        CustomerMod.Customer_Invoicing.update(query, changes, multiplicity).exec(function (err, Result) {
                            console.log("pdf processed")
                            callback(null, 'Updated Successfully');
                        })
                    })
                    // })
                }
            });
        })
    }
    sync(function () {
        var CustomerCollection = PremiumCustomerCollection.sync(null);
        console.log(CustomerCollection);
        async.eachSeries(CustomerCollection, function (CustomerData, resp) {
            var Count = OrderCountFunction.sync(null, CustomerData);
            if (Count > 0) {
                var InvoiceData = StoreInvoiceData.sync(null, CustomerData);
                var Result = OrderDataFunction.sync(null, CustomerData);
                var PDFResult = Converting_PDF.sync(null, Result, CustomerData, InvoiceData);
                resp();
            } else {
                resp();
            }
        }, function (err) {
            console.log("All Users Monthly Invocing Generated Successfully");
        })
    })
}, null, true, 'Asia/Kolkata');
// Monthly_Invoicing_Premium_Customer.stop();
Monthly_Invoicing_Premium_Customer.start();
var Driver_COD_Job_Invoicing_DeliveryCharge = new cron.CronJob('0 7 * * 1', function () {
    var date = new Date();
    console.log("Driver Invoicing");
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var result = '';
    var options = {
        host: 'superadmin.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Driver_Invoicing_Delivery_Charges',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log(chunk);
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Driver_COD_Job_Invoicing_DeliveryCharge.start();
var Driver_COD_Job_Invoicing_Subtotal = new cron.CronJob('0 7 * * 1', function () {
    var date = new Date();
    console.log("Driver Invoicing");
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var result = '';
    var options = {
        host: 'superadmin.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Driver_Invoicing_Subtotal',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log(chunk);
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Driver_COD_Job_Invoicing_Subtotal.start();
var Driver_COD_Job_Invoicing_Exceeded_Amount = new cron.CronJob('0 7 * * 1', function () {
    var date = new Date();
    console.log("Driver Invoicing");
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var result = '';
    var options = {
        host: 'superadmin.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Driver_Invoicing_Additional_Weights',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log(chunk);
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Driver_COD_Job_Invoicing_Exceeded_Amount.start();

var Shipping_Distance_Job = new cron.CronJob('* * * * *', function () {
    var date = new Date();
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");
    var post_data = querystring.stringify({
        'Uday': 'Uday'
    });
    var result = '';
    var options = {
        host: 'api.ezshipp.com',
        port: 443,
        method: 'POST',
        path: '/Script_for_Storing_Order_Shipping_Distance',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log(chunk);
        });
    });
    req.write(post_data);
    req.end();
}, null, true, 'Asia/Kolkata');
Shipping_Distance_Job.start();

var Change_Recursive_Job_Ordering_False_This_Day = new cron.CronJob('1 0 * * *', function () {
    var me = this;
    var Recursive_Order_MemberShip = require('../Models/Recursive_Order_MemberShip.js');
    var sync = require('sync');

    function RecursiveDataFunction(callback) {
        process.nextTick(function () {
            var date = new Date();
            var query = {
                From_Date: {
                    $lte: date
                },
                To_Date: {
                    $gte: date
                },
                Subscription: true
            };
            Recursive_Order_MemberShip.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        })
    }

    function ChangeDataFunction(values, callback) {
        process.nextTick(function () {
            var date = new Date();
            var query = {
                Recursive_Order_Id: values.Recursive_Order_Id
            };
            var changes = {
                OrderPlaced: false
            };
            var multiplicity = {
                multi: false
            };
            Recursive_Order_MemberShip.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, "Updated Successfully");
            });
        })
    }
    sync(function () {
        var Result = RecursiveDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = ChangeDataFunction.sync(null, Result[t]);
            t++;
        }
    });
}, null, true, 'Asia/Kolkata');
Change_Recursive_Job_Ordering_False_This_Day.start();

var Update_Date_For_Orders = new cron.CronJob('* * * * *', function () {
    var me = this;
    var Orders = require('../Models/Orders.js');
    var sync = require('sync');

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                $or: [{
                    DateSet: {
                        $ne: true
                    }
                }, {
                    DateSet: {
                        $eq: null
                    }
                }, {
                    DateSet: {
                        $eq: false
                    }
                }, {
                    DateSet: {
                        $exists: false
                    }
                }]
            };
            Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        })
    }

    function UpdateOrderDateFunction(values, callback) {
        process.nextTick(function () {
            var dateArray = values.order_datetime.split(" ");
            var date = dateArray[0];
            var moment = require('moment');
            var newdate = moment(values.order_datetime, 'YYYY-MM-DD HH:mm:ss').subtract(330, 'm');
            var query = {
                orderseqId: values.orderseqId
            };
            var changes = {
                Date: newdate,
                DateSet: true
            };
            var multiplicity = {
                multi: true
            };
            Orders.update(query, changes, multiplicity, function (err, Result) {
                callback(null, "Updated Successfully");
            });
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var t = 0;
        console.log("Length " + Result.length);
        for (var i = 0; i < Result.length; i++) {
            var Result2 = UpdateOrderDateFunction.sync(null, Result[t]);
            console.log("Updated " + t);
            t++;
        }
    });
}, null, true, 'Asia/Kolkata');
Update_Date_For_Orders.start();

// var REMOVE_LOCK_USER_UNUSED_OFFERS_AFTER_30_MINUTES = new cron.CronJob('* * * * *', function () {
//     var me = this;
//     var Offers_Used_Customers = require('../Models/Offers_Used_Customers.js');
//     var sync = require('sync');
//     var moment  = require('moment');
//     function OfferLockDataFunction(callback) {
//         process.nextTick(function() {
//             var newmoment =new Date(moment().subtract(30,'m'));
//             var query = {
//                 LockTime:{
//                     $lte:newmoment
//                 },
//                 Lock:true
//             };
//             Offers_Used_Customers.find(query).exec(function (err,Result) {
//                 callback(null,Result);
//             });
//         })
//     }
//     function RemoveOfferFunction(values,callback) {
//         process.nextTick(function() {
//             var query = {
//                 _id:values._id
//             }
//             Offers_Used_Customers.findOne(query).remove().exec(function(err,Result){
//                 callback(null,'Offer Lock Removed');
//             })
//         })
//     }
//     sync(function () {
//         var Result = OfferLockDataFunction.sync(null);
//         var t  = 0;
//         console.log("Length Lock "+Result.length);
//         for(var i = 0; i < Result.length; i++){
//             var Result2 = RemoveOfferFunction.sync(null,Result[t]);
//             console.log("Removed "+t);
//             t++;
//         }
//     });
// }, null, true,'Asia/Kolkata');
// REMOVE_LOCK_USER_UNUSED_OFFERS_AFTER_30_MINUTES.start();


/******************************** Stop of CRON jOB SCHEDULING **************************************************/
customermod.prototype.DateUpdateFunction = function (callback) {
    var me = this;
    var Orders = require('../Models/Orders.js');
    var sync = require('sync');

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                DateSet: {
                    $ne: true
                }
            };
            Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function UpdateOrderDateFunction(values, callback) {
        process.nextTick(function () {
            var dateArray = values.order_datetime.split(" ");
            var date = dateArray[0];
            var moment = require('moment');
            var newdate = moment(date, 'YYYY-MM-DD').utcOffset(330);
            var query = {
                orderseqId: values.orderseqId
            };
            var changes = {
                Date: newdate,
                DateSet: true
            };
            var multiplicity = {
                multi: true
            };
            Orders.update(query, changes, multiplicity, function (err, Result) {
                callback(null, "Updated Successfully");
            });
        })
    };
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = UpdateOrderDateFunction.sync(null, Result[t]);
            t++;
        }
        return callback(false, "updated successfully");
    });
};


customermod.prototype.Recursive_Order_and_Place_Order = function (callback) {
    var me = this;
    var sync = require('sync');
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');
    var config = require("../Config/config.js");

    function RecursiveDataFunction(callback) {
        process.nextTick(function () {
            var moment = require('moment');
            var date = new Date();
            var time = parseInt(moment().utcOffset(330).format('H'));
            var query = {
                From_Date: {
                    $lte: date
                },
                To_Date: {
                    $gte: date
                },
                time: time,
                Subscription: true,
                OrderPlaced: false
            };
            me.Recursive_Order_MemberShip.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        })
    }

    function OrderFunction(OrderData, callback) {
        process.nextTick(function () {
            var config = require("../Config/config.js");
            var collectionType;
            if (OrderData.collectionType == null || OrderData.collectionType == '' || OrderData.collectionType == ' ') {
                collectionType = 1;
            } else {
                collectionType = parseInt(OrderData.collectionType);
            }
            var Monthly_Invoice;
            if (OrderData.Monthly_Invoice == null || OrderData.Monthly_Invoice == false || OrderData.Monthly_Invoice == "false") {
                Monthly_Invoice = false;
            } else if (OrderData.Monthly_Invoice == true || OrderData.Monthly_Invoice == "true") {
                Monthly_Invoice = true;
            }
            var post_data = querystring.stringify({
                'CustomerID': OrderData.CustomerID,
                'pickAddress': OrderData.pickAddress,
                'dropAddress': OrderData.dropAddress,
                'pickLatitude': OrderData.pickLocation.Latitude,
                'pickLongitude': OrderData.pickLocation.Longitude,
                'dropLatitude': OrderData.dropLocation.Latitude,
                'dropLongitude': OrderData.dropLocation.Longitude,
                'itemName': OrderData.itemName,
                'Monthly_Invoice': Monthly_Invoice,
                'itemDescription': OrderData.itemDescription,
                'order_datetime': me.DateTime(),
                'orderType': OrderData.orderType,
                'bookingType': OrderData.bookingType,
                'receiverName': OrderData.receiverName,
                'receiverPhone': OrderData.receiverPhone,
                'paymentType': OrderData.paymentType,
                'collectionType': collectionType,
                'paymentId': OrderData.paymentId,
                'deliverycharge': OrderData.deliverycharge
            });
            var result = '';

            var options = {
                host: config.website,
                port: 443,
                method: 'POST',
                path: '/Order_Anything',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(post_data)
                }
            };
            var str = '';
            var req = https.request(options, function (res) {
                var data;
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    var result = JSON.parse(chunk);
                    callback(null, result);
                });
            });
            req.write(post_data);
            req.end();
        })
    }

    function ChangeDataFunction(values, callback) {
        process.nextTick(function () {
            var date = new Date();
            var query = {
                Recursive_Order_Id: values.Recursive_Order_Id
            };
            var changes = {
                OrderPlaced: true
            };
            var multiplicity = {
                multi: false
            };
            me.Recursive_Order_MemberShip.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, "Updated Successfully");
            });
        })
    }

    function MessageFunction(values, callback) {
        process.nextTick(function () {
            var Message = 'Hi ' + values.CustomerName + ' ,Your Order has Been Place for Item: ' + values.itemName + ', for Receiver Name: ' + values.receiverName + ' on ' + me.DateTime() + '. Regards Team Ezshippp!!!';
            var PhoneNumber = values.CustomerPhone;
            me.MSG91MOD.sendsmstocustomer(PhoneNumber, Message, function (err, Message) {
                callback(false, 'Message Sent Successfully');
            });
        })
    }


    sync(function () {
        var Result = RecursiveDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = OrderFunction.sync(null, Result[t]);
            var Result3 = ChangeDataFunction.sync(null, Result[t]);
            var Result4 = MessageFunction.sync(null, Result[t]);
            t++;
        }
        callback('Recursive Order Placed Successfully');
    });
};
//Remove Unused Customer Images Bulk Order
customermod.prototype.Remove_Unwanted_Bulk_Order_Images = function (values, callback) {
    var me = this;

    function ImageDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                CustomerID: values.CustomerID,
                ImageID: {
                    $nin: values.ImageIDArray
                },
                Used: false
            };
            me.Orders_Images.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function RemoveImageFunction(values, callback) {
        process.nextTick(function () {
            me.DeleteAWSImage(values.ImageURL, function (err, result) {
                me.Orders_Images.find({
                    ImageID: values.ImageID
                }).remove().exec(function (err, result2) {
                    callback(null, 'Image Deleted Successfully')
                })
            })
        })
    }

    function UpdateImageUsedFunction(values, callback) {
        process.nextTick(function () {
            var ImageIDArray = [];
            for (var i = 0; i < values.ImageIDArray.length; i++) {
                ImageIDArray.push(values.ImageIDArray[i].ImageID);
            }
            setTimeout(function () {
                var query = {
                    ImageID: {
                        $in: ImageIDArray
                    }
                }
                var changes = {
                    Used: true
                }
                var multiplicity = {
                    multi: true
                }
                me.Orders_Images.update(query, changes, multiplicity).exec(function (err, Result) {
                    callback(null, 'All Images Updated Successfully');
                })
            }, 200)
        })
    }
    var sync = require('sync');
    sync(function () {
        var Result3 = UpdateImageUsedFunction.sync(null, values);
        var Result = ImageDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = RemoveImageFunction.sync(null, Result[t]);
            t++;
        }
        return callback(false, 'Unwanted Images Removed Successfully');
    })
};

//Remove Unused Customer Images Order Anything
customermod.prototype.Remove_Unwanted_Order_Images = function (values, callback) {
    var me = this;

    function ImageDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                CustomerID: values.CustomerID,
                ImageID: {
                    $ne: values.ImageID
                },
                Used: false
            };
            me.Orders_Images.find(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function RemoveImageFunction(values, callback) {
        process.nextTick(function () {
            me.DeleteAWSImage(values.ImageURL, function (err, result) {
                me.Orders_Images.find({
                    ImageID: values.ImageID
                }).remove().exec(function (err, result2) {
                    callback(null, 'Image Deleted Successfully')
                })
            })
        })
    }

    function UpdateImageUsedFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                ImageID: values.ImageID
            }
            var changes = {
                Used: true
            }
            var multiplicity = {
                multi: false
            }
            me.Orders_Images.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    var sync = require('sync');
    sync(function () {
        var Result3 = UpdateImageUsedFunction.sync(null, values);
        var Result = ImageDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = RemoveImageFunction.sync(null, Result[t]);
            t++;
        }
        return callback(false, 'Unwanted Images Removed Successfully');
    })
};

//This Api is use for Removing the AWS Image based on key
customermod.prototype.DeleteAWSImage = function (fname, callback) {
    var me = this;
    var date = new Date();
    var aws = require('aws-sdk');
    var S3AccessKey = me.config.S3AccessKey;
    var S3Secret = me.config.S3Secret;
    var S3Bucket = me.config.S3Bucket;
    aws.config.update({
        accessKeyId: S3AccessKey,
        secretAccessKey: S3Secret
    });
    var s3 = new aws.S3();
    var params = {
        Bucket: S3Bucket,
        Delete: { // required
            Objects: [ // required
                {
                    Key: fname // required
                }
            ]
        }
    };
    s3.deleteObjects(params, function (err, data) {
        return callback(false, 'Deleted Successfully');
    });
};
//Order Image Upload
customermod.prototype.Add_Order_Image = function (values, callback) {
    var me = this;
    var nfile, fname;

    function generateFilename() {
        var date = new Date().getTime();
        var charBank = "abcdefghijklmnopqrstuvwxyz";
        var fstring = '';
        for (var i = 0; i < 15; i++) {
            fstring += charBank[parseInt(Math.random() * 26)];
        }
        return (fstring += date);
    }
    var path = require('path');
    var os = require('os');
    fname = generateFilename();
    //Converting Base64 dataUrl to Jpeg Image
    me.base64ImageToFile(values.Picture, os.tmpDir() + '', fname, function (err, imgPath) {
        nfile = os.tmpDir() + '/' + fname + '.jpeg';
        fname = fname + '.jpeg';
        // Upload to the S3 Bucket
        me.UploadImageAWS(nfile, fname, function (err, responcer) {
            var imageid = me.uuid();
            var date = new Date();
            var ImageData = new me.Orders_Images({
                CustomerID: values.CustomerID,
                ImageID: imageid,
                ImageURL: fname,
                Used: false,
                created_at: date,
                updated_at: date
            });
            ImageData.save();
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Image Uploaded Successfully",
                    ImageURL: me.config.S3URL + fname,
                    ImageID: imageid
                }
            }));
        })
    })
};
customermod.prototype.Upload_PDF_AWS = function (nfile, fname, callback) {
    var me = this;
    // Upload to the S3 Bucket
    me.fs.readFile(nfile, function (err, buf) {
        var req = me.knoxClient.put(fname, {
            'Content-Length': buf.length,
            'Content-Type': 'application/pdf'
        });
        req.on('response', function (rest) {
            if (rest.statusCode == 200) {
                // Delete the Local File
                me.fs.unlink(nfile, function () {
                    var errh = false;
                    callback(errh, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: "Uploaded Successfully"
                        }
                    }));
                })
            } else {
                console.log("AWS Upload Fails")
            }
        });
        req.end(buf);
    })
};
customermod.prototype.UploadImageAWS = function (nfile, fname, callback) {
    var me = this;
    // Upload to the S3 Bucket
    me.fs.readFile(nfile, function (err, buf) {
        var req = me.knoxClient.put(fname, {
            'Content-Length': buf.length,
            'Content-Type': 'image/jpeg'
        });
        req.on('response', function (rest) {
            if (rest.statusCode == 200) {
                // Delete the Local File
                me.fs.unlink(nfile, function () {
                    var errh = false;
                    callback(errh, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: "Uploaded Successfully"
                        }
                    }));
                })
            } else {
                console.log("AWS Upload Fails")
            }
        });
        req.end(buf);
    })
};

customermod.prototype.DateTime = function () {
    var me = this;
    var fulldate = new Date();
    var moment = require('moment');
    var date = moment().utcOffset(330).format('YYYY-MM-DD');
    var time = moment().utcOffset(330).format('H:mm:ss');

    var datetime = date + ' ' + time;
    return datetime;
};

//Subscribe Customer Recursive Order
customermod.prototype.Subscribe_Recursive_Order = function (values, callback) {
    var me = this;
    var query = {
        Recursive_Order_Id: values.Recursive_Order_Id
    };
    var changes = {
        Subscription: true
    };
    var multiplicity = {
        multi: false
    };
    me.Recursive_Order_MemberShip.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Customer Recursive Order Subscribed Successfully'
            }
        }));
    })
};

//Unsubscribe Customer Recursive Order
customermod.prototype.Un_Subscribe_Recursive_Order = function (values, callback) {
    var me = this;
    var query = {
        Recursive_Order_Id: values.Recursive_Order_Id
    };
    var changes = {
        Subscription: false
    };
    var multiplicity = {
        multi: false
    };
    me.Recursive_Order_MemberShip.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Customer Recursive Order UnSubscribed Successfully'
            }
        }));
    })
};


//Updating the Recursive Order Data
customermod.prototype.Update_Recursive_Order = function (values, callback) {
    var me = this;
    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    var moment = require('moment');
    var fmdate = moment(values.From_Date, 'DD/MM/YYYY');
    var todate = moment(values.To_Date, 'DD/MM/YYYY').add(1, 'day');
    var date = new Date();
    var query = {
        Recursive_Order_Id: values.Recursive_Order_Id
    };
    var changes = {
        From_Date: fmdate,
        To_Date: todate,
        time: values.time,
        orderType: 1,
        pickAddress: values.pickAddress,
        dropAddress: values.dropAddress,
        pickLocation: {
            Longitude: pickLongitude,
            Latitude: pickLatitude
        },
        dropLocation: {
            Longitude: dropLongitude,
            Latitude: dropLatitude
        },
        itemName: values.itemName,
        itemDescription: values.itemDescription,
        bookingType: values.bookingType,
        receiverName: values.receiverName,
        receiverPhone: values.receiverPhone,
        paymentType: values.paymentType,
        deliverycharge: values.deliverycharge,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.Recursive_Order_MemberShip.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Recursive Order Updated Successfully'
            }
        }));
    })
};

//Stroing the Recusrsive Order Data
customermod.prototype.Store_Recursive_Data = function (values, CustomerData, callback) {
    var me = this;
    var uuid = require('uuid');
    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    var recursiveid = uuid();
    var moment = require('moment');
    var fmdate = moment(values.From_Date, 'DD/MM/YYYY');
    var todate = moment(values.To_Date, 'DD/MM/YYYY').add(1, 'day');
    var date = new Date();
    var RecursiveData = new me.Recursive_Order_MemberShip({
        Recursive_Order_Id: recursiveid,
        CustomerID: values.CustomerID,
        CustomerName: CustomerData.First_name,
        CustomerEmail: CustomerData.Email,
        CustomerPhone: CustomerData.Phone,
        countryCode: CustomerData.countryCode,
        From_Date: fmdate,
        To_Date: todate,
        time: values.time,
        orderType: 1,
        pickAddress: values.pickAddress,
        dropAddress: values.dropAddress,
        pickLocation: {
            Longitude: pickLongitude,
            Latitude: pickLatitude
        },
        dropLocation: {
            Longitude: dropLongitude,
            Latitude: dropLatitude
        },
        itemName: values.itemName,
        itemDescription: values.itemDescription,
        bookingType: values.bookingType,
        receiverName: values.receiverName,
        receiverPhone: values.receiverPhone,
        paymentType: values.paymentType,
        deliverycharge: values.deliverycharge,
        Subscription: true,
        created_at: date,
        updated_at: date
    });
    RecursiveData.save();
    return callback(new me.ApiResponce({
        success: true,
        extras: {
            Status: 'Recursive Order Stored Successfully'
        }
    }));
};


//Check Validity of Field for Login
customermod.prototype.Check_Validity_Recursive_Order_Update = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.Recursive_Order_Id == null || values.From_Date == null || values.To_Date == null || values.time == null || values.pickAddress == null || values.dropAddress == null || values.pickLatitude == null || values.pickLongitude == null || values.dropLatitude == null || values.dropLongitude == null || values.itemName == null || values.itemDescription == null || values.bookingType == null || values.receiverName == null || values.receiverPhone == null || values.paymentType == null || values.deliverycharge == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

//Check for Order
customermod.prototype.Check_for_Recursive_Order = function (values, callback) {
    var me = this;
    var error;
    me.Recursive_Order_MemberShip.findOne({
        Recursive_Order_Id: values.Recursive_Order_Id
    }).exec(function (err, user) {
        if (user) {
            error = false;
            return callback(error, user);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.RECURSIVE_ORDER_NOT_FOUND
                }
            }));
        }
    });
};

//Find All Customer Recursive
customermod.prototype.Find_All_Customer_Recursive_Orders = function (values, callback) {
    var me = this;
    var moment = require('moment');
    me.Recursive_Order_MemberShip.find({
        CustomerID: values.CustomerID
    }).sort({
        created_at: -1
    }).exec(function (err, Result) {
        var RecursiveOrderData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
            var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
            var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
            RecursiveOrderData.push({
                Recursive_Order_Id: Result[t].Recursive_Order_Id,
                CustomerID: Result[t].CustomerID,
                CustomerName: Result[t].CustomerName,
                CustomerEmail: Result[t].CustomerEmail,
                CustomerPhone: Result[t].CustomerPhone,
                countryCode: Result[t].countryCode,
                From_Date: fmdate,
                To_Date: todate,
                time: Result[t].time,
                orderType: Result[t].orderType,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                itemName: Result[t].itemName,
                itemDescription: Result[t].itemDescription,
                bookingType: Result[t].bookingType,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                deliverycharge: Result[t].deliverycharge,
                Subscription: Result[t].Subscription,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                Date: orderdate
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                RecursiveOrderData: RecursiveOrderData
            }
        }));
    });
}

//Find All Recursive Orders
customermod.prototype.Find_All_Recursive_Orders = function (values, callback) {
    var me = this;
    var toSkip = parseInt(values.skip);
    var moment = require('moment');
    me.Recursive_Order_MemberShip.find().count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Recursive_Order_MemberShip.find().sort({
                created_at: -1
            }).skip(toSkip).limit(10).exec(function (err, Result) {
                var RecursiveOrderData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var fmdate = moment(Result[t].From_Date).utcOffset(330).format('DD/MM/YYYY');
                    var todate = moment(Result[t].To_Date).format('DD/MM/YYYY');
                    var orderdate = moment(Result[t].created_at).utcOffset(330).format('DD/MM/YYYY');
                    RecursiveOrderData.push({
                        Recursive_Order_Id: Result[t].Recursive_Order_Id,
                        CustomerID: Result[t].CustomerID,
                        CustomerName: Result[t].CustomerName,
                        CustomerEmail: Result[t].CustomerEmail,
                        CustomerPhone: Result[t].CustomerPhone,
                        countryCode: Result[t].countryCode,
                        From_Date: fmdate,
                        To_Date: todate,
                        time: Result[t].time,
                        orderType: Result[t].orderType,
                        pickAddress: Result[t].pickAddress,
                        dropAddress: Result[t].dropAddress,
                        itemName: Result[t].itemName,
                        itemDescription: Result[t].itemDescription,
                        bookingType: Result[t].bookingType,
                        receiverName: Result[t].receiverName,
                        receiverPhone: Result[t].receiverPhone,
                        paymentType: Result[t].paymentType,
                        paymentId: Result[t].paymentId,
                        deliverycharge: Result[t].deliverycharge,
                        Subscription: Result[t].Subscription,
                        pickLatitude: Result[t].pickLocation.Latitude,
                        pickLongitude: Result[t].pickLocation.Longitude,
                        dropLatitude: Result[t].dropLocation.Latitude,
                        dropLongitude: Result[t].dropLocation.Longitude,
                        Date: orderdate
                    });
                    t++;
                }
                return callback(new me.ApiResponce({
                    success: true,
                    extras: {
                        RecursiveOrderData: RecursiveOrderData,
                        Count: Count
                    }
                }));
            });
        }
    })

};



//Check Validity of Field for Login
customermod.prototype.Check_Validity_Recursive_Order_Storing = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.CustomerID == null || values.From_Date == null || values.To_Date == null || values.time == null || values.pickAddress == null || values.dropAddress == null || values.pickLatitude == null || values.pickLongitude == null || values.dropLatitude == null || values.dropLongitude == null || values.itemName == null || values.itemDescription == null || values.bookingType == null || values.receiverName == null || values.receiverPhone == null || values.paymentType == null || values.paymentId == null || values.deliverycharge == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};
//Checking the Picup and Drop location for Order
customermod.prototype.Calculate_Fair_Place_by_Zones = function (values, callback) {
    var me = this;
    var error;
    var zone = me.ZONES;
    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    zone.findOne({
        'polygons': {
            $geoIntersects: {
                $geometry: {
                    type: "Point",
                    coordinates: [pickLongitude, pickLatitude]
                }
            }
        }
    }, function (err, pickupzoneObj) {
        if (pickupzoneObj) {
            zone.findOne({
                'polygons': {
                    $geoIntersects: {
                        $geometry: {
                            type: "Point",
                            coordinates: [dropLongitude, dropLatitude]
                        }
                    }
                }
            }, function (err, dropupzoneObj) {
                if (dropupzoneObj) {

                    if (pickupzoneObj.city_id == dropupzoneObj.city_id) {

                        var PricesData = findElement1(pickupzoneObj.pricing, "id", dropupzoneObj._id);
                        var PriceData = {
                            instantdelivery: PricesData.instant,
                            hrdelivery: PricesData.hrdelivery,
                            samedaydelivery: PricesData.samedaydelivery
                        }
                        return callback(false, new me.ApiResponce({
                            success: true,
                            extras: {
                                PriceData: PriceData
                            }
                        }));
                        function findElement1(arr, propName, propValue) {
                            for (var i = 0; i < arr.length; i++)
                                if (arr[i][propName] == propValue)
                                    return arr[i];

                            // will return undefined if not found; you could return a default instead
                        }
                    } else {
                        error = true;
                        return callback(true, new me.ApiResponce({
                            success: false,
                            extras: {
                                msg: me.ApiMessages.PICKUP_ZONE_AND_DROP_ZONE_MUST_BE_IN_SAME_CITY
                            }
                        }));
                    }
                } else {
                    error = true;
                    return callback(true, new me.ApiResponce({
                        success: false,
                        extras: {
                            msg: me.ApiMessages.DROP_ZONE_NOT_IN_RANGE
                        }
                    }));
                }
            })
        } else {
            error = true;
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PICKUP_ZONE_NOT_IN_RANGE
                }
            }));
        }
    });
};


//Checking the Picup and Drop location for Order
customermod.prototype.Verifying_Order_Zone = function (values, callback) {
    var me = this;
    var error;
    var zone = me.ZONES;
    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    zone.findOne({
        'polygons': {
            $geoIntersects: {
                $geometry: {
                    type: "Point",
                    coordinates: [pickLongitude, pickLatitude]
                }
            }
        }
    }, function (err, pickupzoneObj) {
        if (pickupzoneObj) {
            zone.findOne({
                'polygons': {
                    $geoIntersects: {
                        $geometry: {
                            type: "Point",
                            coordinates: [dropLongitude, dropLatitude]
                        }
                    }
                }
            }, function (err, dropupzoneObj) {
                if (dropupzoneObj) {

                    if (pickupzoneObj.city_id == dropupzoneObj.city_id) {

                        error = false;
                        console.log("pickup and drop are in same city")
                        return callback(error, new me.ApiResponce({
                            success: true,
                            extras: {
                                Status: 'Order Location Exist in Same Zone'
                            }
                        }));

                    } else {
                        error = true;
                        console.log("pickup city and drop city not match");
                        return callback(error, new me.ApiResponce({
                            success: false,
                            extras: {
                                msg: me.ApiMessages.PICKUP_ZONE_AND_DROP_ZONE_MUST_BE_IN_SAME_CITY
                            }
                        }));
                    }
                } else {
                    error = true;
                    console.log("drop not found");
                    return callback(error, new me.ApiResponce({
                        success: false,
                        extras: {
                            msg: me.ApiMessages.DROP_ZONE_NOT_IN_RANGE
                        }
                    }));
                }
            })
        } else {
            error = true;
            console.log("pickup not found");
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PICKUP_ZONE_NOT_IN_RANGE
                }
            }));
        }

    });
};
//Getting the LatLong of Customer Pickup based on Address
customermod.prototype.Getting_LatLong_Pickup_Vendor = function (values, callback) {
    var me = this;
    var https = require('https');
    const querystring = require('querystring');

    var searchquery = '';
    searchquery = querystring.escape(values.pick_colony_street + values.pick_landmark + values.pick_city);
    var url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + searchquery + '&radius=500&key=AIzaSyAd9M933E6-RDB-W6xBOmXsh1eMvfqDkVs';
    var result = '';
    var jsonresult;
    https.get(url, (res) => {
        res.setEncoding('utf8');
        res.on('data', (d) => {
            result += d;
        })
        var error;
        res.on('end', () => {
            jsonresult = JSON.parse(result);
            if (jsonresult.results == 0) {
                error = true;
                return callback(error, new me.ApiResponce({
                    success: false,
                    extras: {
                        Status: "Pick Address not found"
                    }
                }));
            } else {
                error = false;
                var pickadd = values.pick_flat_house_details + ',' + values.pick_colony_street + ',' + values.pick_landmark + ',' + values.pick_city;
                var PickData = {
                    pickAddress: pickadd,
                    pickLatitude: jsonresult.results[0].geometry.location.lat,
                    pickLongitude: jsonresult.results[0].geometry.location.lng
                };
                return callback(false, PickData);
            }
        })
    });
};
//Getting the LatLong of Customer Drop based on Address
customermod.prototype.Getting_LatLong_Drop_Vendor = function (values, callback) {
    var me = this;
    var https = require('https');
    const querystring = require('querystring');

    var searchquery = '';
    searchquery = querystring.escape(values.drop_colony_street + values.drop_landmark + values.drop_city);
    var url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + searchquery + '&radius=500&key=AIzaSyAd9M933E6-RDB-W6xBOmXsh1eMvfqDkVs';
    var result = '';
    var jsonresult;
    https.get(url, (res) => {
        res.setEncoding('utf8');
        res.on('data', (d) => {
            result += d;
        })
        var error;
        res.on('end', () => {
            jsonresult = JSON.parse(result);
            if (jsonresult.results == 0) {
                error = true;
                return callback(error, new me.ApiResponce({
                    success: false,
                    extras: {
                        Status: "Drop Address not found"
                    }
                }));
            } else {
                error = false;
                var dropadd = values.drop_flat_house_details + ',' + values.drop_colony_street + ',' + values.drop_landmark + ',' + values.drop_city;
                var DropData = {
                    dropAddress: dropadd,
                    dropLatitude: jsonresult.results[0].geometry.location.lat,
                    dropLongitude: jsonresult.results[0].geometry.location.lng
                };
                return callback(false, DropData);
            }
        })
    });
};
//Getting the LatLong of Customer Drop based on Address
customermod.prototype.Getting_LatLong_Drop_Vendor_Processing = function (values) {
    var me = this;
    console.log("entering" + JSON.stringify(values));
    var https = require('https');
    const querystring = require('querystring');

    var searchquery = '';
    searchquery = querystring.escape(values.drop_colony_street + values.drop_landmark + values.drop_city);
    var dropadd = values.drop_flat_house_details + ',' + values.drop_colony_street + ',' + values.drop_landmark + ',' + values.drop_city;
    console.log(searchquery);
    var url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + searchquery + '&radius=500&key=AIzaSyAd9M933E6-RDB-W6xBOmXsh1eMvfqDkVs';
    var result = '';
    var jsonresult;
    var DropData;
    https.get(url, (res) => {
        res.setEncoding('utf8');
        res.on('data', (d) => {
            result += d;
        })
        res.on('end', () => {
            jsonresult = JSON.parse(result);
            if (jsonresult.results == 0) {
                DropData = {
                    dropAddress: dropadd,
                    latlong: false
                }
            } else {
                DropData = {
                    dropAddress: dropadd,
                    dropLatitude: jsonresult.results[0].geometry.location.lat,
                    dropLongitude: jsonresult.results[0].geometry.location.lng,
                    latlong: true
                };
            }
            return DropData;
        })
    });
};
//Calling Order_Anything for Ordering
customermod.prototype.Placing_Vendor_Order = function (values, PickData, DropData, callback) {
    var me = this;
    var querystring = require('querystring');
    var https = require('https');
    var config = require("../Config/config.js");
    var collectionType;
    if (values.collectionType == null || values.collectionType == '' || values.collectionType == ' ') {
        collectionType = 1;
    } else {
        collectionType = parseInt(values.collectionType);
    }
    var Monthly_Invoice;
    if (values.Monthly_Invoice == null || values.Monthly_Invoice == false || values.Monthly_Invoice == "false") {
        Monthly_Invoice = false;
    } else if (values.Monthly_Invoice == true || values.Monthly_Invoice == "true") {
        Monthly_Invoice = true;
    }
    var post_data = querystring.stringify({
        'CustomerID': values.CustomerID,
        'pickAddress': PickData.pickAddress,
        'dropAddress': DropData.dropAddress,
        'pickLatitude': PickData.pickLatitude,
        'pickLongitude': PickData.pickLongitude,
        'dropLatitude': DropData.dropLatitude,
        'dropLongitude': DropData.dropLongitude,
        'itemName': values.itemName,
        'itemDescription': values.itemDescription,
        'order_datetime': me.DateTime(),
        'orderType': 1,
        'Monthly_Invoice': Monthly_Invoice,
        'bookingType': 3,
        'receiverName': values.receiverName,
        'receiverPhone': values.receiverPhone,
        'paymentType': values.paymentType,
        'collectionType': collectionType,
        'paymentId': values.paymentId,
        'deliverycharge': values.deliverycharge
    });
    var result = '';

    var options = {
        host: config.website,
        port: 443,
        method: 'POST',
        path: '/Order_Anything',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };
    var str = '';
    var req = https.request(options, function (res) {
        var data;
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            var result = JSON.parse(chunk);
            return callback(false, result);
        });
    });
    req.write(post_data);
    req.end();
};

//Checking the Picup and Drop location for Order Vendor
customermod.prototype.Verifying_Order_Zone_Vendor = function (PickData, DropData, callback) {
    var me = this;
    var error;
    var zone = me.ZONES;
    var pickLatitude = parseFloat(PickData.pickLatitude);
    var pickLongitude = parseFloat(PickData.pickLongitude);
    var dropLatitude = parseFloat(DropData.dropLatitude);
    var dropLongitude = parseFloat(DropData.dropLongitude);
    zone.findOne({
        'polygons': {
            $geoIntersects: {
                $geometry: {
                    type: "Point",
                    coordinates: [pickLongitude, pickLatitude]
                }
            }
        }
    }, function (err, pickupzoneObj) {
        if (pickupzoneObj) {
            zone.findOne({
                'polygons': {
                    $geoIntersects: {
                        $geometry: {
                            type: "Point",
                            coordinates: [dropLongitude, dropLatitude]
                        }
                    }
                }
            }, function (err, dropupzoneObj) {
                if (dropupzoneObj) {

                    if (pickupzoneObj.city_id == dropupzoneObj.city_id) {

                        error = false;
                        return callback(error, new me.ApiResponce({
                            success: true,
                            extras: {
                                Status: 'Order Location Exist in Same Zone'
                            }
                        }));

                    } else {
                        error = true;
                        return callback(error, new me.ApiResponce({
                            success: false,
                            extras: {
                                Status: "Pickup and Drop Zone Not in Same City Zone"
                            }
                        }));
                    }
                } else {
                    error = true;
                    return callback(error, new me.ApiResponce({
                        success: false,
                        extras: {
                            Status: "Drop Zone Not in Range"
                        }
                    }));
                }
            })
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    Status: "Pickup Zone Not in Range"
                }
            }));
        }

    });
};

//Check for Order Old Driver
customermod.prototype.Check_for_Old_Driver = function (values, callback) {
    var me = this;
    var error;
    var length = values.driversLog.length;
    var DriverID = values.driversLog[length - 1].driverid;
    me.Drivers.findOne({
        _id: DriverID
    }).exec(function (err, user) {
        if (user) {
            error = false;
            return callback(error, user);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.DRIVER_NOT_FOUND
                }
            }));
        }
    });
};

//Check for Driver
customermod.prototype.Check_for_ExpenseID = function (values, callback) {
    var me = this;
    var error;
    me.Driver_Expenses.findOne({
        ExpenseID: values.ExpenseID
    }).exec(function (err, user) {
        if (user) {
            error = false;
            return callback(error, user);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.Driver_Expenses_Not_Found
                }
            }));
        }
    });
};

//Check for Driver
customermod.prototype.Check_for_Driver = function (values, callback) {
    var me = this;
    var error;
    me.Drivers.findOne({
        _id: values.DriverID
    }).exec(function (err, user) {
        if (user) {
            error = false;
            return callback(error, user);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.DRIVER_NOT_FOUND
                }
            }));
        }
    });
};

//Check for Order
customermod.prototype.Check_for_Order = function (values, callback) {
    var me = this;
    var error;
    me.Orders.findOne({
        _id: values.orderId
    }, function (err, user) {
        if (user) {
            error = false;
            return callback(error, user);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.ORDER_NOT_FOUND
                }
            }));
        }
    });
};

//MANUAL ORDERING IN CASE OF CHANGE OF DRIVER FOR ORDER
customermod.prototype.Manual_Ordering = function (values, OrderData, DriverData, OldDriverData, callback) {
    var me = this;
    var error;
    var zone = me.ZONES;
    var Order = me.Orders;
    var config = require("../Config/config.js");

    var async = require('async');
    var randomstring = require("randomstring");

    var distance = require('google-distance-matrix');
    distance.key(config.Google_Api_Key);
    distance.units('imperial');
    distance.mode('driving');

    var moment = require('moment');
    var publishkey = config.pubnubkeys.publishkey;
    var subscribekey = config.pubnubkeys.subscribekey;
    var pubnubs = require("pubnub");
    var pubnub = new pubnubs({
        ssl: true,
        publish_key: publishkey,
        subscribe_key: subscribekey
    });
    ObjectID = require('mongodb').ObjectID;
    var plat;
    var plong;
    if (OrderData.status == 1 || OrderData.status == 7 || OrderData.status == 8 || OrderData.status == 16 || OrderData.status == 10) {
        plat = OrderData.pickLocation.Latitude;
        plong = OrderData.pickLocation.Longitude;

    } else if (OrderData.status == 11 || OrderData.status == 12 || OrderData.status == 20) {
        plat = OldDriverData.location.latitude;
        plong = OldDriverData.location.longitude;
    } else if (OrderData.status == 15 || OrderData.status == 18) {
        plat = OrderData.Hub_Latitude;
        plong = OrderData.Hub_Longitude;
    }
    var reqdata = {
        "orderid": String(OrderData._id),
        "plat": plat,
        "plng": plong,
        "DriverData": DriverData,
        "OldDriverData": OldDriverData,
        "OrderData": OrderData
    };
    console.log("Order Status->" + OrderData.status);
    callback(false, new me.ApiResponce({
        success: true,
        extras: {
            Status: 'Driver Allocated the Job'
        }
    }));
    if (OrderData.status == 1) {
        console.log("Entering Manual First Type");
        console.log("Old driver:-> " + OldDriverData.name);
        console.log("New driver:-> " + DriverData.name);
        Manual_Allocating_New_Job(reqdata, function (err, obj) {
            if (!err) {
                error = false;
                // return callback(error,obj);
                // return callback(false,new me.ApiResponce({ success: true, extras: { Status:'we will dispatch the driver shortly to pickup your package'} }) );
            }
        });
    } else if (OrderData.status == 7 || OrderData.status == 10 || OrderData.status == 11 || OrderData.status == 12 || OrderData.status == 16 || OrderData.status == 20) {
        console.log("Entering Manual Second Type");
        console.log("Old driver:-> " + OldDriverData.name);
        console.log("New driver:-> " + DriverData.name);
        Manual_Allocating_Ongoing_Job(reqdata, function (err, obj) {
            if (!err) {
                error = false;
                console.log(obj);
            }
        })
    } else if (OrderData.status == 15 || OrderData.status == 18) {
        console.log("Entering Manual Third Type");
        console.log("Old driver:-> " + OldDriverData.name);
        console.log("New driver:-> " + DriverData.name);
        Manual_Allocating_Zone_Job(reqdata, function (err, obj) {
            if (!err) {
                error = false;
                console.log(obj);
            }
        })
    }
    function Manual_Allocating_New_Job(reqdata, callback) {
        var orderId = String(reqdata.orderid);
        var orderid = String(reqdata.orderid);
        var DriverID = String(reqdata.DriverData._id);
        var driver = me.Drivers;
        var OrderData = reqdata.OrderData;
        var moment = require('moment');
        var status = OrderData.status;
        var Order = me.Orders;
        var dtime = moment().utcOffset(330).format('YYYY-MM-DD HH:mm:ss');
        var timestamp = Date.now();
        var multiplicity = {
            multi: false
        }
        var queryOrderDriverLog = {
            "_id": orderId
        }
        var changesDriverLog = {
            $push: {
                driversLog: {
                    driverid: String(DriverID),
                    status: "1",
                    datetime: String(dtime)
                }
            }
        }
        Order.update(queryOrderDriverLog, changesDriverLog, multiplicity).exec(function (err, Result) {
            if (err) {
                console.log(err);
            } else {
                console.log("Driver Log updated to new driver for new job");
                console.log(Result);
                callback(false, new me.ApiResponce({
                    success: true,
                    extras: {
                        Status: 'Manual Order Allocated Successfully'
                    }
                }));
                var queryObjAll = {
                    "newapp_ids.app_id": String(orderId)
                }
                driver.find(queryObjAll).exec(function (err, DriverInformationData) {
                    if (!err) {
                        console.log(DriverInformationData);
                        var async = require('async');
                        async.each(DriverInformationData, function (item, resp) {
                            var oldDriverID = String(item._id);
                            var queryObj = {
                                _id: oldDriverID
                            }
                            var RemoveOldDriverData = {
                                $pull: { "newapp_ids": { "app_id": String(orderId) } }
                            }
                            driver.update(queryObj, RemoveOldDriverData, function (err, PullStatus) {
                                if (!err) {
                                    console.log("Pulled from driver status");
                                    //pubnub send old driver notication and set refresh
                                    var publishConfig2 = {
                                        channel: String(oldDriverID),
                                        message: {
                                            'orderid': String(orderid),
                                            'bid': OrderData.orderseqId,
                                            'a': 21, //21 new order request
                                            'ab': 1,
                                            'ordermsg': 'order expired'
                                        }
                                    };
                                    console.log(publishConfig2);
                                    pubnub.publish(publishConfig2, function (status, response) {
                                        console.log("publish to driver for order expired");
                                        console.log(status);
                                        console.log(response);
                                    });
                                    var mssageto = {
                                        "orderid": String(orderid),
                                        'bid': OrderData.orderseqId,
                                        'a': 21, //21 new order request
                                        'ab': 1,
                                        "ordermsg": 'order expired'
                                    }
                                    //sending push to driver
                                    sendpushtodriverorderexpired(oldDriverID, mssageto);
                                    resp();
                                }
                            })
                        }, function (err) {
                            if (!err) {
                                console.log('New Jobs Pull from all drivers');
                                var newDriver = {
                                    "_id": DriverID
                                }

                                var newDriverData = {
                                    $push: { "newapp_ids": { "app_id": String(orderid), "timestamp": timestamp, "datetime": dtime } }
                                }

                                driver.update(newDriver, newDriverData, multiplicity).exec(function (err, Result2) {
                                    if (err) {
                                        console.log(err);
                                    } else {
                                        console.log("Driver new order job added");
                                        console.log(Result2);
                                        var publishConfig = {
                                            channel: String(DriverID),
                                            message: {
                                                'orderid': String(orderid),
                                                'bid': OrderData.orderseqId,
                                                'a': 21, //21 new order request
                                                'ab': 1,
                                                'ordermsg': 'Manual order waiting for driver'
                                            }
                                        };
                                        pubnub.publish(publishConfig, function (status, response) {
                                            console.log("publish to driver for manual job");
                                            console.log(status);
                                            console.log(response);
                                        });

                                        var mssageto = {
                                            "orderid": String(orderid),
                                            'bid': OrderData.orderseqId,
                                            'a': 21, //21 new order request
                                            'ab': 1,
                                            "ordermsg": 'Manual order waiting for driver'
                                        }
                                        //sending push to driver
                                        sendpushtodriver(DriverID, mssageto);
                                    }
                                })
                            }
                        })
                    }
                })


            }
        })
    }
    function Manual_Allocating_Zone_Job(reqdata, callback) {
        var orderId = String(reqdata.orderid);
        var orderid = String(reqdata.orderid);
        var DriverID = String(reqdata.DriverData._id);
        var oldDriverID = String(reqdata.OldDriverData._id);
        var driver = me.Drivers;
        var OrderData = reqdata.OrderData;
        var moment = require('moment');
        var status = OrderData.status;
        var dtime = moment().utcOffset(330).format('YYYY-MM-DD HH:mm:ss');
        var timestamp = Date.now();
        callback(false, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Manual Order Allocated Successfully'
            }
        }));
        var queryObjAll = {
            "newapp_ids.app_id": String(orderId)
        }
        driver.find(queryObjAll).exec(function (err, DriverInformationData) {
            if (!err) {
                console.log(DriverInformationData);
                var async = require('async');
                async.each(DriverInformationData, function (item, resp) {
                    var oldDriverID = String(item._id);
                    var queryObj = {
                        _id: oldDriverID
                    }
                    var RemoveOldDriverData = {
                        $pull: { "newapp_ids": { "app_id": String(orderId) } }
                    }
                    driver.update(queryObj, RemoveOldDriverData, function (err, PullStatus) {
                        if (!err) {
                            console.log("Pulled from driver status");
                            //pubnub send old driver notication and set refresh
                            var publishConfig2 = {
                                channel: String(oldDriverID),
                                message: {
                                    'orderid': String(orderid),
                                    'bid': OrderData.orderseqId,
                                    'a': 21, //21 new order request
                                    'ab': 1,
                                    'ordermsg': 'order expired'
                                }
                            };
                            console.log(publishConfig2);
                            pubnub.publish(publishConfig2, function (status, response) {
                                console.log("publish to driver for order expired");
                                console.log(status);
                                console.log(response);
                            });
                            var mssageto = {
                                "orderid": String(orderid),
                                'bid': OrderData.orderseqId,
                                'a': 21, //21 new order request
                                'ab': 1,
                                "ordermsg": 'order expired'
                            }
                            //sending push to driver
                            sendpushtodriverorderexpired(oldDriverID, mssageto);
                            resp();
                        }
                    })
                }, function (err) {
                    if (!err) {
                        console.log('New Jobs Pull from all drivers');
                        var newDriver = {
                            "_id": DriverID
                        }

                        var newDriverData = {
                            $push: { "newapp_ids": { "app_id": String(orderid), "timestamp": timestamp, "datetime": dtime } }
                        }
                        var multiplicity = {
                            multi: true
                        }

                        driver.update(newDriver, newDriverData, multiplicity).exec(function (err, Result2) {
                            if (err) {
                                console.log(err);
                            } else {
                                console.log("Driver new order job added");
                                console.log(Result2);
                                var publishConfig = {
                                    channel: String(DriverID),
                                    message: {
                                        'orderid': String(orderid),
                                        'bid': OrderData.orderseqId,
                                        'a': 21, //21 new order request
                                        'ab': 1,
                                        'ordermsg': 'Manual order waiting for driver'
                                    }
                                };
                                pubnub.publish(publishConfig, function (status, response) {
                                    console.log("publish to driver for manual job");
                                    console.log(status);
                                    console.log(response);
                                });

                                var mssageto = {
                                    "orderid": String(orderid),
                                    'bid': OrderData.orderseqId,
                                    'a': 21, //21 new order request
                                    'ab': 1,
                                    "ordermsg": 'Manual order waiting for driver'
                                }
                                //sending push to driver
                                sendpushtodriver(DriverID, mssageto);
                            }
                        })
                    }
                })
            }
        })


    }
    function Manual_Allocating_Ongoing_Job(reqdata, callback) {
        var orderId = String(reqdata.orderid);
        var orderid = String(reqdata.orderid);
        var DriverID = String(reqdata.DriverData._id);
        var oldDriverID = String(reqdata.OldDriverData._id);
        var driver = me.Drivers;
        var OrderData = reqdata.OrderData;
        var moment = require('moment');
        var status = OrderData.status;
        var queryObj = {
            "_id": oldDriverID
        }
        var RemoveOldDriverData = {
            $pull: { "app_ids": { "app_id": String(orderId) } }
        }
        driver.update(queryObj, RemoveOldDriverData, { multi: false }).exec(function (err, Result) {
            if (err) {
                console.log(err);
            } else {
                console.log("Old driver Remove Status");
                console.log(Result);
                var newDriver = {
                    "_id": DriverID
                }
                var dtime = moment().utcOffset(330).format('YYYY-MM-DD HH:mm:ss');
                var timestamp = Date.now();
                var newDriverData = {
                    $push: { "app_ids": { "app_id": String(orderid), "timestamp": timestamp, "datetime": dtime } }
                }
                var multiplicity = {
                    multi: false
                }
                driver.update(newDriver, newDriverData, multiplicity).exec(function (err, Result2) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log("new driver add Status");
                        console.log(Result2);
                        var Order = me.Orders;
                        var queryOrderDriverLog = {
                            "_id": orderId,
                            "driversLog.driverid": String(oldDriverID),
                            "driversLog.status": String(status)
                        }
                        var changesDriverLog = {
                            $set: {
                                "driversLog.$.driverid": String(DriverID),
                                "driversLog.$.datetime": String(dtime)
                            }
                        }
                        Order.update(queryOrderDriverLog, changesDriverLog, multiplicity).exec(function (err, Result) {
                            if (err) {
                                console.log(err);
                            } else {
                                console.log("Driver Log updated too new driver");
                                console.log(Result);
                                var queryOrderEvenLog = {
                                    "_id": orderId,
                                    "eventLog.driverid": String(oldDriverID),
                                    "eventLog.status": String(status)
                                }
                                var changesEventLog = {
                                    $set: {
                                        "eventLog.$.driverid": String(DriverID),
                                        "eventLog.$.datetime": String(dtime),
                                        "eventLog.$.timestamp": parseFloat(timestamp)
                                    }
                                }
                                Order.update(queryOrderEvenLog, changesEventLog, multiplicity).exec(function (err, Result_All) {
                                    if (err) {
                                        console.log(err);
                                    } else {
                                        console.log("Event Log updated too new driver");
                                        console.log(Result_All)
                                        callback(false, new me.ApiResponce({
                                            success: true,
                                            extras: {
                                                Status: 'Manual Order Allocated Successfully'
                                            }
                                        }));
                                        var publishConfig = {
                                            channel: String(DriverID),
                                            message: {
                                                'orderid': String(orderid),
                                                'bid': OrderData.orderseqId,
                                                'a': 21, //21 new order request
                                                'ab': 2,
                                                'ordermsg': 'Manual order waiting for driver'
                                            }
                                        };
                                        pubnub.publish(publishConfig, function (status, response) {
                                            console.log("publish to driver for manual job");
                                        });

                                        var mssageto = {
                                            "orderid": String(orderid),
                                            'bid': OrderData.orderseqId,
                                            'a': 21, //21 new order request
                                            'ab': 2,
                                            "ordermsg": 'Manual order waiting for driver'
                                        }
                                        //sending push to driver
                                        sendpushtodriver(DriverID, mssageto);

                                        //pubnub send old driver notication and set refresh
                                        var publishConfig2 = {
                                            channel: String(oldDriverID),
                                            message: {
                                                'orderid': String(orderid),
                                                'bid': OrderData.orderseqId,
                                                'a': 21, //21 new order request
                                                'ab': 2,
                                                'ordermsg': 'Manual order waiting for driver'
                                            }
                                        };
                                        pubnub.publish(publishConfig2, function (status, response) {
                                            console.log("publish to driver for manual job");
                                        });

                                        var mssageto = {
                                            "orderid": String(orderid),
                                            'bid': OrderData.orderseqId,
                                            'a': 21, //21 new order request
                                            'ab': 2,
                                            "ordermsg": 'Manual order waiting for driver'
                                        }
                                        //sending push to driver
                                        sendpushtodriverorderexpired(oldDriverID, mssageto);
                                    }
                                })
                            }
                        })

                    }
                })
            }
        })
    }

    /*sending push to driver, orderexpired request */
    function sendpushtodriverorderexpired(driverid, message) {
        console.log("Entering order expire fcm")
        var User = me.Drivers;
        var _id = new ObjectID(driverid);
        var notify = {
            'title': 'ezshipp',
            'body': 'Hi, orderexpired!!!'
        };
        User.aggregate([{
            "$match": {
                $and: [{
                    "_id": _id,
                    "Devices.Active": '1'
                }]
            }
        }, {
            "$unwind": "$Devices"
        }, {
            "$match": {
                "Devices.Active": '1'
            }
        }, {
            "$project": {
                "_id": 0,
                "Devices": 1
            }
        }], function (err, result) {
            if (!err) {
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var devicetoken = result[i].Devices.DeviceToken;
                        if (result[i].Devices.DeviceType == "1") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_ios_driver(data, function (err, response) {
                                console.log("noification sent expired");
                            })
                        } else if (result[i].Devices.DeviceType == "2") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_android_driver(data, function (err, response) {
                                console.log("notification sent expired");
                            })
                        }
                    }
                }
            }
        })
    }
    /*sending push to driver, new order request */
    function sendpushtodriver(driverid, message) {
        var User = me.Drivers;
        var _id = new ObjectID(driverid);
        var notify = {
            'title': 'ezshipp',
            'body': 'Hi, New order request from Ezshipp '
        };
        User.aggregate([{
            "$match": {
                $and: [{
                    "_id": _id,
                    "Devices.Active": '1'
                }]
            }
        }, {
            "$unwind": "$Devices"
        }, {
            "$match": {
                "Devices.Active": '1'
            }
        }, {
            "$project": {
                "_id": 0,
                "Devices": 1
            }
        }], function (err, result) {
            if (!err) {
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var devicetoken = result[i].Devices.DeviceToken;
                        if (result[i].Devices.DeviceType == "1") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_ios_driver(data, function (err, response) {
                                console.log("Manual noification sent");
                            })
                        } else if (result[i].Devices.DeviceType == "2") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_android_driver(data, function (err, response) {
                                console.log("Manual noification sent");
                            })
                        }
                    }
                }
            }
        })
    }

};

// Searching all Orders of Customers
customermod.prototype.Searching_All_Orders_Customers = function (values, CustomerData, callback) {
    var me = this;
    var sync = require('sync');

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                userId: values.CustomerID,
                Whether_Deleted: false,
                $or: [{
                    orderseqId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    userId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    order_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    due_datetime: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    dropAddress: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    chargeId: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address1: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    address2: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    receiverPhone: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemName: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    itemDescription: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    subtotal_amount: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    tip_amount: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverycharge: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    pickupdeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                },
                {
                    deliverydeponame: {
                        '$regex': values.SearchValue,
                        $options: 'i'
                    }
                }
                ]
            };
            me.Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerData;
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            OrderData.push({
                First_name: Result2.First_name,
                Email: Result2.Email,
                Phone: Result2.Phone,
                countryCode: Result2.countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

// Searching all orders of zone
customermod.prototype.Searching_All_Orders_Zone = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
                status: {
                    $nin: [5, 9, 12, 14, 15]
                },
                $and: [{
                    $or: [{
                        pickupdepo: values.zoneseq
                    },
                    {
                        deliverydepo: values.zoneseq
                    }
                    ]
                },
                {
                    $or: [{
                        orderseqId: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        userId: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        order_datetime: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        due_datetime: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        pickAddress: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        dropAddress: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        chargeId: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        address1: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        address2: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        receiverName: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        receiverPhone: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        itemName: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        itemDescription: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        subtotal_amount: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        tip_amount: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        deliverycharge: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        pickupdeponame: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    },
                    {
                        deliverydeponame: {
                            '$regex': values.SearchValue,
                            $options: 'i'
                        }
                    }
                    ]
                }
                ]
            };
            me.Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            me.Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var OrderData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            OrderData.push({
                First_name: Result2.First_name,
                Email: Result2.Email,
                Phone: Result2.Phone,
                countryCode: Result2.countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};
//Search all Drivers
customermod.prototype.Search_All_Drivers = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3,
        $or: [{
            name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            lname: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            created_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            last_active_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            depoId: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ]
    };
    me.Drivers.find(query).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            DriverData.push({
                DriverID: Result[t]._id,
                name: Result[t].name,
                lname: Result[t].lname,
                email: Result[t].email,
                type_id: Result[t].type_id,
                acc_status: Result[t].acc_status,
                phone: Result[t].phone,
                created_dt: Result[t].created_dt,
                last_active_dt: Result[t].last_active_dt,
                depoId: Result[t].depoId,
                lic_expiry_dt: Result[t].lic_expiry_dt,
                license_pic: Result[t].license_pic,
                longitude: Result[t].location.longitude,
                latitude: Result[t].location.latitude,
                Longitude: Result[t].Location.Longitude,
                Latitude: Result[t].Location.Latitude,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                LastOnline: Result[t].LastOnline
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
//Search driver inside zone
customermod.prototype.Search_All_Drivers_of_Zones = function (values, callback) {
    var me = this;
    // var query = {
    //     depoId:values.ZoneID,
    //     acc_status:3,
    //     $or:[
    //         {name:{'$regex':values.SearchValue,$options: 'i'}},
    //         {lname:{'$regex':values.SearchValue,$options: 'i'}},
    //         {email:{'$regex':values.SearchValue,$options: 'i'}},
    //         {phone:{'$regex':values.SearchValue,$options: 'i'}},
    //         {created_dt:{'$regex':values.SearchValue,$options: 'i'}},
    //         {last_active_dt:{'$regex':values.SearchValue,$options: 'i'}},
    //         {depoId:{'$regex':values.SearchValue,$options: 'i'}}
    //     ]
    // };
    var query = {
        acc_status: 3,
        $or: [{
            name: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            lname: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            email: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            phone: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            created_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            last_active_dt: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        },
        {
            depoId: {
                '$regex': values.SearchValue,
                $options: 'i'
            }
        }
        ]
    };
    me.Drivers.find(query).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            DriverData.push({
                DriverID: Result[t]._id,
                name: Result[t].name,
                lname: Result[t].lname,
                email: Result[t].email,
                type_id: Result[t].type_id,
                acc_status: Result[t].acc_status,
                phone: Result[t].phone,
                created_dt: Result[t].created_dt,
                last_active_dt: Result[t].last_active_dt,
                depoId: Result[t].depoId,
                lic_expiry_dt: Result[t].lic_expiry_dt,
                license_pic: Result[t].license_pic,
                longitude: Result[t].location.longitude,
                latitude: Result[t].location.latitude,
                Longitude: Result[t].Location.Longitude,
                Latitude: Result[t].Location.Latitude,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                LastOnline: Result[t].LastOnline
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
customermod.prototype.Script_for_Driver_Vendor = function (values, callback) {
    var me = this;
    var changes = {
        DriverID: "5917107e79480271f6d053e0"
    };
    var multiplicity = {
        multi: true
    };
    var query = {};
    me.Vendors.update(query, changes, multiplicity).exec(function (err, Result) {
        callback(err, 'Updated Successfully');
    })
}
//find all drivers
customermod.prototype.Find_All_Drivers = function (callback) {
    var me = this;
    var query = {
        acc_status: 3
    };
    me.Drivers.find(query).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            DriverData.push({
                DriverID: Result[t]._id,
                name: Result[t].name,
                lname: Result[t].lname,
                email: Result[t].email,
                type_id: Result[t].type_id,
                acc_status: Result[t].acc_status,
                phone: Result[t].phone,
                created_dt: Result[t].created_dt,
                last_active_dt: Result[t].last_active_dt,
                depoId: Result[t].depoId,
                lic_expiry_dt: Result[t].lic_expiry_dt,
                license_pic: Result[t].license_pic,
                longitude: Result[t].location.longitude,
                latitude: Result[t].location.latitude,
                Longitude: Result[t].Location.Longitude,
                Latitude: Result[t].Location.Latitude,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                LastOnline: Result[t].LastOnline
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};

//Find ALL City Zones
customermod.prototype.Find_All_Zones_of_City = function (values, callback) {
    var me = this;
    var async = require('async');
    var Zone_Areas = require('../Models/Zone_Areas.js');
    var query = {
        city_id: values.CityID
    };
    me.ZONES.find(query).select('title zoneseq').sort('zoneseq').exec(function (err, Result) {
        var ZoneData = [];
        async.eachSeries(Result, function (item, resp) {
            Zone_Areas.find({ ZoneID: item._id }).sort('AreaName').select('AreaName -_id').exec(function (err, Result2) {
                if (!err) {
                    var AreaData = [];
                    for (var i = 0; i < Result2.length; i++) {
                        AreaData.push(Result2[i].AreaName);
                    }
                    ZoneData.push({
                        ZoneID: item._id,
                        ZoneName: item.title,
                        zoneseq: item.zoneseq,
                        AreaData: AreaData
                    })
                    resp();
                }
            })
        }, function (err) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    ZoneData: ZoneData
                }
            }));
        })
    })
}
//Find All Zone Pricing of Individual Zone
customermod.prototype.Find_Individual_Zones_Pricing = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function ZoneDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                city_id: values.CityID
            };
            me.ZONES.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function PricingDataFunction(ZoneID, callback) {
        process.nextTick(function () {
            var query = {
                _id: ZoneID
            };
            me.ZONES.findOne(query).exec(function (err, Result) {
                callback(null, Result.pricing);
            })
        })
    }

    function ZonePriceFunction(ZoneID, ZoneFetch, callback) {
        process.nextTick(function () {
            var query = {
                _id: ZoneID,
                pricing: {
                    $elemMatch: {
                        id: ZoneFetch._id
                    }
                }
            };
            me.ZONES.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function findElement(arr, propName, propValue, callback) {
        process.nextTick(function () {

            for (var i = 0; i < arr.length; i++)
                if (arr[i][propName] == propValue) {
                    callback(null, arr[i]);
                } else {
                    callback(null, {});
                }
        })
    }
    sync(function () {
        var Result = ZoneDataFunction.sync(null);
        var Pricing = PricingDataFunction.sync(null, values.ZoneID);
        var PriceData = [];
        var k = 0;
        for (var j = 0; j < Result.length; j++) {
            var Result2 = ZonePriceFunction.sync(null, values.ZoneID, Result[k]);
            var zonename;
            var instantdelivery;
            var hrdelivery;
            var samedaydelivery;
            var PriceSet;
            var pricedat;
            var zoneid;

            if (Result2 != null) {
                PriceSet = true;
                zonename = Result[k].title;
                zoneid = Result[k]._id;
                pricedat = findElement1(Pricing, "id", Result[k]._id);
                instantdelivery = pricedat.instant;
                hrdelivery = pricedat.hrdelivery;
                samedaydelivery = pricedat.samedaydelivery;
            } else {
                PriceSet = false;
                zonename = Result[k].title;
                zoneid = Result[k]._id;
                instantdelivery = 0;
                hrdelivery = 0;
                samedaydelivery = 0;
            }
            PriceData.push({
                PriceSet: PriceSet,
                zonename: zonename,
                zoneid: zoneid,
                instantdelivery: instantdelivery,
                hrdelivery: hrdelivery,
                samedaydelivery: samedaydelivery
            })
            k++;
        }

        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                PriceData: PriceData
            }
        }));
    })

    function findElement1(arr, propName, propValue) {
        for (var i = 0; i < arr.length; i++)
            if (arr[i][propName] == propValue)
                return arr[i];

        // will return undefined if not found; you could return a default instead
    }
}

//Find All Zones
customermod.prototype.Find_All_Zones_Pricing = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function ZoneDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                city_id: values.CityID
            };
            me.ZONES.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function ZonePriceFunction(ZoneData, ZoneFetch, callback) {
        process.nextTick(function () {
            var query = {
                _id: ZoneData._id,
                pricing: {
                    $elemMatch: {
                        id: ZoneFetch._id
                    }
                }
            };
            me.ZONES.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function findElement(arr, propName, propValue, callback) {
        process.nextTick(function () {

            for (var i = 0; i < arr.length; i++)
                if (arr[i][propName] == propValue) {
                    callback(null, arr[i]);
                } else {
                    callback(null, {});
                }
        })
    }
    sync(function () {
        var Result = ZoneDataFunction.sync(null);
        var ZoneData = [];
        var t = 0; //for of i
        for (var i = 0; i < Result.length; i++) {
            var PriceData = [];
            var k = 0;
            for (var j = 0; j < Result.length; j++) {
                var Result2 = ZonePriceFunction.sync(null, Result[t], Result[k]);
                var zonename;
                var instantdelivery;
                var hrdelivery;
                var samedaydelivery;
                var PriceSet;
                var pricedat;
                var zoneid;

                if (Result2 != null) {
                    PriceSet = true;
                    zonename = Result[k].title;
                    zoneid = Result[k]._id;
                    pricedat = findElement1(Result[t].pricing, "id", Result[k]._id);
                    instantdelivery = pricedat.instant;
                    hrdelivery = pricedat.hrdelivery;
                    samedaydelivery = pricedat.samedaydelivery;
                } else {
                    PriceSet = false;
                    zonename = Result[k].title;
                    zoneid = Result[k]._id;
                    instantdelivery = 0;
                    hrdelivery = 0;
                    samedaydelivery = 0;
                }
                PriceData.push({
                    PriceSet: PriceSet,
                    zonename: zonename,
                    zoneid: zoneid,
                    instantdelivery: instantdelivery,
                    hrdelivery: hrdelivery,
                    samedaydelivery: samedaydelivery
                })
                k++;
            }
            ZoneData.push({
                ZoneID: Result[t]._id,
                ZoneName: Result[t].title,
                zoneseq: Result[t].zoneseq,
                PriceData: PriceData
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                ZoneData: ZoneData
            }
        }));
    })

    function findElement1(arr, propName, propValue) {
        for (var i = 0; i < arr.length; i++)
            if (arr[i][propName] == propValue)
                return arr[i];

        // will return undefined if not found; you could return a default instead
    }
}
customermod.prototype.ADD_UPDATE_ZONAL_PRICING = function (values, callback) {
    var me = this;

    if (values.ZoneID != null || values.ToZoneID != null || values.PriceSet != null || values.instantdelivery != null || values.hrdelivery != null || values.samedaydelivery != null) {
        var query;
        var changes;
        var multiplicity;
        var Status;
        if (values.PriceSet == true || values.PriceSet == 'true') {
            Status = 'Price Updated Successfully';
            query = {
                _id: values.ZoneID,
                "pricing.id": values.ToZoneID
            };
            changes = {
                $set: {
                    "pricing.$.instant": values.instantdelivery,
                    "pricing.$.hrdelivery": values.hrdelivery,
                    "pricing.$.samedaydelivery": values.samedaydelivery
                }
            }

        } else if (values.PriceSet == false || values.PriceSet == 'false') {
            Status = 'Price Set Successfully';
            query = {
                $and: [{
                    "_id": values.ZoneID
                }]
            }
            changes = {
                $push: {
                    "pricing": {
                        "id": values.ToZoneID,
                        "instant": values.instantdelivery,
                        "hrdelivery": values.hrdelivery,
                        "samedaydelivery": values.samedaydelivery
                    },
                    $unset: {
                        "pricing._id": ""
                    }
                }
            }
        }
        multiplicity = {
            multi: false
        }
        me.ZONES.update(query, changes, multiplicity).exec(function (err, Result) {

            callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: Status
                }
            }));
        })
    } else {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};

customermod.prototype.Script_for_Updating_Default_Zonal_Pricing = function (callback) {
    var me = this;
    var sync = require('sync');
    var async = require('async');
    function ZoneFetchFunction(callback) {
        process.nextTick(function () {
            me.ZONES.find().sort('_id').select('_id').exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    function UpdateZoneFunction(ZoneData, AllZoneData, ZoneNumber, callback) {
        process.nextTick(function () {

            var t = 0;
            var PricingArray = [];
            for (var i = 0; i < AllZoneData.length; i++) {
                PricingArray.push({
                    id: AllZoneData[t]._id,
                    instant: 199,
                    hrdelivery: 129,
                    samedaydelivery: 99
                })
                t++;
            }
            setTimeout(function () {
                var query = {
                    _id: ZoneData._id
                };
                var changes = {
                    $set: {
                        zoneseq: ZoneNumber,
                        city_id: "59017436128c803f4753056e",
                        pricing: PricingArray
                    }
                }
                me.ZONES.update(query, changes).exec(function (err, Result) {
                    callback(null, 'Zone Default Pricing Updated Successfully')
                })
            }, 500);
        })
    }
    sync(function () {
        var AllZoneData = ZoneFetchFunction.sync(null);
        var t = 0;
        var ZoneNumber = 1;
        for (var i = 0; i < AllZoneData.length; i++) {
            var PricingStatus = UpdateZoneFunction.sync(null, AllZoneData[t], AllZoneData, ZoneNumber);
            ZoneNumber++;
            t++;
            console.log(PricingStatus + " " + t);
        }
        callback('All Zone Pricing Functionality Completed Successfully')
    })
}

//testing
customermod.prototype.TestingJson = function () {
    var me = this;
    var JSONARRAY = [{
        "id": "798198981",
        "instant": 99
    }, {
        "id": "798198999215",
        "instant": 129
    }, {
        "id": "798199928981",
        "instant": 199
    }]

    function findElement(arr, propName, propValue) {
        for (var i = 0; i < arr.length; i++)
            if (arr[i][propName] == propValue)
                return arr[i];

        // will return undefined if not found; you could return a default instead
    }
    json = findElement(JSONARRAY, "id", "798198999215");
    return 'success';
}



//Find All Cities
customermod.prototype.Find_All_Cities = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function CitiesDataFunction(callback) {
        process.nextTick(function () {
            var query = {

            };
            me.City.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };

    function CityDataFunction(CityID, callback) {
        process.nextTick(function () {
            var query = {
                _id: CityID
            };
            me.City.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    };
    sync(function () {
        var Result = CitiesDataFunction.sync(null);
        var CityData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var CityID = Result[t]._id;
            var Result2 = CityDataFunction.sync(null, CityID);

            CityData.push({
                CityID: CityID,
                name: Result2.name,
                latitude: Result[t].location.latitude,
                longitude: Result[t].location.longitude
            });
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                CityData: CityData
            }
        }));
    })
};

//Find all Countries
customermod.prototype.Find_All_Countries = function (callback) {
    var me = this;
    me.Country.find().exec(function (err, Result) {
        var CountryData = [];
        var t = 0;
        var CountryID;
        var name;
        for (var i = 0; i < Result.length; i++) {
            CountryID = Result[t]._id;
            name = Result[t].name;
            CountryData.push({
                CountryID: CountryID,
                name: name
            });
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                CountryData: CountryData
            }
        }));
    })
}

//find all driver inside zone
customermod.prototype.Find_All_Drivers_of_Zones = function (values, callback) {
    var me = this;
    var query = {
        acc_status: 3
    };
    me.Drivers.find(query).exec(function (err, Result) {
        var DriverData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var DriverName = me.Format_Beautify_String(Result[t].name + ' ' + Result[t].lname);
            DriverData.push({
                DriverID: Result[t]._id,
                name: DriverName,
                lname: Result[t].lname,
                email: Result[t].email,
                type_id: Result[t].type_id,
                acc_status: Result[t].acc_status,
                phone: Result[t].phone,
                created_dt: Result[t].created_dt,
                last_active_dt: Result[t].last_active_dt,
                depoId: Result[t].depoId,
                lic_expiry_dt: Result[t].lic_expiry_dt,
                license_pic: Result[t].license_pic,
                longitude: Result[t].location.longitude,
                latitude: Result[t].location.latitude,
                Longitude: Result[t].Location.Longitude,
                Latitude: Result[t].Location.Latitude,
                CurrentStatus: Result[t].CurrentStatus,
                status: Result[t].status,
                LastOnline: Result[t].LastOnline
            })
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                DriverData: DriverData
            }
        }));
    })
};
//Find all ZonePricing


// Find all orders of zone
customermod.prototype.Find_All_Orders_Zone = function (values, callback) {
    var me = this;
    var sync = require('sync');

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                $or: [{
                    pickupdepo: values.zoneseq
                },
                {
                    deliverydepo: values.zoneseq
                }
                ],
                Whether_Deleted: false,
                status: {
                    $nin: [5, 9, 12, 14, 15]
                }
            };
            me.Orders.find(query).sort({ orderseqId: -1 }).exec(function (err, Result) {
                // console.log("zone dataaa");
                // console.log(JSON.stringify(Result));
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            me.Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;

        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            OrderData.push({
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                countryCode: countryCode,
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: Result[t].deliverycharge,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    });
};

//Api for Zonal Pricing
customermod.prototype.Update_Zonal_Pricing = function (values, callback) {
    var me = this;
    var zoneprice = {
        instant
    }
};

//API for Retrieving Zones
customermod.prototype.Find_All_Zones = function (callback) {
    var me = this;
    var sync = require('sync');

    function ZoneDataFunction(callback) {
        process.nextTick(function () {
            me.ZONES.find().exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            console.log("Zone Length seq " + values.zoneseq);
            var query = {
                Whether_Deleted: false,
                $or: [{
                    pickupdepo: values.zoneseq
                },
                {
                    deliverydepo: values.zoneseq
                }
                ],
                status: {
                    $nin: [5, 9, 12, 14, 15]
                }
            };
            me.Orders.find(query).count().exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }
    sync(function () {
        var Result = ZoneDataFunction.sync(null);
        var ZoneData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = OrderDataFunction.sync(null, Result[t]);
            ZoneData.push({
                ZoneID: Result[t]._id,
                city: Result[t].city,
                city_id: Result[t].city_id,
                title: Result[t].title,
                zoneseq: Result[t].zoneseq,
                Count: Result2
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                ZoneData: ZoneData
            }
        }));
    })
};




//Module for Vendor Order Processing
customermod.prototype.Vendor_Order_Processing = function (values, VendorData, IP_Address, pos, callback) {
    var me = this;

    function GoogleLatLongFetching_Drop(values, pos, callback) {
        process.nextTick(function () {
            var me = this;
            var https = require('https');
            const querystring = require('querystring');
            var query = '';
            var searchquery = '';
            if (pos == 1) {
                query = values.drop_flat_house_details + values.drop_colony_street + values.drop_landmark + values.drop_city;
            } else if (pos == 2) {
                query = values.drop_colony_street + values.drop_landmark + values.drop_city;
            } else if (pos == 3) {
                query = values.drop_landmark + values.drop_city;
            } else if (pos == 4) {
                query = values.Pincode + values.drop_city;
            }
            searchquery = querystring.escape(query);
            var dropadd = values.drop_flat_house_details + ',' + values.drop_colony_street + ',' + values.drop_landmark + ',' + values.drop_city;
            var url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + searchquery + '&radius=1000&key=AIzaSyCOSzrV21ii_0a6d8XC08vARjJH2TYbLJs';
            var result = '';
            var jsonresult;
            var DropData;
            https.get(url, (res) => {
                res.setEncoding('utf8');
                res.on('data', (d) => {
                    result += d;
                })
                res.on('end', () => {
                    jsonresult = JSON.parse(result);
                    console.log("google result " + JSON.stringify(jsonresult));
                    if (jsonresult.results == 0) {
                        DropData = {
                            dropAddress: dropadd,
                            latlong: false
                        }
                    } else {
                        DropData = {
                            dropAddress: dropadd,
                            dropLatitude: jsonresult.results[0].geometry.location.lat,
                            dropLongitude: jsonresult.results[0].geometry.location.lng,
                            latlong: true
                        };
                    }
                    callback(null, DropData);
                })
            });
        })
    }

    function BearingAngleFunction(PickData, DropData, callback) {
        process.nextTick(function () {
            var geolib = require('geolib');
            var PickLatLong;
            var DropLatLong;
            var BearingData = [];
            var t = 0;
            for (var i = 0; i < PickData.length; i++) {
                if (DropData[t].latlong == false) {
                    BearingData.push(0);
                    t++;
                } else {
                    PickLatLong = {
                        latitude: PickData[t].pickLatitude,
                        longitude: PickData[t].pickLongitude
                    }
                    DropLatLong = {
                        latitude: DropData[t].dropLatitude,
                        longitude: DropData[t].dropLongitude
                    }

                    var bearangle = geolib.getBearing(PickLatLong, DropLatLong);
                    if (bearangle >= 0 && bearangle <= 30) {
                        BearingData.push(bearangle);
                        t++;
                    } else {
                        BearingData.push(bearangle);
                        t++;
                    }
                }
            }
            callback(null, BearingData);
        })
    }

    function DistanceFunction(PickData, DropData, callback) {
        process.nextTick(function () {
            var geolib = require('geolib');
            var PickLatLong;
            var DropLatLong;
            var DistanceData = [];
            var t = 0;
            for (var i = 0; i < PickData.length; i++) {
                if (DropData[t].latlong == false) {
                    DistanceData.push(0);
                    t++;
                } else {
                    PickLatLong = {
                        latitude: PickData[t].pickLatitude,
                        longitude: PickData[t].pickLongitude
                    }
                    DropLatLong = {
                        latitude: DropData[t].dropLatitude,
                        longitude: DropData[t].dropLongitude
                    }

                    var distance = geolib.getDistance(PickLatLong, DropLatLong);

                    DistanceData.push(distance);
                    t++;
                }
            }
            callback(null, DistanceData);
        })
    }

    function DistanceFetch(beariongarray, orderarrydetailarray, callback) {
        process.nextTick(function () {

            console.log("uday starting  " + JSON.stringify(beariongarray));

            var final_directionarray = [];
            var directioncount;
            var final_orderiddetailarray;

            function barringvaluefunc(barringvalue, final_directionarray, orderarrydetailarray) {
                let insidedirectionarray = [];

                console.log("uday infunction  " + JSON.stringify(beariongarray));
                if (barringvalue >= 0 && barringvalue < 30) {


                    for (var i = 0; i < beariongarray.length; i++) {



                        if ((0 <= beariongarray[i]) && (30 >= beariongarray[i])) {


                            if (((barringvalue - 30) <= (beariongarray[i] + 360)) && ((barringvalue + 30) >= (beariongarray[i] + 360))) {

                                console.log("condition 1 " + (barringvalue - 30) + " <= " + beariongarray[i])

                                console.log("condition 2 " + (barringvalue + 30) + " >= " + beariongarray[i])

                                insidedirectionarray.push(orderarrydetailarray[i]);
                                delete beariongarray[i]
                                delete orderarrydetailarray[i]

                            }


                        } else if ((330 <= beariongarray[i]) && (360 >= beariongarray[i])) {

                            if ((((barringvalue + 360) + 30) >= (beariongarray[i])) && (((360 + barringvalue) - 30) <= (beariongarray[i]))) {

                                console.log("condition 1 " + (barringvalue - 30) + " <= " + beariongarray[i])

                                console.log("condition 2 " + (barringvalue + 30) + " >= " + beariongarray[i])

                                insidedirectionarray.push(orderarrydetailarray[i]);
                                delete beariongarray[i]
                                delete orderarrydetailarray[i]

                            }

                        } else {


                            if (((barringvalue - 30) <= beariongarray[i]) && ((barringvalue + 30) >= beariongarray[i])) {

                                console.log("condition 1 " + (barringvalue - 30) + " <= " + beariongarray[i])

                                console.log("condition 2 " + (barringvalue + 30) + " >= " + beariongarray[i])

                                insidedirectionarray.push(orderarrydetailarray[i]);
                                delete beariongarray[i]
                                delete orderarrydetailarray[i]
                            }
                        }

                    }

                } else if (barringvalue > 330 && barringvalue <= 360) {


                    for (var i = 0; i < beariongarray.length; i++) {

                        if ((0 <= beariongarray[i]) && (30 >= beariongarray[i])) {


                            if (((barringvalue - 30) <= (beariongarray[i] + 360)) && ((barringvalue + 30) >= (beariongarray[i] + 360))) {

                                console.log("condition 1 " + (barringvalue - 30) + " <= " + beariongarray[i])

                                console.log("condition 2 " + (barringvalue + 30) + " >= " + beariongarray[i])

                                insidedirectionarray.push(orderarrydetailarray[i]);
                                delete beariongarray[i]
                                delete orderarrydetailarray[i]

                            }


                        } else {

                            if (((barringvalue - 30) <= beariongarray[i]) && ((barringvalue + 30) >= beariongarray[i])) {

                                console.log("condition 1 " + (barringvalue - 30) + " <= " + beariongarray[i])

                                console.log("condition 2 " + (barringvalue + 30) + " >= " + beariongarray[i])

                                insidedirectionarray.push(orderarrydetailarray[i]);
                                delete beariongarray[i]
                                delete orderarrydetailarray[i]
                            }
                        }
                    }

                } else {


                    for (var i = 0; i < beariongarray.length; i++) {
                        console.log("oncedata:  " + JSON.stringify(insidedirectionarray))
                        console.log("uday moveing to case 3 " + barringvalue + "  baringvalue " + beariongarray[i])
                        if (beariongarray[i] != "undefined") {
                            if (((barringvalue + 30) >= beariongarray[i]) && ((barringvalue - 30) <= beariongarray[i])) {

                                insidedirectionarray.push(orderarrydetailarray[i]);

                                delete beariongarray[i]
                                delete orderarrydetailarray[i]

                            } else {


                            }
                        }
                    }

                }

                final_directionarray.push(insidedirectionarray);
            }



            for (var i = 0; i < beariongarray.length; i++) {

                console.log("bearing value " + beariongarray[i] + " postion " + i);

                barringvaluefunc(beariongarray[i], final_directionarray, orderarrydetailarray);

            }


            console.log("finaldata after completion   :  " + JSON.stringify(final_directionarray))

            return callback(null, final_directionarray);


        })
    }

    function StroingOrderDetailFunction(OrderData, VendorData, PickData, DropData, VendorOrderID, IP_Address, DistanceData, callback) {
        process.nextTick(function () {
            var OrderDetailsIDArray = [];
            var t = 0;
            for (var i = 0; i < OrderData.length; i++) {
                var date = new Date();
                var detailid = me.uuid();
                if (DropData[t].latlong == false) {
                    var DetailData = new me.Vendor_Orders_Detail({
                        CustomerID: VendorData.CustomerID,
                        VendorID: VendorData.VendorID,
                        VendorOrderID: VendorOrderID,
                        VendorOrderDetailID: detailid,
                        PickAddress: PickData[t].pickAddress,
                        PickLatitude: PickData[t].pickLatitude,
                        PickLongitude: PickData[t].pickLongitude,
                        DropAddress: DropData[t].dropAddress,
                        DropLatitude: 0,
                        DropLongitude: 0,
                        PickDropDistance: 0,
                        receiverName: OrderData[t].receiverName,
                        receiverPhone: OrderData[t].receiverPhone,
                        paymentType: OrderData[t].paymentType,
                        paymentId: OrderData[t].paymentId,
                        itemName: OrderData[t].itemName,
                        itemweight: OrderData[t].itemweight,
                        itemDescription: OrderData[t].itemDescription,
                        deliverycharge: OrderData.price,
                        Pincode: OrderData[t].Pincode,
                        LocationFound: false,
                        IP_Address: IP_Address,
                        created_at: date,
                        updated_at: date
                    });
                    DetailData.save();
                    OrderDetailsIDArray.push(detailid);
                    t++;
                } else {
                    var DetailData = new me.Vendor_Orders_Detail({
                        CustomerID: VendorData.CustomerID,
                        VendorID: VendorData.VendorID,
                        VendorOrderID: VendorOrderID,
                        VendorOrderDetailID: detailid,
                        PickAddress: PickData[t].pickAddress,
                        PickLatitude: PickData[t].pickLatitude,
                        PickLongitude: PickData[t].pickLongitude,
                        DropAddress: DropData[t].dropAddress,
                        DropLatitude: DropData[t].dropLatitude,
                        DropLongitude: DropData[t].dropLongitude,
                        PickDropDistance: DistanceData[t],
                        receiverName: OrderData[t].receiverName,
                        receiverPhone: OrderData[t].receiverPhone,
                        paymentType: OrderData[t].paymentType,
                        paymentId: OrderData[t].paymentId,
                        itemName: OrderData[t].itemName,
                        itemweight: OrderData[t].itemweight,
                        itemDescription: OrderData[t].itemDescription,
                        deliverycharge: OrderData.price,
                        Pincode: OrderData[t].Pincode,
                        LocationFound: true,
                        IP_Address: IP_Address,
                        created_at: date,
                        updated_at: date
                    });
                    DetailData.save();
                    OrderDetailsIDArray.push(detailid);
                    t++;
                }
            }
            callback(null, OrderDetailsIDArray);
        })
    }

    function UpdateOrderDetailFunction1(VendorOrderID, BearingArray, DetailsOrderIDArray, callback) {
        process.nextTick(function () {
            console.log(BearingArray);
            var query = {
                VendorOrderID: VendorOrderID
            }
            var changes = {
                BearingArray: BearingArray,
                DetailsOrderIDArray: DetailsOrderIDArray,
                Processing_Status: 2
            };
            var multiplicity = {
                multi: false
            }
            me.Vendors_Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                console.log("Update Error " + JSON.stringify(err));
                console.log("Update Result " + JSON.stringify(Result));
                callback(false, 'Updated Successfully');
            })
        })
    }

    function UpdateOrderDetailFunction(VendorOrderID, No_Of_Directions, DirectionArray, callback) {
        process.nextTick(function () {
            var query = {
                VendorOrderID: VendorOrderID
            }
            var changes = {
                No_Of_Directions: No_Of_Directions,
                DirectionArray: DirectionArray,
                Processing_Status: 2
            };
            var multiplicity = {
                multi: false
            }
            me.Vendors_Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                console.log("Update Error " + JSON.stringify(err));
                console.log("Update Result " + JSON.stringify(Result));
                callback(false, 'Updated Successfully');
            })
        })
    }
    function OrderPlacingFunction(VendorData, callback) {
        process.nextTick(function () {
            var querystring = require('querystring');
            var https = require('https');
            var config = require("../Config/config.js");
            var post_data = querystring.stringify({
                'CustomerID': VendorData.CustomerID,
                'pickAddress': VendorData.PickAddress,
                'dropAddress': 'Ezshipp',
                'pickLatitude': VendorData.PickLatitude,
                'pickLongitude': VendorData.PickLongitude,
                'dropLatitude': 17.454899,
                'dropLongitude': 78.376309,
                'itemName': 'Ezshipp Vendor Bulk Orders',
                'itemDescription': 'Pikcup Vendor Bulk Orders',
                'order_datetime': me.DateTime(),
                'orderType': 1,
                'bookingType': 1,
                'receiverName': 'ezshipp',
                'receiverPhone': '9494986861',
                'paymentType': 1,
                'paymentId': '',
                'deliverycharge': 0,
                'DriverID': VendorData.DriverID
            });

            var result = '';

            var options = {
                host: config.website,
                port: 443,
                method: 'POST',
                path: '/Vendor_Single_Ordering',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(post_data)
                }
            };
            var str = '';
            var req = https.request(options, function (res) {
                var data;
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    str += chunk;
                });
                res.on('end', function () {
                    var result = JSON.parse(str);
                    callback(null, result);
                });
            });
            req.write(post_data);
            req.end();
        })
    };
    var sync = require('sync');
    sync(function () {
        var OrderData = JSON.parse(values.OrderData);
        console.log("OrderData");
        console.log(OrderData);
        var PlaceOrder = OrderPlacingFunction.sync(null, VendorData);
        console.log("Place Order Result " + JSON.stringify(PlaceOrder));
        // var OrderData = [
        //     {
        //         drop_flat_house_details: 'evontex software',
        //         drop_colony_street: 'telecom nagar',
        //         drop_landmark: 'above reliance',
        //         drop_city: 'hyderabad',
        //         itemName: 'mobile',
        //         itemDescription: 'very light weight',
        //         receiverName: 'uday',
        //         receiverPhone: '8801362790',
        //         paymentType: '1',
        //         paymentId: '',
        //         itemweight:100,
        //         Pincode:500032
        //     },
        //     {
        //         drop_flat_house_details: 'rambagh',
        //         drop_colony_street: 'pandurangar nagar,rambagh',
        //         drop_landmark: 'pearl county , attapur',
        //         drop_city: 'hyderabad',
        //         itemName: 'mobile',
        //         itemDescription: 'very light weight',
        //         receiverName: 'uday',
        //         receiverPhone: '8801362790',
        //         paymentType: '1',
        //         paymentId: '',
        //         itemweight:500,
        //         Pincode:500048
        //     },
        //     {
        //         drop_flat_house_details: 'kulsumpura',
        //         drop_colony_street: 'karwan main road',
        //         drop_landmark: 'kulsumpura school',
        //         drop_city: 'hyderabad',
        //         itemName: 'mobile',
        //         itemDescription: 'very light weight',
        //         receiverName: 'uday',
        //         receiverPhone: '8801362790',
        //         paymentType: '1',
        //         paymentId: '',
        //         itemweight:500,
        //         Pincode:500006
        //     },
        //     {
        //         drop_flat_house_details: 'big bazar',
        //         drop_colony_street: 'badi chowdi',
        //         drop_landmark: 'tarakarama theater',
        //         drop_city: 'hyderabad',
        //         itemName: 'mobile',
        //         itemDescription: 'very light weight',
        //         receiverName: 'uday',
        //         receiverPhone: '8801362790',
        //         paymentType: '1',
        //         paymentId: '',
        //         itemweight:500,
        //         Pincode:500095
        //     },
        //     {
        //         drop_flat_house_details: 'stadium',
        //         drop_colony_street: 'mumbai highway',
        //         drop_landmark: 'hyderabad central university',
        //         drop_city: 'hyderabad',
        //         itemName: 'mobile',
        //         itemDescription: 'very light weight',
        //         receiverName: 'uday',
        //         receiverPhone: '8801362790',
        //         paymentType: '1',
        //         paymentId: '',
        //         itemweight:500,
        //         Pincode:500032
        //     }
        // ];
        var t = 0;
        var DropData = [];
        var Total_Weight = 0;
        var Total_Orders = 0;
        var Total_Price = 0;
        var PickData = [];
        for (var i = 0; i < OrderData.length; i++) {
            var pos = 1;
            console.log("Entering pos " + pos);
            var Dropresult = GoogleLatLongFetching_Drop.sync(null, OrderData[t], pos);
            if (Dropresult.latlong == true) {
                DropData.push(Dropresult);
            } else {
                pos = 2;
                console.log("Entering pos " + pos);
                Dropresult = GoogleLatLongFetching_Drop.sync(null, OrderData[t], pos);
                if (Dropresult.latlong == true) {
                    DropData.push(Dropresult);
                } else {
                    pos = 3;
                    console.log("Entering pos " + pos);
                    Dropresult = GoogleLatLongFetching_Drop.sync(null, OrderData[t], pos);
                    if (Dropresult.latlong == true) {
                        DropData.push(Dropresult);
                    } else {
                        pos = 4;
                        console.log("Entering pos " + pos);
                        Dropresult = GoogleLatLongFetching_Drop.sync(null, OrderData[t], pos);
                        if (Dropresult.latlong == true) {
                            DropData.push(Dropresult);
                        } else {

                        }
                    }
                }
            }
            PickData.push({
                pickAddress: VendorData.PickAddress,
                pickLatitude: VendorData.PickLatitude,
                pickLongitude: VendorData.PickLongitude
            });
            Total_Weight += parseInt(OrderData[t].itemweight);
            Total_Orders = OrderData.length;
            t++;
        }
        var BearingData = BearingAngleFunction.sync(null, PickData, DropData);
        var DistanceData = DistanceFunction.sync(null, PickData, DropData);

        Total_Price = (VendorData.Price) * Total_Orders;
        // console.log(PickData);
        // console.log(DropData);
        // console.log(Total_Price);
        // console.log(Total_Weight);
        // console.log(Total_Orders);
        // console.log(BearingData);
        // console.log(DistanceData);



        var VendorOrderID = me.uuid();
        var date = new Date();
        var VendorOrderData = new me.Vendors_Orders({
            CustomerID: VendorData.CustomerID,
            VendorID: VendorData.VendorID,
            VendorOrderID: VendorOrderID,
            Total_Weight: Total_Weight,
            Total_Orders: Total_Orders,
            Total_Price: Total_Price,
            Processing_Status: 1,
            IP_Address: IP_Address,
            created_at: date,
            updated_at: date
        });
        VendorOrderData.save();

        var OrderDetailsIDArray = StroingOrderDetailFunction.sync(null, OrderData, VendorData, PickData, DropData, VendorOrderID, IP_Address, DistanceData);


        var newbearing = [];
        let beararrayfinal = [];
        let orderarrayidfinal = [];
        var neworderspush = [];
        var newDistanceData = [];
        var newDirectionArray = [];

        for (var j = 0; j < BearingData.length; j++) {

            if (BearingData[j] == 0) {

            } else {
                newbearing.push(BearingData[j]);
                neworderspush.push(OrderDetailsIDArray[j]);
                newDistanceData.push(DistanceData[j]);
            }
        }
        beararrayfinal = newbearing;
        orderarrayidfinal = neworderspush;
        console.log(beararrayfinal);
        console.log(orderarrayidfinal);
        var updatefunction1 = UpdateOrderDetailFunction1.sync(null, VendorOrderID, beararrayfinal, orderarrayidfinal);
        console.log(updatefunction);


        var FinalDistanceArray = DistanceFetch.sync(null, newbearing, neworderspush);
        console.log(FinalDistanceArray);
        var empty = [];
        for (var k = 0; k < FinalDistanceArray.length; k++) {

            if (FinalDistanceArray[k].length == 0) {
                console.log("Entering Empty");
            } else {
                newDirectionArray.push(FinalDistanceArray[k]);
            }
        }
        console.log(newDirectionArray);
        var no_of_directions = newDirectionArray.length;
        console.log("no of Directions " + no_of_directions);
        var updatefunction = UpdateOrderDetailFunction.sync(null, VendorOrderID, no_of_directions, newDirectionArray);
        console.log(updatefunction);
        callback(false, 'Success');
    })
};



//Module for Bulk Order Vendor
customermod.prototype.Send_Order_for_Bulk_Order_Vendor = function (values, callback) {
    var me = this;
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');

    function asyncFunction(OrderData, callback) {
        process.nextTick(function () {
            var config = require("../Config/config.js");
            var collectionType;
            if (OrderData.collectionType == null || OrderData.collectionType == '' || OrderData.collectionType == ' ') {
                collectionType = 1;
            } else {
                collectionType = parseInt(OrderData.collectionType);
            }
            var post_data = querystring.stringify({
                'CustomerID': OrderData.CustomerID,
                'pick_flat_house_details': OrderData.pick_flat_house_details,
                'pick_colony_street': OrderData.pick_colony_street,
                'pick_landmark': OrderData.pick_landmark,
                'pick_city': OrderData.pick_city,
                'drop_flat_house_details': OrderData.drop_flat_house_details,
                'drop_colony_street': OrderData.drop_colony_street,
                'drop_landmark': OrderData.drop_landmark,
                'drop_city': OrderData.drop_city,
                'itemName': OrderData.itemName,
                'itemDescription': OrderData.itemDescription,
                'receiverName': OrderData.receiverName,
                'receiverPhone': OrderData.receiverPhone,
                'paymentType': OrderData.paymentType,
                'collectionType': collectionType,
                'paymentId': OrderData.paymentId,
                'deliverycharge': OrderData.deliverycharge
            });

            var result = '';

            var options = {
                host: config.website,
                port: 443,
                method: 'POST',
                path: '/Order_Anything_Vendor',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(post_data)
                }
            };
            var str = '';
            var req = https.request(options, function (res) {
                var data;
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    str += chunk;
                });
                res.on('end', function () {
                    var result = JSON.parse(str);
                    callback(null, result);
                });
            });
            req.write(post_data);
            req.end();
        })
    }

    var sync = require('sync');
    sync(function () {
        var BodyArray = values.OrderData;
        var t = 0;
        var ResultArray = [];
        for (var i = 0; i < BodyArray.length; i++) {
            var OrderData;
            var CustomerID = BodyArray[t].CustomerID;
            var pick_flat_house_details = BodyArray[t].pick_flat_house_details;
            var pick_colony_street = BodyArray[t].pick_colony_street;
            var pick_landmark = BodyArray[t].pick_landmark;
            var pick_city = BodyArray[t].pick_city;
            var drop_flat_house_details = BodyArray[t].drop_flat_house_details;
            var drop_colony_street = BodyArray[t].drop_colony_street;
            var drop_landmark = BodyArray[t].drop_landmark;
            var drop_city = BodyArray[t].drop_city;
            var itemName = BodyArray[t].itemName;
            var itemDescription = BodyArray[t].itemDescription;
            var receiverName = BodyArray[t].receiverName;
            var receiverPhone = BodyArray[t].receiverPhone;
            var paymentType = BodyArray[t].paymentType;
            var paymentId = BodyArray[t].paymentId;
            var deliverycharge = BodyArray[t].deliverycharge;
            OrderData = {
                CustomerID: CustomerID,
                pick_flat_house_details: pick_flat_house_details,
                pick_colony_street: pick_colony_street,
                pick_landmark: pick_landmark,
                pick_city: pick_city,
                drop_flat_house_details: drop_flat_house_details,
                drop_colony_street: drop_colony_street,
                drop_landmark: drop_landmark,
                drop_city: drop_city,
                itemName: itemName,
                itemDescription: itemDescription,
                receiverName: receiverName,
                receiverPhone: receiverPhone,
                paymentType: paymentType,
                paymentId: paymentId,
                deliverycharge: deliverycharge
            };

            var result = asyncFunction.sync(null, OrderData);
            ResultArray.push({
                success: result.success,
                Status: result.extras.Status
            })
            t++;
        }
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Bulk Order Status',
                ResultArray: ResultArray
            }
        }));
    })
};


//Module for Bulk Order
customermod.prototype.Send_Order_for_Bulk_Order = function (values, callback) {
    var me = this;
    var querystring = require('querystring');
    var https = require('https');
    var fs = require('fs');

    function asyncFunction(OrderData, callback) {
        process.nextTick(function () {
            var config = require("../Config/config.js");
            var collectionType;
            if (OrderData.collectionType == null || OrderData.collectionType == '' || OrderData.collectionType == ' ') {
                collectionType = 1;
            } else {
                collectionType = parseInt(OrderData.collectionType);
            }
            var Monthly_Invoice;
            if (OrderData.Monthly_Invoice == null || OrderData.Monthly_Invoice == false || OrderData.Monthly_Invoice == "false") {
                Monthly_Invoice = false;
            } else if (OrderData.Monthly_Invoice == true || OrderData.Monthly_Invoice == "true") {
                Monthly_Invoice = true;
            }
            if (OrderData.itemImage == null || OrderData.itemImage == "") {
                var post_data = querystring.stringify({
                    'CustomerID': OrderData.CustomerID,
                    'pickAddress': OrderData.pickAddress,
                    'dropAddress': OrderData.dropAddress,
                    'pickLatitude': OrderData.pickLatitude,
                    'pickLongitude': OrderData.pickLongitude,
                    'dropLatitude': OrderData.dropLatitude,
                    'dropLongitude': OrderData.dropLongitude,
                    'itemName': OrderData.itemName,
                    'itemDescription': OrderData.itemDescription,
                    'order_datetime': OrderData.order_datetime,
                    'Monthly_Invoice': Monthly_Invoice,
                    'orderType': OrderData.orderType,
                    'bookingType': OrderData.bookingType,
                    'receiverName': OrderData.receiverName,
                    'receiverPhone': OrderData.receiverPhone,
                    'paymentType': OrderData.paymentType,
                    'collectionType': collectionType,
                    'paymentId': OrderData.paymentId,
                    'deliverycharge': OrderData.deliverycharge,
                    'Bulk_Order': true
                });
            } else {
                var post_data = querystring.stringify({
                    'CustomerID': OrderData.CustomerID,
                    'pickAddress': OrderData.pickAddress,
                    'dropAddress': OrderData.dropAddress,
                    'pickLatitude': OrderData.pickLatitude,
                    'pickLongitude': OrderData.pickLongitude,
                    'dropLatitude': OrderData.dropLatitude,
                    'dropLongitude': OrderData.dropLongitude,
                    'itemName': OrderData.itemName,
                    'itemDescription': OrderData.itemDescription,
                    'itemImage': OrderData.itemImage,
                    'order_datetime': OrderData.order_datetime,
                    'Monthly_Invoice': Monthly_Invoice,
                    'orderType': OrderData.orderType,
                    'bookingType': OrderData.bookingType,
                    'receiverName': OrderData.receiverName,
                    'receiverPhone': OrderData.receiverPhone,
                    'paymentType': OrderData.paymentType,
                    'collectionType': collectionType,
                    'paymentId': OrderData.paymentId,
                    'deliverycharge': OrderData.deliverycharge,
                    'Bulk_Order': true
                });
            }

            var result = '';

            var options = {
                host: config.website,
                port: 443,
                method: 'POST',
                path: '/Order_Anything',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(post_data)
                }
            };
            var str = '';
            var req = https.request(options, function (res) {
                var data;
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    var result = JSON.parse(chunk);
                    callback(null, result);
                });
            });
            req.write(post_data);
            req.end();
        })
    }

    var sync = require('sync');
    sync(function () {
        var BodyArray = values.OrderData;
        var t = 0;
        for (var i = 0; i < BodyArray.length; i++) {
            var OrderData;
            var CustomerID = BodyArray[t].CustomerID;
            var pickAddress = BodyArray[t].pickAddress;
            var dropAddress = BodyArray[t].dropAddress;
            var pickLatitude = BodyArray[t].pickLatitude;
            var pickLongitude = BodyArray[t].pickLongitude;
            var dropLatitude = BodyArray[t].dropLatitude;
            var dropLongitude = BodyArray[t].dropLongitude;
            var itemName = BodyArray[t].itemName;
            var itemDescription = BodyArray[t].itemDescription;
            var order_datetime = BodyArray[t].order_datetime;
            var orderType = BodyArray[t].orderType;
            var bookingType = BodyArray[t].bookingType;
            var receiverName = BodyArray[t].receiverName;
            var receiverPhone = BodyArray[t].receiverPhone;
            var paymentType = BodyArray[t].paymentType;
            var paymentId = BodyArray[t].paymentId;
            var deliverycharge = BodyArray[t].deliverycharge;
            OrderData = {
                CustomerID: CustomerID,
                pickAddress: pickAddress,
                dropAddress: dropAddress,
                pickLatitude: pickLatitude,
                pickLongitude: pickLongitude,
                dropLatitude: dropLatitude,
                dropLongitude: dropLongitude,
                itemName: itemName,
                itemDescription: itemDescription,
                order_datetime: order_datetime,
                orderType: orderType,
                bookingType: bookingType,
                receiverName: receiverName,
                receiverPhone: receiverPhone,
                paymentType: paymentType,
                paymentId: paymentId,
                deliverycharge: deliverycharge
            };
            var result = asyncFunction.sync(null, OrderData);
            t++;
        }
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'All Your Order Placed Successfully'
            }
        }));
    })
};


//Check Validity of Field for Pickup and Drop Zone
customermod.prototype.Check_Validity_Pickup_Drop_Zone = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.pickLatitude == null || values.pickLongitude == null || values.dropLatitude == null || values.dropLatitude == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

//finding zone related to pickup and delivery locations
customermod.prototype.Vendor_Zone_Processing_Allocating_Driver = function (values, OrderData, DriverData, callback) {
    var me = this;
    var error;
    var zone = me.ZONES;
    var Order = me.Orders;
    var config = require("../Config/config.js");

    var async = require('async');
    var randomstring = require("randomstring");

    var distance = require('google-distance-matrix');
    distance.key(config.Google_Api_Key);
    distance.units('imperial');
    distance.mode('driving');
    var moment = require('moment');

    var publishkey = config.pubnubkeys.publishkey;
    var subscribekey = config.pubnubkeys.subscribekey;
    var pubnubs = require("pubnub");
    var pubnub = new pubnubs({
        ssl: true,
        publish_key: publishkey,
        subscribe_key: subscribekey
    });
    ObjectID = require('mongodb').ObjectID;

    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    zone.findOne({
        'polygons': {
            $geoIntersects: {
                $geometry: {
                    type: "Point",
                    coordinates: [pickLongitude, pickLatitude]
                }
            }
        }
    }, function (err, pickupzoneObj) {
        zone.findOne({
            'polygons': {
                $geoIntersects: {
                    $geometry: {
                        type: "Point",
                        coordinates: [dropLongitude, dropLatitude]
                    }
                }
            }
        }, function (err, dropupzoneObj) {
            callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'we will dispatch the driver shortly to pickup your package'
                }
            }));
            var pickupdepo;
            var pickupzoneid;
            var pickupdeponame;
            var deliverydepo;
            var deliverydeponame;
            if (pickupzoneObj == null) {
                pickupdepo = 100;
                pickupdeponame = 'Vendor Order';
                pickupzoneid = 'VendorZoneID';
            } else {
                pickupdepo = pickupzoneObj.zoneseq;
                pickupdeponame = pickupzoneObj.title;
                pickupzoneid = String(pickupzoneObj._id);
            }
            if (dropupzoneObj == null) {
                deliverydepo = 100;
                deliverydeponame = 'Vendor Order';
            } else {
                deliverydepo = dropupzoneObj.zoneseq;
                deliverydeponame = dropupzoneObj.title;
            }
            var updateObj = {
                $set: {
                    "orderId": String(OrderData._id),
                    "pickupdepo": pickupdepo,
                    "pickupdeponame": pickupdeponame,
                    "deliverydepo": deliverydepo,
                    "deliverydeponame": deliverydeponame
                }
            };

            Order.update({
                "_id": String(OrderData._id)
            }, updateObj, function (err, resultObj) {
                if (!err) {
                    var reqdata = {
                        "orderid": String(OrderData._id),
                        "pickupdepo": pickupzoneid,
                        "plat": pickLatitude,
                        "plng": pickLongitude,
                        "DriverData": DriverData
                    };

                    // error = false;
                    AllocatedJob_to_Driver(reqdata, function (err, obj) {
                        if (!err) {
                            error = false;
                            // return callback(error,obj);
                            // return callback(false,new me.ApiResponce({ success: true, extras: { Status:'we will dispatch the driver shortly to pickup your package'} }) );
                        }
                    })
                }
            })

        })
    });

    function AllocatedJob_to_Driver(reqdata, callback) {
        var originsarr = [];
        var listarr = [];
        var list = [];
        var finallist = [];
        var latLong1 = reqdata.DriverData.location.latitude + "," + reqdata.DriverData.location.longitude
        originsarr.push(latLong1.toString());
        list.push(reqdata.DriverData);
        var origins = originsarr;
        var dlatlong = reqdata.plat + "," + reqdata.plng;
        var destinations = [dlatlong.toString()];
        distance.matrix(origins, destinations, function (err, distances) {
            if (!err) {
                if (distances.status == 'OK') {
                    for (var i = 0; i < origins.length; i++) {
                        for (var j = 0; j < destinations.length; j++) {
                            var origin = distances.origin_addresses[i]; //IT is from Distance Matrix
                            var destination = distances.destination_addresses[j]; //IT is from Distance Matrix
                            if (distances.rows[i].elements[j].status == 'OK') {
                                var distance = distances.rows[i].elements[j].distance.text;
                                var duration = distances.rows[i].elements[j].duration.value;
                                var duration1 = distances.rows[i].elements[j].duration.text;
                                var distancelocation = distances.rows[i].elements[j].distance.value;
                                distancelocation = distancelocation / 1000;
                                distancelocation = parseFloat(distancelocation).toFixed(2);
                                listarr.push({
                                    'distance': distancelocation,
                                    'duration': duration,
                                    'flag': 1
                                })
                            } else {
                                listarr.push({
                                    'distance': "",
                                    'duration': "",
                                    'flag': 2
                                })
                            }
                        }
                    }

                    for (var i = 0; i < listarr.length; i++) {
                        list[i].distance = listarr[i].distance;
                        list[i].duration = listarr[i].duration;
                        list[i].flag = listarr[i].flag;
                    }

                    list.filter(function (el) {
                        return el.flag == 1;
                    });

                    function sortNumber(a, b) {
                        return a.duration - b.duration;
                    }
                    list.sort(sortNumber);
                    if (list.length > 0) {

                        var Order = me.Orders;
                        var orderid = new ObjectID(reqdata.orderid);
                        async.eachSeries(list, function (item, callback) {
                            item.driverid = String(item._id);
                            Order.findOne({
                                "_id": orderid
                            }, function (err, orObj) {
                                if (!err) {
                                    if (orObj) {
                                        //before sending push checking driver free or not
                                        var did = new ObjectID(item.driverid);
                                        var driver = me.Drivers; //'status': 3
                                        driver.findOne({
                                            $and: [{
                                                '_id': did,
                                                "acc_status": 3
                                            }]
                                        }, function (err, driverdata) {
                                            if (!err) {
                                                if (driverdata) {
                                                    var dtime = moment().format('YYYY-MM-DD HH:mm:ss');
                                                    var timestamp = Date.now();
                                                    var updobj = {
                                                        $push: {
                                                            newapp_ids: {
                                                                'app_id': String(orderid),
                                                                "timestamp": timestamp,
                                                                "datetime": dtime
                                                            }
                                                        }
                                                    };
                                                    var queryObj = {
                                                        "_id": did
                                                    };
                                                    driver.update(queryObj, updobj, function (err, Obj) {
                                                        if (!err) {
                                                            var publishConfig = {
                                                                channel: item.driverid,
                                                                message: {
                                                                    'orderid': String(orderid),
                                                                    'bid': orObj.orderseqId,
                                                                    'a': 21, //21 new order request
                                                                    'ordermsg': 'new order waiting for driver'
                                                                }
                                                            };
                                                            pubnub.publish(publishConfig, function (status, response) {
                                                                console.log("publish to driver ");
                                                            });

                                                            var mssageto = {
                                                                "orderid": String(orderid),
                                                                'bid': orObj.orderseqId,
                                                                "a": 21, //21 new order request
                                                                "ordermsg": "new order waiting for driver"
                                                            }
                                                            //sending push to driver
                                                            sendpushtodriver(item.driverid, mssageto);

                                                            Order.findOne({
                                                                $and: [{
                                                                    "_id": orderid,
                                                                    driversLog: {
                                                                        $elemMatch: {
                                                                            "driverid": String(item.driverid)
                                                                        }
                                                                    }
                                                                }]
                                                            }, function (err, result3) {
                                                                if (result3) {
                                                                    Order.update({
                                                                        $and: [{
                                                                            "_id": orderid,
                                                                            driversLog: {
                                                                                $elemMatch: {
                                                                                    "driverid": String(item.driverid)
                                                                                }
                                                                            }
                                                                        }]
                                                                    }, {
                                                                            $set: {
                                                                                "driversLog.$.driverid": String(item.driverid),
                                                                                "driversLog.$.status": "1",
                                                                                "driversLog.$.datetime": dtime,
                                                                                "driversLog.$.timestamp": timestamp
                                                                            }
                                                                        },
                                                                        function (err, Obj) {
                                                                            if (!err) {
                                                                                callback(false, new me.ApiResponce({
                                                                                    success: true,
                                                                                    extras: {
                                                                                        Status: 'Driver Allocated the Job'
                                                                                    }
                                                                                }));
                                                                            }
                                                                        })
                                                                } else {
                                                                    Order.update({
                                                                        $and: [{
                                                                            "_id": orderid
                                                                        }]
                                                                    }, {
                                                                            $push: {
                                                                                "driversLog": {
                                                                                    "driverid": String(item.driverid),
                                                                                    "status": "1",
                                                                                    "datetime": dtime,
                                                                                    "timestamp": timestamp

                                                                                }
                                                                            }
                                                                        },
                                                                        function (err, Obj) {
                                                                            callback(false, new me.ApiResponce({
                                                                                success: true,
                                                                                extras: {
                                                                                    Status: 'Driver Allocated the Job'
                                                                                }
                                                                            }));
                                                                        })
                                                                }
                                                            })
                                                        }
                                                    })
                                                } else {
                                                    callback(false, new me.ApiResponce({
                                                        success: true,
                                                        extras: {
                                                            Status: 'Driver Allocated the Job'
                                                        }
                                                    }));
                                                }
                                            }
                                        })
                                    }
                                }
                            })
                        }, function (err) {
                            return callback(false, new me.ApiResponce({
                                success: true,
                                extras: {
                                    Status: 'Driver Allocated the Job'
                                }
                            }));
                        })
                    } else {
                        return callback(false, new me.ApiResponce({
                            success: true,
                            extras: {
                                Status: 'Driver Allocated the Job'
                            }
                        }));
                    }
                }
            }
        })
    }
    /*sending push to driver, new order request */
    function sendpushtodriver(driverid, message) {
        var User = me.Drivers;
        var _id = new ObjectID(driverid);
        var notify = {
            'title': 'ezshipp',
            'body': 'Hi, New order request from Ezshipp '
        };
        User.aggregate([{
            "$match": {
                $and: [{
                    "_id": _id,
                    "Devices.Active": '1'
                }]
            }
        }, {
            "$unwind": "$Devices"
        }, {
            "$match": {
                "Devices.Active": '1'
            }
        }, {
            "$project": {
                "_id": 0,
                "Devices": 1
            }
        }], function (err, result) {
            if (!err) {
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var devicetoken = result[i].Devices.DeviceToken;
                        if (result[i].Devices.DeviceType == "1") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_ios_driver(data, function (err, response) {

                            })
                        } else if (result[i].Devices.DeviceType == "2") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_android_driver(data, function (err, response) {

                            })
                        }
                    }
                }
            }
        })
    }
};


//finding zone related to pickup and delivery locations
customermod.prototype.Zone_Finding_of_Order = function (values, OrderData, callback) {
    var me = this;
    var error;
    var zone = me.ZONES;
    var Order = me.Orders;
    var config = require("../Config/config.js");

    var async = require('async');
    var randomstring = require("randomstring");

    var distance = require('google-distance-matrix');
    distance.key(config.Google_Api_Key);
    distance.units('imperial');
    distance.mode('driving');

    var moment = require('moment');

    var publishkey = config.pubnubkeys.publishkey;
    var subscribekey = config.pubnubkeys.subscribekey;
    var pubnubs = require("pubnub");
    var pubnub = new pubnubs({
        ssl: true,
        publish_key: publishkey,
        subscribe_key: subscribekey
    });
    ObjectID = require('mongodb').ObjectID;

    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    zone.findOne({
        'polygons': {
            $geoIntersects: {
                $geometry: {
                    type: "Point",
                    coordinates: [pickLongitude, pickLatitude]
                }
            }
        }
    }, function (err, pickupzoneObj) {
        if (pickupzoneObj) {
            zone.findOne({
                'polygons': {
                    $geoIntersects: {
                        $geometry: {
                            type: "Point",
                            coordinates: [dropLongitude, dropLatitude]
                        }
                    }
                }
            }, function (err, dropupzoneObj) {
                if (dropupzoneObj) {

                    if (pickupzoneObj.city_id == dropupzoneObj.city_id) {
                        callback(false, new me.ApiResponce({
                            success: true,
                            extras: {
                                Status: 'we will dispatch the driver shortly to pickup your package'
                            }
                        }));
                        var updateObj = {
                            $set: {
                                "orderId": String(OrderData._id),
                                "pickupdepo": pickupzoneObj.zoneseq, //String(pickupzoneObj._id),
                                "pickupdeponame": pickupzoneObj.title,
                                "deliverydepo": dropupzoneObj.zoneseq, //String(dropupzoneObj._id),
                                "deliverydeponame": dropupzoneObj.title
                            }
                        };

                        Order.update({
                            "_id": String(OrderData._id)
                        }, updateObj, function (err, resultObj) {
                            if (!err) {
                                var reqdata = {
                                    "orderid": String(OrderData._id),
                                    "pickupdepo": String(pickupzoneObj._id),
                                    "plat": pickLatitude,
                                    "plng": pickLongitude
                                };

                                // error = false;
                                fetchdrivers_orderanything(reqdata, function (err, obj) {
                                    if (!err) {
                                        error = false;
                                        // return callback(error,obj);
                                        // return callback(false,new me.ApiResponce({ success: true, extras: { Status:'we will dispatch the driver shortly to pickup your package'} }) );
                                    }
                                })
                            }
                        })
                    } else {
                        error = true;
                        return callback(error, new me.ApiResponce({
                            success: false,
                            extras: {
                                msg: me.ApiMessages.PICKUP_ZONE_AND_DROP_ZONE_MUST_BE_IN_SAME_CITY
                            }
                        }));
                    }
                } else {
                    error = true;
                    return callback(error, new me.ApiResponce({
                        success: false,
                        extras: {
                            msg: me.ApiMessages.DROP_ZONE_NOT_IN_RANGE
                        }
                    }));
                }
            })
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PICKUP_ZONE_NOT_IN_RANGE
                }
            }));
        }
    });

    function fetchdrivers_orderanything(reqdata, callback) {
        var driversarr = [];
        var Driver = me.Drivers; //"depoId": reqdata.pickupdepo,"status": 3,
        Driver.find({
            $and: [{
                "depoId": reqdata.pickupdepo,
                "acc_status": 3
            }]
        }).exec(function (err, driverslist) {
            if (!err) {
                if (driverslist.length > 0) {
                    var originsarr = [];
                    var listarr = [];
                    var list = [];
                    var finallist = [];
                    for (var i = 0; i < driverslist.length; i++) {
                        var latLong1 = driverslist[i].location.latitude + "," + driverslist[i].location.longitude
                        originsarr.push(latLong1.toString());
                        list.push(driverslist[i]);
                    }

                    var origins = originsarr;
                    var dlatlong = reqdata.plat + "," + reqdata.plng;
                    var destinations = [dlatlong.toString()]
                    distance.matrix(origins, destinations, function (err, distances) {
                        if (!err) {
                            if (distances.status == 'OK') {
                                for (var i = 0; i < origins.length; i++) {
                                    for (var j = 0; j < destinations.length; j++) {
                                        var origin = distances.origin_addresses[i]; //IT is from Distance Matrix
                                        var destination = distances.destination_addresses[j]; //IT is from Distance Matrix
                                        if (distances.rows[i].elements[j].status == 'OK') {
                                            var distance = distances.rows[i].elements[j].distance.text;
                                            var duration = distances.rows[i].elements[j].duration.value;
                                            var duration1 = distances.rows[i].elements[j].duration.text;
                                            var distancelocation = distances.rows[i].elements[j].distance.value;
                                            distancelocation = distancelocation / 1000;
                                            distancelocation = parseFloat(distancelocation).toFixed(2);
                                            listarr.push({
                                                'distance': distancelocation,
                                                'duration': duration,
                                                'flag': 1
                                            })
                                        } else {
                                            listarr.push({
                                                'distance': "",
                                                'duration': "",
                                                'flag': 2
                                            })
                                        }
                                    }
                                }

                                for (var i = 0; i < listarr.length; i++) {
                                    list[i].distance = listarr[i].distance;
                                    list[i].duration = listarr[i].duration;
                                    list[i].flag = listarr[i].flag;
                                }

                                list.filter(function (el) {
                                    return el.flag == 1;
                                });

                                function sortNumber(a, b) {
                                    return a.duration - b.duration;
                                }
                                list.sort(sortNumber);
                                if (list.length > 0) {

                                    var Order = me.Orders;
                                    var orderid = new ObjectID(reqdata.orderid);
                                    async.eachSeries(list, function (item, callback) {
                                        item.driverid = String(item._id);
                                        Order.findOne({
                                            "_id": orderid
                                        }, function (err, orObj) {
                                            if (!err) {
                                                if (orObj) {
                                                    //before sending push checking driver free or not
                                                    var did = new ObjectID(item.driverid);
                                                    var driver = me.Drivers; //'status': 3
                                                    driver.findOne({
                                                        $and: [{
                                                            '_id': did,
                                                            "acc_status": 3
                                                        }]
                                                    }, function (err, driverdata) {
                                                        if (!err) {
                                                            if (driverdata) {
                                                                var dtime = moment().format('YYYY-MM-DD HH:mm:ss');
                                                                var timestamp = Date.now();
                                                                var updobj = {
                                                                    $push: {
                                                                        newapp_ids: {
                                                                            'app_id': String(orderid),
                                                                            "timestamp": timestamp,
                                                                            "datetime": dtime
                                                                        }
                                                                    }
                                                                };
                                                                var queryObj = {
                                                                    "_id": did
                                                                };
                                                                driver.update(queryObj, updobj, function (err, Obj) {
                                                                    if (!err) {
                                                                        var publishConfig = {
                                                                            channel: item.driverid,
                                                                            message: {
                                                                                'orderid': String(orderid),
                                                                                'bid': orObj.orderseqId,
                                                                                'a': 21, //21 new order request
                                                                                'ordermsg': 'new order waiting for driver'
                                                                            }
                                                                        };
                                                                        pubnub.publish(publishConfig, function (status, response) {
                                                                            console.log("publish to driver ");
                                                                        });

                                                                        var mssageto = {
                                                                            "orderid": String(orderid),
                                                                            'bid': orObj.orderseqId,
                                                                            "a": 21, //21 new order request
                                                                            "ordermsg": "new order waiting for driver"
                                                                        }
                                                                        //sending push to driver
                                                                        sendpushtodriver(item.driverid, mssageto);

                                                                        Order.findOne({
                                                                            $and: [{
                                                                                "_id": orderid,
                                                                                driversLog: {
                                                                                    $elemMatch: {
                                                                                        "driverid": String(item.driverid),
                                                                                        "status": "1"
                                                                                    }
                                                                                }
                                                                            }]
                                                                        }, function (err, result3) {
                                                                            if (result3) {
                                                                                Order.update({
                                                                                    $and: [{
                                                                                        "_id": orderid,
                                                                                        driversLog: {
                                                                                            $elemMatch: {
                                                                                                "driverid": String(item.driverid),
                                                                                                "status": "1"
                                                                                            }
                                                                                        }
                                                                                    }]
                                                                                }, {
                                                                                        $set: {
                                                                                            "driversLog.$.driverid": String(item.driverid),
                                                                                            "driversLog.$.status": "1",
                                                                                            "driversLog.$.datetime": dtime,
                                                                                            "driversLog.$.timestamp": timestamp
                                                                                        }
                                                                                    },
                                                                                    function (err, Obj) {
                                                                                        if (!err) {
                                                                                            callback(false, new me.ApiResponce({
                                                                                                success: true,
                                                                                                extras: {
                                                                                                    Status: 'we will dispatch the driver shortly to pickup your package'
                                                                                                }
                                                                                            }));
                                                                                        }
                                                                                    })
                                                                            } else {
                                                                                Order.update({
                                                                                    $and: [{
                                                                                        "_id": orderid
                                                                                    }]
                                                                                }, {
                                                                                        $push: {
                                                                                            "driversLog": {
                                                                                                "driverid": String(item.driverid),
                                                                                                "status": "1",
                                                                                                "datetime": dtime,
                                                                                                "timestamp": timestamp

                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    function (err, Obj) {
                                                                                        callback(false, new me.ApiResponce({
                                                                                            success: true,
                                                                                            extras: {
                                                                                                Status: 'we will dispatch the driver shortly to pickup your package'
                                                                                            }
                                                                                        }));
                                                                                    })
                                                                            }
                                                                        })
                                                                    }
                                                                })
                                                            } else {
                                                                callback(false, new me.ApiResponce({
                                                                    success: true,
                                                                    extras: {
                                                                        Status: 'we will dispatch the driver shortly to pickup your package'
                                                                    }
                                                                }));
                                                            }
                                                        }
                                                    })
                                                }
                                            }
                                        })
                                    }, function (err) {
                                        return callback(false, new me.ApiResponce({
                                            success: true,
                                            extras: {
                                                Status: 'we will dispatch the driver shortly to pickup your package'
                                            }
                                        }));
                                    })
                                } else {
                                    return callback(false, new me.ApiResponce({
                                        success: true,
                                        extras: {
                                            Status: 'we will dispatch the driver shortly to pickup your package'
                                        }
                                    }));
                                }
                            }
                        }
                    })
                } else {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: 'Driver will Arrive Shortly for Pickup'
                        }
                    }));
                }
            }
        })
    }
    /*sending push to driver, new order request */
    function sendpushtodriver(driverid, message) {
        var User = me.Drivers;
        var _id = new ObjectID(driverid);
        var notify = {
            'title': 'ezshipp',
            'body': 'Hi, New order request from Ezshipp '
        };
        User.aggregate([{
            "$match": {
                $and: [{
                    "_id": _id,
                    "Devices.Active": '1'
                }]
            }
        }, {
            "$unwind": "$Devices"
        }, {
            "$match": {
                "Devices.Active": '1'
            }
        }, {
            "$project": {
                "_id": 0,
                "Devices": 1
            }
        }], function (err, result) {
            if (!err) {
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var devicetoken = result[i].Devices.DeviceToken;
                        if (result[i].Devices.DeviceType == "1") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_ios_driver(data, function (err, response) {

                            })
                        } else if (result[i].Devices.DeviceType == "2") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_android_driver(data, function (err, response) {

                            })
                        }
                    }
                }
            }
        })
    }
};

//Find all User Order History
customermod.prototype.Find_ALL_CUSTOMER_ORDERS = function (values, callback) {
    var me = this;
    var toSkip = values.skip;
    me.Orders.find({
        userId: values.CustomerID,
        Whether_Deleted: false
    }).count().exec(function (err, Count) {
        if (Count >= 0) {
            me.Orders.find({
                userId: values.CustomerID,
                Whether_Deleted: false
            }).sort({
                _id: -1
            }).skip(toSkip).limit(5).exec(function (err, Result) {
                var OrderData = [];
                var t = 0;
                for (var i = 0; i < Result.length; i++) {
                    var SenderName;
                    var SenderPhoneNumber;
                    if (Result[t].SenderName == null) {
                        SenderName = '';
                    } else {
                        SenderName = String(Result[t].SenderName);
                    }
                    if (Result[t].SenderPhoneNumber == null) {
                        SenderPhoneNumber = '';
                    } else {
                        SenderPhoneNumber = String(Result[t].SenderPhoneNumber);
                    }
                    var moment = require('moment');
                    var Order_Accepted_Time;
                    var Order_Completed_Time;
                    var Order_Journey_Time;
                    var Shipping_Distance;
                    if (Result[t].Order_Accepted_Time == null) {
                        Order_Accepted_Time = '';
                    } else {
                        Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
                    }
                    if (Result[t].Order_Completed_Time == null) {
                        Order_Completed_Time = '';
                        Order_Journey_Time = '';
                    } else {
                        Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                        Order_Journey_Time = Result[t].Order_Journey_Time;
                    }
                    Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
                    OrderData.push({
                        order_datetime: Result[t].order_datetime,
                        status: Result[t].status,
                        orderId: Result[t]._id,
                        SenderName: SenderName,
                        SenderPhoneNumber: SenderPhoneNumber,
                        orderType: Result[t].orderType,
                        CustomerID: Result[t].userId,
                        pickAddress: Result[t].pickAddress,
                        dropAddress: Result[t].dropAddress,
                        pickLatitude: Result[t].pickLocation.Latitude,
                        pickLongitude: Result[t].pickLocation.Longitude,
                        dropLatitude: Result[t].dropLocation.Latitude,
                        dropLongitude: Result[t].dropLocation.Longitude,
                        paymentType: Result[t].paymentType,
                        paymentId: Result[t].paymentId,
                        itemDescription: Result[t].itemDescription,
                        receiverName: Result[t].receiverName,
                        receiverPhone: Result[t].receiverPhone,
                        itemName: Result[t].itemName,
                        itemImage: Result[t].itemImage,
                        deliverycharge: Result[t].deliverycharge,
                        bookingType: Result[t].bookingType,
                        WhetherStoreOrder: Result[t].WhetherStoreOrder,
                        BranchID: Result[t].BranchID,
                        CartID: Result[t].CartID,
                        StoreName: Result[t].StoreName,
                        StorePhoneNumber: Result[t].StorePhoneNumber,
                        StoreEmailID: Result[t].StoreEmailID,
                        StoreAddress: Result[t].StoreAddress,
                        Cart_Amount: Result[t].Cart_Amount,
                        Cart_Parcel_Wieght: Result[t].Cart_Parcel_Wieght,
                        StoreCartData: Result[t].StoreCartData,
                        Order_Accepted_Time: Order_Accepted_Time,
                        Order_Completed_Time: Order_Completed_Time,
                        Order_Journey_Time: Order_Journey_Time,
                        Shipping_Distance: Shipping_Distance
                    });
                    t++;
                }
                return callback(false, new me.ApiResponce({
                    success: true,
                    extras: {
                        OrderData: OrderData,
                        Count: Count
                    }
                }));
            })
        }
    })
};

//Get Order Details
customermod.prototype.Get_Order_Details = function (values, CustomerData, OrderData, callback) {
    var me = this;
    var OrderDetails = {
        First_name: CustomerData.First_name,
        Email: CustomerData.Email,
        Phone: CustomerData.Phone,
        countryCode: CustomerData.countryCode,
        order_datetime: OrderData.order_datetime,
        status: OrderData.status,
        orderId: OrderData._id,
        orderType: OrderData.orderType,
        CustomerID: OrderData.userId,
        pickAddress: OrderData.pickAddress,
        dropAddress: OrderData.dropAddress,
        pickLatitude: OrderData.pickLocation.Latitude,
        pickLongitude: OrderData.pickLocation.Longitude,
        dropLatitude: OrderData.dropLocation.Latitude,
        dropLongitude: OrderData.dropLocation.Longitude,
        paymentType: OrderData.paymentType,
        itemDescription: OrderData.itemDescription,
        receiverName: OrderData.receiverName,
        receiverPhone: OrderData.receiverPhone,
        itemName: OrderData.itemName,
        deliverycharge: OrderData.deliverycharge,
        bookingType: OrderData.bookingType
    };
    return callback(false, new me.ApiResponce({
        success: true,
        extras: {
            OrderData: OrderDetails
        }
    }));
};


//Find all User Order History
customermod.prototype.Find_USER_ORDER_DETAILS = function (values, callback) {
    var me = this;
    me.Orders.find({
        userId: values.CustomerID,
        Whether_Deleted: false
    }).sort({
        _id: -1
    }).limit(5).exec(function (err, Result) {
        var OrderData = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var SenderName;
            var SenderPhoneNumber;
            if (Result[t].SenderName == null) {
                SenderName = '';
            } else {
                SenderName = String(Result[t].SenderName);
            }
            if (Result[t].SenderPhoneNumber == null) {
                SenderPhoneNumber = '';
            } else {
                SenderPhoneNumber = String(Result[t].SenderPhoneNumber);
            }
            OrderData.push({
                order_datetime: Result[t].order_datetime,
                status: Result[t].status,
                orderId: Result[t]._id,
                SenderName: SenderName,
                SenderPhoneNumber: SenderPhoneNumber,
                orderType: Result[t].orderType,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                item_actual_cost: Result[t].item_actual_cost,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                itemImage: Result[t].itemImage,
                deliverycharge: Result[t].deliverycharge,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData
            }
        }));
    })
};
customermod.prototype.Update_Offer_Functionality_On_Order = function (values, OrderData, callback) {
    var me = this;
    var error;
    var Offers = me.Offers;
    var Order = me.Orders;
    var Offers_Used_Customers = me.Offers_Used_Customers;
    var Referral_Relation = me.Referral_Relation;
    var OfferType = parseInt(values.OfferType);
    Offers_Used_Customers.update({
        "ReferenceOfferID": values.ReferenceOfferID
    }, {
            $set: {
                "Used": true
            }
        }, function (err, UpdateResult) {
            if (!err) {
                if (OfferType == 3) {
                    var customearray = [];
                    customearray.push(values.CustomerID);
                    var newquery = {
                        "CustomerIDArray": {
                            $in: customearray
                        },
                        "OfferUsed": {
                            $nin: customearray
                        }
                    };
                    Referral_Relation.update(newquery, {
                        $push: {
                            "OfferUsed": values.CustomerID
                        }
                    }, function (err, UpdateResult) {
                        var orderupdatedata = {
                            $set: {
                                "OfferApplied": true,
                                "OfferID": values.OfferID,
                                "ReferenceOfferID": values.ReferenceOfferID
                            }
                        }
                        Order.update({
                            "_id": OrderData._id
                        }, orderupdatedata, function (err, resultObj) {
                            if (!err) {
                                return callback(false, "Successfully Perform Offer Functionality");
                            }
                        })
                    })
                } else {
                    var orderupdatedata = {
                        $set: {
                            "OfferApplied": true,
                            "OfferID": values.OfferID,
                            "ReferenceOfferID": values.ReferenceOfferID
                        }
                    }
                    Order.update({
                        "_id": OrderData._id
                    }, orderupdatedata, function (err, resultObj) {
                        if (!err) {
                            return callback(false, "Successfully Perform Offer Functionality");
                        }
                    })
                }
            }
        })
};
//SCRIPT for dELETE FALSE FOR EXISTING ORDERS
customermod.prototype.Script_For_sTORING_DELETE_FALSE = function (callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {

            };
            Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function Update_OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values._id
            };
            var changes = {
                $set: {
                    Whether_Deleted: false,
                }
            };
            var multiplicity = {
                multi: false
            };
            Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {

            var Updated_Function = Update_OrderDataFunction.sync(null, Result[t]);
            t++;
            console.log(Updated_Function + ' ' + t);
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Script Runned Successfully"
            }
        }));
    })
}

//SCRIPT for storing flat details and landmark and collection type for existing orders
customermod.prototype.Script_For_sTORING_landmark_flat_collectiontype = function (callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {

            };
            Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function Update_OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values._id
            };
            var changes = {
                $set: {
                    pickup_Flat_Details: '',
                    pickup_Landmark: '',
                    drop_Flat_Details: '',
                    drop_Landmark: '',
                    collectionType: 1
                }
            };
            var multiplicity = {
                multi: false
            };
            Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {

            var Updated_Function = Update_OrderDataFunction.sync(null, Result[t]);
            t++;
            console.log(Updated_Function + ' ' + t);
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Script Runned Successfully"
            }
        }));
    })
}
//SCRIPT for Premium user for existing orders
customermod.prototype.Script_For_Customer_Premium_false = function (callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;

    function CustomersDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                acc_status: 1,
                Verify: 0
            };
            Customers.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function Update_CustomersDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values._id
            };
            var changes = {
                $set: {
                    Premium_User: false,
                    Premium_Status: false,
                    Premium_Pricing_Set: false,
                    Premium_Instant_Pricing: 0,
                    Premium_4hours_Pricing: 0,
                    Premium_Same_Day_Pricing: 0,
                    Premium_Instant_Pricing_discount : 0,
                    Premium_Same_Day_Pricing_discount : 0,
                    Premium_4hours_Pricing_discount : 0,
                    Premium_min_ordercount: 100,
                    Monthly_Invoice: false,
                    Default_Pickup_Location_Exist: false,
                    Default_Pickup_Address: "",
                    Default_Pickup_Latitude: "",
                    Default_Pickup_Longitude: ""
                }
            };
            var multiplicity = {
                multi: false
            };
            Customers.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    sync(function () {
        var Result = CustomersDataFunction.sync(null);
        console.log(Result);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {

            var Updated_Function = Update_CustomersDataFunction.sync(null, Result[t]);
            t++;
            console.log(Updated_Function + ' ' + t);
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Script Runned Successfully"
            }
        }));
    })
}

//SCRIPT for Account Status 1 for Existing Orders
customermod.prototype.Script_For_Customer_Status = function (callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;

    function CustomersDataFunction(callback) {
        process.nextTick(function () {
            var query = {
                $or: [{
                    acc_status: true,
                }, {
                    acc_status: false,
                }, {
                    acc_status: 1,
                    Verify: 0
                }, {
                    acc_status: 2,
                    Verify: 0
                }]
            };
            Customers.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function Update_CustomersDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values._id
            };
            var changes = {
                $set: {
                    acc_status: 1,
                    Verify: 0
                }
            };
            var multiplicity = {
                multi: false
            };
            Customers.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    sync(function () {
        var Result = CustomersDataFunction.sync(null);
        console.log(Result);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {

            var Updated_Function = Update_CustomersDataFunction.sync(null, Result[t]);
            t++;
            console.log(Updated_Function + ' ' + t);
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Script Runned Successfully"
            }
        }));
    })
}

//SCRIPT for Solving Payment Type Issue
customermod.prototype.Script_For_Solving_Payment_type_Issue = function (callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {

            };
            Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function Update_OrderDataFunction(values, paymentType, paymentId, callback) {
        process.nextTick(function () {
            var query = {
                _id: values._id
            };
            var changes = {
                $set: {
                    paymentType: paymentType,
                    paymentId: paymentId
                }
            };
            var multiplicity = {
                multi: false
            };
            Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var paymentType;
            var paymentId;

            if (Result[t].paymentId == null || Result[t].paymentId == '' || Result[t].paymentId == ' ') {
                paymentType = 1;
                paymentId = '';
            } else {
                paymentType = 2;
                paymentId = Result[t].paymentId;
            }
            var Updated_Function = Update_OrderDataFunction.sync(null, Result[t], paymentType, paymentId);
            t++;
            console.log(Updated_Function + ' ' + t);
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Script Runned Successfully"
            }
        }));
    })
}
//SCRIPT for Storing Customer Details for Existing orders
customermod.prototype.Script_For_Storing_Customer_Details_in_Orders = function (callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;

    function OrderDataFunction(callback) {
        process.nextTick(function () {
            var query = {

            };
            Orders.find(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function Update_OrderDataFunction(values, customerName, customerPhone, customerEmail, callback) {
        process.nextTick(function () {
            var query = {
                _id: values._id
            };
            var changes = {
                $set: {
                    customerName: customerName,
                    customerPhone: customerPhone,
                    customerEmail: customerEmail,
                    Whether_PRomotional_Stored: false
                }
            };
            var multiplicity = {
                multi: false
            };
            Orders.update(query, changes, multiplicity).exec(function (err, Result) {
                callback(null, 'Updated Successfully');
            })
        })
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null);
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            var CustomerData = CustomerDataFunction.sync(null, Result[t]);
            var customerName;
            var customerPhone;
            var customerEmail;

            if (CustomerData != null) {
                customerName = CustomerData.First_name;
                customerPhone = CustomerData.Phone;
                customerEmail = CustomerData.Email;
            } else {
                customerName = '';
                customerPhone = '';
                customerEmail = '';
            }
            var Updated_Function = Update_OrderDataFunction.sync(null, Result[t], customerName, customerPhone, customerEmail);
            t++;
            console.log(Updated_Function + ' ' + t);
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                Status: "Script Runned Successfully"
            }
        }));
    })
}


//Storing the Customer Order Details
customermod.prototype.Storing_Customer_Order_Details = function (values, CustomerData, SequenceNumber, callback) {
    var me = this;
    var error;
    var collectionType;
    var Monthly_Invoice;
    var SenderName;
    var SenderPhoneNumber;
    //SenderName
    if (values.SenderName == null || values.SenderName == '' || values.SenderName == ' ') {
        SenderName = '';
    } else {
        SenderName = String(values.SenderName);
    }

    if (values.SenderPhoneNumber == null || values.SenderPhoneNumber == '' || values.SenderPhoneNumber == ' ') {
        SenderPhoneNumber = '';
    } else {
        SenderPhoneNumber = String(values.SenderPhoneNumber);
    }
    if (values.Monthly_Invoice == null || values.Monthly_Invoice == false || values.Monthly_Invoice == "false") {
        Monthly_Invoice = false;
    } else if (values.Monthly_Invoice == true || values.Monthly_Invoice == "true") {
        Monthly_Invoice = true;
    }
    if (values.collectionType == null || values.collectionType == 0 || values.collectionType == '' || values.collectionType == ' ') {
        collectionType = 1;
    } else {
        collectionType = parseInt(values.collectionType);
    }
    var pick_Flat;
    if (values.pickup_Flat_Details == null || values.pickup_Flat_Details == '' || values.pickup_Flat_Details == ' ') {
        pick_Flat = '';
    } else {
        pick_Flat = values.pickup_Flat_Details;
    }
    var drop_Flat;
    if (values.drop_Flat_Details == null || values.drop_Flat_Details == '' || values.drop_Flat_Details == ' ') {
        drop_Flat = '';
    } else {
        drop_Flat = values.drop_Flat_Details;
    }
    var pick_landmark;
    if (values.pickup_Landmark == null || values.pickup_Landmark == '' || values.pickup_Landmark == ' ') {
        pick_landmark = '';
    } else {
        pick_landmark = values.pickup_Landmark;
    }
    var drop_landmark;
    if (values.drop_Landmark == null || values.drop_Landmark == '' || values.drop_Landmark == ' ') {
        drop_landmark = '';
    } else {
        drop_landmark = values.drop_Landmark;
    }
    var customerName = String(CustomerData.First_name);
    var customerPhone = String(CustomerData.Phone);
    var customerEmail = String(CustomerData.Email);
    var pickAddress = values.pickAddress;
    var dropAddress = values.dropAddress;
    var pickLatitude = parseFloat(values.pickLatitude);
    var pickLongitude = parseFloat(values.pickLongitude);
    var dropLatitude = parseFloat(values.dropLatitude);
    var dropLongitude = parseFloat(values.dropLongitude);
    var moment = require('moment');
    var timestamp;
    timestamp = Date.now();
    var datetime = me.DateTime();
    var newDate = new Date();
    var OrderData = new me.Orders({
        "orderseqId": "E0000" + SequenceNumber,
        "Date": newDate,
        "DateSet": true,
        "customerName": customerName,
        "customerPhone": customerPhone,
        "customerEmail": customerEmail,
        "userId": values.CustomerID,
        "order_datetime": datetime,
        "SenderName": SenderName,
        "SenderPhoneNumber": SenderPhoneNumber,
        "orderType": parseFloat(values.orderType),
        "bookingType": parseFloat(values.bookingType),
        "pickAddress": pickAddress,
        "pickup_Flat_Details": pick_Flat,
        "pickup_Landmark": pick_landmark,
        "receiverName": values.receiverName,
        "receiverPhone": values.receiverPhone,
        "paymentId": values.paymentId,
        "paymentType": values.paymentType,
        "collectionType": collectionType,
        "Monthly_Invoice": Monthly_Invoice,
        "pickLocation": {
            "Longitude": pickLongitude,
            "Latitude": pickLatitude
        },
        "dropAddress": dropAddress,
        "drop_Flat_Details": drop_Flat,
        "drop_Landmark": drop_landmark,
        "dropLocation": {
            "Longitude": dropLongitude,
            "Latitude": dropLatitude
        },
        "itemName": values.itemName,
        "itemDescription": values.itemDescription,
        "itemImage": values.itemImage,
        "deliverycharge": values.deliverycharge,
        "subtotal_amount": '0',
        "total_amount": parseFloat(values.deliverycharge),
        "item_actual_cost": values.item_actual_cost,
        "Devices": {
            "DeviceType": 3,
            "Os": "BROWSER"
        },
        "status": 1,
        "driversLog": [],
        "eventLog": [{
            "datetime": values.order_datetime,
            "status": '1',
            "timestamp": timestamp
        }]
    });
    OrderData.save(function (err, OrderDetails) {
        error = false;
        callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Order Stored Sucessfully',
                OrderDetails: OrderDetails
            }
        }));
        SendOrderData_Slack(OrderDetails, function (err, Result) {
            if (!err) {
                console.log("Slack Post Result ->" + Result)
            }
        })
    });
};
function SendOrderData_Slack(OrderData, callback) {
    if (OrderData.bookingType == 1) {
        var config = require('../Config/config.js'); //Setting the Config Path
        if (config.Whether_Production == true) {
            var querystring = require('querystring');
            var https = require('https');
            var moment = require('moment');
            var datetime = moment(OrderData.Date).utcOffset(330).format('MMM DD H:mm:ss');
            var msg = OrderData.orderseqId + ' from ' + OrderData.customerName + '[' + OrderData.customerPhone + '] created at ' + datetime;
            var payload = {
                'channel': '#instant-orders',
                'username': 'ordersbot',
                'text': msg,
                'icon_emoji': ':package:'
            }
            console.log(payload);
            // var newPayload = JSON.parse(payload);
            // console.log(newPayload);
            var post_data = querystring.stringify({
                'payload': JSON.stringify(payload)
            });
            var result = '';
            var options = {
                host: 'hooks.slack.com',
                port: 443,
                method: 'POST',
                path: '/services/T751JCZM3/B78H2HKHV/jzvYi87yOCSU1hSg563qvOxa',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(post_data)
                }
            };
            var reqs = https.request(options, function (respa) {
                var result;
                var str = '';
                respa.setEncoding('utf8');
                respa.on('data', function (chunk) {
                    str += chunk;
                });
                respa.on('end', function () {
                    // result = JSON.parse(str);
                    callback(false, str);
                })
            });
            reqs.write(post_data);
            reqs.end();
        } else {
            callback(false, 'Not in Production');
        }
    } else {
        callback(false, 'Not an Instant Order');
    }
}

//Check Validity of Field for Orders Anything
customermod.prototype.Check_Validity_Orders_Anything = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.pickAddress == null || values.dropAddress == null || values.pickLatitude == null
        || values.pickLongitude == null || values.dropLatitude == null || values.dropLongitude == null || values.itemName == null
        || values.itemDescription == null || values.CustomerID == null || values.order_datetime == null || values.orderType == null
        || values.bookingType == null || values.receiverName == null || values.receiverPhone == null || values.paymentType == null ||
        values.paymentId == null || values.deliverycharge == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};
//Check Validity of Field for Orders Anything Vendors
customermod.prototype.Check_Validity_Orders_Anything_Vendors = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.CustomerID == null || values.pick_flat_house_details == null || values.pick_colony_street == null
        || values.pick_landmark == null || values.pick_city == null || values.drop_flat_house_details == null
        || values.drop_colony_street == null || values.drop_landmark == null || values.drop_city == null || values.itemName == null
        || values.itemDescription == null || values.receiverName == null || values.receiverPhone == null || values.paymentType == null
        || values.paymentId == null || values.deliverycharge == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

//Find and Update Order Sequence in Counters
customermod.prototype.Find_and_Update_Order_Sequence = function (callback) {
    var me = this;
    me.Counters.findOneAndUpdate({
        _id: "orderid"
    }, {
            $set: {
                _id: "orderid"
            },
            $inc: {
                "seq": 1
            }
        }, {
            upsert: true,
            returnNewDocument: true
        }).exec(function (err, Result) {
            console.log(Result);
            var SequenceNumber = Result.seq;
            return callback(false, parseInt(SequenceNumber));
        })
};

//Check Whether VendorID Exist or Not for Security
customermod.prototype.Check_for_VendorID = function (values, callback) {
    var me = this;
    var error;
    var query = {
        VendorID: values.VendorID
    };
    me.Vendors.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.VENDOR_NOT_FOUND
                }
            }));
        }
    })
};
//Check Whether VendorID Exist or Not for Security
customermod.prototype.Check_for_Vendor = function (values, callback) {
    var me = this;
    var error;
    var query = {
        VendorID: values.VendorID
    };
    me.Vendors.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    Status: "Invalid Vendor Credentials.Please Contact Ezshipp Team."
                }
            }));
        }
    })
};

//Check Whether VendorID Exist or Not for Security
customermod.prototype.Check_for_VendorID_Subscription = function (values, callback) {
    var me = this;
    var error;
    var query = {
        VendorID: values.VendorID,
        VendorStatus: true
    };
    me.Vendors.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    Status: "Your Ezshipp Account is Suspended.Please Contact Ezshipp Team."
                }
            }));
        }
    })
};
//Check For Customer Offer Lottery
customermod.prototype.Check_for_Customer_Offer_Lottery = function (values, callback) {
    var me = this;
    var error;
    var Offers_Lottery = me.Offers_Lottery;
    var query = {
        OfferID: values.OfferID,
        CustomerID: values.CustomerID
    };
    Offers_Lottery.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(true, 'Not Found');
        }
    })
};
//Register Customer Lottery
customermod.prototype.Register_Customer_Lottery = function (values, callback) {
    var me = this;
    var Offers_Lottery = me.Offers_Lottery;
    var UsedArray = [];
    var date = new Date();
    var dateJson = {
        Date: date
    };
    UsedArray.push(dateJson);
    var Offers_Lottery_Data = new Offers_Lottery({
        OfferID: values.OfferID,
        CustomerID: values.CustomerID,
        UsedArray: dateJson,
        created_at: date,
        updated_at: date
    });
    Offers_Lottery_Data.save();
    callback(false, 'success');
};

//Update Customer Lottery
customermod.prototype.Update_Customer_Lottery = function (values, callback) {
    var me = this;
    var Offers_Lottery = me.Offers_Lottery;
    var date = new Date();
    var dateJson = {
        Date: date
    };
    var query = {
        OfferID: values.OfferID,
        CustomerID: values.CustomerID
    };
    var changes = {
        $push: {
            UsedArray: dateJson
        }
    }
    Offers_Lottery.update(query, changes, function (err, Result) {
        callback(false, 'updated');
    })
};

//Check Whether AdminID Exist or Not for Security
customermod.prototype.Check_for_AdminID = function (values, callback) {
    var me = this;
    if (values.AdminID != null && values.AdminID != "") {
        var error;
        var query = {
            _id: values.AdminID
        };
        admin_users.findOne(query).exec(function (err, Result) {
            if (Result) {
                if (Result.Status == true) {
                    return callback(false, Result);
                } else {
                    return callback(true, new me.ApiResponce({
                        success: false,
                        extras: {
                            msg: me.ApiMessages.Admin_Not_Active
                        }
                    }));
                }
            } else {
                error = true;
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.Admin_Not_Found
                    }
                }));
            }
        })
    } else {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};
//Check Whether CustomerID Exist or Not for Security
customermod.prototype.Check_for_CustomerID = function (values, callback) {
    var me = this;
    var error;
    var query = {
        _id: values.CustomerID
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.CUSTOMER_NOT_FOUND
                }
            }));
        }
    })
};
//Check Whether Customer is Premium User or not
customermod.prototype.Check_for_Customer_Premium_Or_Not = function (values, callback) {
    var me = this;
    var error;
    var query = {
        _id: values.CustomerID,
        Premium_User: true,
        Premium_Status: true
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.Customer_Already_Premium_User
                }
            }));
        } else {
            error = false;
            return callback(false);
        }
    })
};
//update Premium User with Options
customermod.prototype.Update_Premium_User_Options = function (values, callback) {
    var me = this;
    var date = new Date();
    var Premium_User = true;
    var Premium_User_Time = date;
    var Premium_Status = true;
    var Premium_Pricing_Set;
    var Premium_Instant_Pricing;
    var Premium_Same_Day_Pricing;
    var Premium_4hours_Pricing;
    var Premium_Instant_Pricing_discount;
    var Premium_Same_Day_Pricing_discount;
    var Premium_4hours_Pricing_discount;
    var Premium_min_ordercount;
    var Monthly_Invoice;
    var Flat_Monthly_Price_Available = false;
    var Flat_Monthly_Price = 0;
    var Default_Pickup_Location_Exist;
    var Default_Pickup_Address;
    var Default_Pickup_Latitude;
    var Default_Pickup_Longitude;
    if (values.Premium_Pricing_Set == true || values.Premium_Pricing_Set == "true") {
        Premium_Pricing_Set = true;
        Premium_Instant_Pricing = parseInt(values.Premium_Instant_Pricing);
        Premium_Same_Day_Pricing = parseInt(values.Premium_Same_Day_Pricing);
        Premium_4hours_Pricing = parseInt(values.Premium_4hours_Pricing);
        Premium_Instant_Pricing_discount = parseInt(values.Premium_Instant_Pricing_discount);
        Premium_Same_Day_Pricing_discount = parseInt(values.Premium_Same_Day_Pricing_discount);
        Premium_4hours_Pricing_discount = parseInt(values.Premium_4hours_Pricing_discount);
        Premium_min_ordercount = parseInt(values.Premium_min_ordercount);
    } else {
        Premium_Pricing_Set = false;
        Premium_Instant_Pricing = 0;
        Premium_Same_Day_Pricing = 0;
        Premium_4hours_Pricing = 0;
        Premium_Instant_Pricing_discount = 0;
        Premium_Same_Day_Pricing_discount = 0;
        Premium_4hours_Pricing_discount = 0;
        Premium_min_ordercount=100;
    }
    if (values.Monthly_Invoice == true || values.Monthly_Invoice == "true") {
        if (values.Flat_Monthly_Price_Available == true || values.Flat_Monthly_Price_Available == "true") {
            Monthly_Invoice = true;
            Flat_Monthly_Price_Available = true;
            Flat_Monthly_Price = parseInt(values.Flat_Monthly_Price);
        } else {
            Monthly_Invoice = true;
            Flat_Monthly_Price_Available = false;
            Flat_Monthly_Price = 0;
        }
    } else {
        Monthly_Invoice = false;
    }
    if (values.Default_Pickup_Location_Exist == true || values.Default_Pickup_Location_Exist == "true") {
        Default_Pickup_Location_Exist = true;
        Default_Pickup_Address = String(values.Default_Pickup_Address);
        Default_Pickup_Latitude = String(values.Default_Pickup_Latitude);
        Default_Pickup_Longitude = String(values.Default_Pickup_Longitude);
    } else {
        Default_Pickup_Location_Exist = false;
        Default_Pickup_Address = "";
        Default_Pickup_Latitude = "";
        Default_Pickup_Longitude = "";
    }
    var query = {
        _id: values.CustomerID,
    }
    var changes = {
        Premium_User: Premium_User,
        Premium_User_Time: Premium_User_Time,
        Premium_Status: Premium_Status,
        Premium_Pricing_Set: Premium_Pricing_Set,
        Premium_Instant_Pricing: Premium_Instant_Pricing,
        Premium_4hours_Pricing: Premium_4hours_Pricing,
        Premium_Same_Day_Pricing: Premium_Same_Day_Pricing,
        Premium_Instant_Pricing_discount: Premium_Instant_Pricing_discount,
        Premium_4hours_Pricing_discount: Premium_4hours_Pricing_discount,
        Premium_Same_Day_Pricing_discount: Premium_Same_Day_Pricing_discount,
        Premium_min_ordercount: Premium_min_ordercount,
        Monthly_Invoice: Monthly_Invoice,
        Flat_Monthly_Price_Available: Flat_Monthly_Price_Available,
        Flat_Monthly_Price: Flat_Monthly_Price,
        Default_Pickup_Location_Exist: Default_Pickup_Location_Exist,
        Default_Pickup_Address: Default_Pickup_Address,
        Default_Pickup_Latitude: Default_Pickup_Latitude,
        Default_Pickup_Longitude: Default_Pickup_Longitude
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (!err) {
            callback(new me.ApiResponce({
                success: true,
                extras: {
                    Status: "Premium User Options Updated Successfully"
                }
            }));
            if (Premium_Pricing_Set == true) {
                console.log("Enterig")
                var PricingData = new me.Customer_Premium_Pricing({
                    CustomerID: values.CustomerID,
                    Premium_Instant_Pricing: Premium_Instant_Pricing,
                    Premium_Same_Day_Pricing: Premium_Same_Day_Pricing,
                    Premium_4hours_Pricing: Premium_4hours_Pricing,
                    Premium_Instant_Pricing_discount: Premium_Instant_Pricing_discount,
                    Premium_4hours_Pricing_discount: Premium_4hours_Pricing_discount,
                    Premium_Same_Day_Pricing_discount: Premium_Same_Day_Pricing_discount,
                    Premium_min_ordercount: Premium_min_ordercount,
                    created_at: date,
                    updated_at: date
                })
                PricingData.save();
            }
        }
    });
};
customermod.prototype.Script_for_CustomerKey = function (callback) {
    var me = this;
    var async = require('async');
    function generateCustomerKey() {
        var charBank = "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz1234567890";
        var fstring = '';
        for (var i = 1; i <= 16; i++) {
            fstring += charBank[parseInt(Math.random() * charBank.length)];
        }
        return fstring;
    };
    var query = {
        Premium_User: true,
        Premium_Status: true
    }
    me.Customers.find(query).exec(function (err, Result) {
        if (!err) {
            async.eachSeries(Result, function (item, resp) {
                var CustomerKey = generateCustomerKey();
                me.Customers.update({ _id: item._id }, { $set: { CustomerKey: CustomerKey } }).exec(function (err, Status) {
                    if (!err) {
                        resp();
                    }
                })
            }, function (err) {
                if (!err) {
                    callback("Script Runned Successfully");
                }
            })
        }
    })
}
customermod.prototype.Generate_Premium_key = function (callback) {
    var me = this;
    function generateCustomerKey(me, callback) {
        var charBank = "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz1234567890";
        var fstring = '';
        for (var i = 1; i <= 16; i++) {
            fstring += charBank[parseInt(Math.random() * charBank.length)];
        }
        me.Customers.findOne({ CustomerKey: fstring }).exec(function (err, Result) {
            if (!err) {
                if (Result == null) {
                    callback(false, fstring);
                } else if (Result != null) {
                    generateCustomerKey(me, callback);
                }
            }
        })
    }
    var CustomerKey = generateCustomerKey(me, callback);
}

//Create Premium User with Options
customermod.prototype.Create_Premium_User = function (values, callback) {
    var me = this;
    var date = new Date();
    var Premium_User = true;
    var Premium_User_Time = date;
    var Premium_Status = true;
    var Premium_Pricing_Set;
    var Premium_Instant_Pricing;
    var Premium_Same_Day_Pricing;
    var Premium_4hours_Pricing;
    
    var Premium_Instant_Pricing_discount;
    var Premium_Same_Day_Pricing_discount;
    var Premium_4hours_Pricing_discount;
    var Premium_min_ordercount;
    var Monthly_Invoice;
    var Flat_Monthly_Price_Available = false;
    var Flat_Monthly_Price = 0;
    var Default_Pickup_Location_Exist;
    var Default_Pickup_Address;
    var Default_Pickup_Latitude;
    var Default_Pickup_Longitude;
    me.Generate_Premium_key(function (err, CustomerKey) {
        if (!err) {
            if (values.Premium_Pricing_Set == true || values.Premium_Pricing_Set == "true") {
                Premium_Pricing_Set = true;
                Premium_Instant_Pricing = parseInt(values.Premium_Instant_Pricing);
                Premium_Same_Day_Pricing = parseInt(values.Premium_Same_Day_Pricing);
                Premium_4hours_Pricing = parseInt(values.Premium_4hours_Pricing);
                Premium_Instant_Pricing_discount = parseInt(values.Premium_Instant_Pricing_discount);
                Premium_Same_Day_Pricing_discount = parseInt(values.Premium_Same_Day_Pricing_discount);
                Premium_4hours_Pricing_discount = parseInt(values.Premium_4hours_Pricing_discount);
                Premium_min_ordercount = parseInt(values.Premium_min_ordercount);
            } else {
                Premium_Pricing_Set = false;
                Premium_Instant_Pricing = 0;
                Premium_Same_Day_Pricing = 0;
                Premium_4hours_Pricing = 0;
                Premium_Instant_Pricing_discount = 0;
                Premium_Same_Day_Pricing_discount = 0;
                Premium_4hours_Pricing_discount = 0;
                Premium_min_ordercount=100;
            }
            if (values.Monthly_Invoice == true || values.Monthly_Invoice == "true") {
                if (values.Flat_Monthly_Price_Available == true || values.Flat_Monthly_Price_Available == "true") {
                    Monthly_Invoice = true;
                    Flat_Monthly_Price_Available = true;
                    Flat_Monthly_Price = parseInt(values.Flat_Monthly_Price);
                } else {
                    Monthly_Invoice = true;
                    Flat_Monthly_Price_Available = false;
                    Flat_Monthly_Price = 0;
                }
            } else {
                Monthly_Invoice = false;
            }
            if (values.Default_Pickup_Location_Exist == true || values.Default_Pickup_Location_Exist == "true") {
                Default_Pickup_Location_Exist = true;
                Default_Pickup_Address = String(values.Default_Pickup_Address);
                Default_Pickup_Latitude = String(values.Default_Pickup_Latitude);
                Default_Pickup_Longitude = String(values.Default_Pickup_Longitude);
            } else {
                Default_Pickup_Location_Exist = false;
                Default_Pickup_Address = "";
                Default_Pickup_Latitude = "";
                Default_Pickup_Longitude = "";
            }
            var query = {
                _id: values.CustomerID,
            }
            var changes = {
                Premium_User: Premium_User,
                Premium_User_Time: Premium_User_Time,
                Premium_Status: Premium_Status,
                CustomerKey: CustomerKey,
                Premium_Pricing_Set: Premium_Pricing_Set,
                Premium_Instant_Pricing: Premium_Instant_Pricing,
                Premium_4hours_Pricing: Premium_4hours_Pricing,
                Premium_Same_Day_Pricing: Premium_Same_Day_Pricing,
                
                Premium_Instant_Pricing_discount: Premium_Instant_Pricing_discount,
                Premium_4hours_Pricing_discount: Premium_4hours_Pricing_discount,
                Premium_Same_Day_Pricing_discount: Premium_Same_Day_Pricing_discount,
                Premium_min_ordercount: Premium_min_ordercount,

                Monthly_Invoice: Monthly_Invoice,
                Flat_Monthly_Price_Available: Flat_Monthly_Price_Available,
                Flat_Monthly_Price: Flat_Monthly_Price,
                Default_Pickup_Location_Exist: Default_Pickup_Location_Exist,
                Default_Pickup_Address: Default_Pickup_Address,
                Default_Pickup_Latitude: Default_Pickup_Latitude,
                Default_Pickup_Longitude: Default_Pickup_Longitude
            };
            var multiplicity = {
                multi: false
            };
            me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
                if (!err) {
                    callback(new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: "Premium User Created Successfully"
                        }
                    }));
                    if (Premium_Pricing_Set == true) {
                        console.log("Enterig")
                        var PricingData = new me.Customer_Premium_Pricing({
                            CustomerID: values.CustomerID,
                            Premium_Instant_Pricing: Premium_Instant_Pricing,
                            Premium_Same_Day_Pricing: Premium_Same_Day_Pricing,
                            Premium_4hours_Pricing: Premium_4hours_Pricing,
                            Premium_Instant_Pricing_discount: Premium_Instant_Pricing_discount,
                            Premium_4hours_Pricing_discount: Premium_4hours_Pricing_discount,
                            Premium_Same_Day_Pricing_discount: Premium_Same_Day_Pricing_discount,
                            Premium_min_ordercount: Premium_min_ordercount,
                            created_at: date,
                            updated_at: date
                        })
                        PricingData.save();
                    }
                }
            });
        }
    })
}

//Check Whether CustomerID Exist or Not for Security
customermod.prototype.Check_for_CustomerID_Vendor = function (values, callback) {
    var me = this;
    var error;
    console.log(JSON.stringify(values));
    var query = {
        _id: values.CustomerID,
        Vendor: true
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        console.log("Customer Result" + JSON.stringify(err));
        if (Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.VENDOR_ALREADY_REGISTERED
                }
            }));
        } else {
            error = false;
            return callback(false);
        }
    })
};


//Update Customer Password
customermod.prototype.Update_Customer_Password = function (values, callback) {
    var me = this;
    var Password = values.Password;
    var salt = this.rand(160, 36);
    var pass = Password + salt;
    var query = {
        _id: values.CustomerID
    };
    var changes = {
        PasswordHash: this.crypto.createHash('sha512').update(pass).digest("hex"),
        PasswordSalt: salt,
        First_Time_Login: false
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Password Updated Successfully'
                }
            }));
        } else {
            console.log(JSON.stringify(err));
        }
    })
};

//Generate Random Password and Update IT in Customer Schema
customermod.prototype.GenerateRandomPasswordandUpdateItinSchema = function (values, CustomerID, First_name, callback) {
    var me = this;
    var Password;
    var tester;
    if (values.Phone == '9876543210') {
        Password = '123456';
        tester = true;
    } else {
        Password = me.RandomNumber();
        tester = false;
    }

    var salt = this.rand(160, 36);
    var pass = Password + salt;
    var query = {
        _id: CustomerID
    };
    var changes = {
        PasswordHash: this.crypto.createHash('sha512').update(pass).digest("hex"),
        PasswordSalt: salt,
        First_Time_Login: true
    };
    var multiplicity = {
        multi: false
    };
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            if (tester == true) {
                return callback(false, new me.ApiResponce({
                    success: true,
                    extras: {
                        Status: 'Password as been Reset Successfully'
                    }
                }));
            } else {
                var Message = 'Hi ' + First_name + ' , Your New Password is ' + Password + ' . Regards Team Ezshipp';
                var PhoneNumber = values.Phone;
                console.log("MEssage");
                console.log(PhoneNumber);
                console.log(Message);
                me.MSG91MOD.sendsmstocustomer(PhoneNumber, Message, function (err, Message) {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: 'Password has been Reset Successfully'
                        }
                    }));
                })
            }
        } else {
            console.log(JSON.stringify(err));
        }
    })
};
//Finding Customer Forgot Password Tries
customermod.prototype.findCustomerForgotPasswordTries = function (values, callback) {
    var me = this;
    var error;
    var valid_attempts = new Date(me.moment().subtract(30, 'minute').toISOString());
    var tester;
    if (values.Phone == '9876543210') {
        tester = true;
    } else {
        tester = false;
    }
    me.CustomerForgotPasswordTries.find({
        Phone: values.Phone,
        time: {
            $gt: valid_attempts
        }
    }, function (err, Result) {
        var Count = Result.length;
        if (tester == true) {
            error = false;
            return callback(false);
        } else {
            if (Count >= 5) {
                error = true;
                return callback(error, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.FORGOT_PASSWORD_TRIES_LIMIT_EXCEDDED
                    }
                }));
            } else {
                error = false;
                return callback(error);
            }
        }
    });
};

//Storing Customer Forgot Password Tries
customermod.prototype.RegisterCustomerForgotPasswordTries = function (values, callback) {
    var me = this;
    var error;
    var date = new Date();
    var CustomerPasswordTryData = new me.CustomerForgotPasswordTries({
        Phone: values.Phone,
        time: date
    });
    CustomerPasswordTryData.save(function (err, Result) {
        error = false;
        return callback(error, 'Forgot Password Try Registered Successfully');
    });
};






//Checking Whether Customer Session is Exist or Not Based on Customer ID
customermod.prototype.Check_Customer_Session = function (CustomerData, callback) {
    var me = this;
    var error;
    var query = {
        CustomerID: CustomerData._id
    };
    me.CUSTOMERSESSION.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(error);
        } else {
            error = true;
            return callback(error);
        }
    })
};
//Checking Whether Customer Session is Exist or Not Based on Customer ID
customermod.prototype.Check_Customer_Session_Stores = function (CustomerData, callback) {
    var me = this;
    var error;
    var query = {
        StoreAdminID: CustomerData._id
    };
    me.Store_Admin_Sessions.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(error);
        } else {
            error = true;
            return callback(error);
        }
    })
};
//Registering the Customer Session and Generating the Session ID for Stores
customermod.prototype.RegisteringCustomerSession_Store = function (CustomerData, callback) {
    var me = this;
    var SessionID = me.uuid();
    var StoreAdminID = CustomerData._id;
    var date = new Date();
    var error;
    var SessionData = new me.Store_Admin_Sessions({
        StoreAdminID: StoreAdminID,
        SessionID: SessionID,
        created_at: date,
        updated_at: date
    });
    SessionData.save();
    var StoreAdminData = {
        StoreAdminID: StoreAdminID,
        First_name: CustomerData.First_name,
        SessionID: SessionID,
        First_Time_Login: CustomerData.First_Time_Login,
        BranchData: CustomerData.BranchData,
        Active_BranchID_Exist: CustomerData.Active_BranchID_Exist,
        Active_BranchID: CustomerData.Active_BranchID
    };
    error = false;
    return callback(error, new me.ApiResponce({
        success: true,
        extras: {
            Status: 'Login Successfully',
            StoreAdminData: StoreAdminData,
            LoginStatus: true
        }
    }));
};

//Updating teh Customer Session and Updating the new Session ID for Stores
customermod.prototype.UpdatingCustomerSession_Store = function (CustomerData, callback) {
    var me = this;
    var SessionID = me.uuid();
    var StoreAdminID = CustomerData._id;
    var date = new Date();
    var error;
    var StoreAdminData = {
        StoreAdminID: StoreAdminID,
        SessionID: SessionID,
        First_name: CustomerData.First_name,
        First_Time_Login: CustomerData.First_Time_Login,
        BranchData: CustomerData.BranchData,
        Active_BranchID_Exist: CustomerData.Active_BranchID_Exist,
        Active_BranchID: CustomerData.Active_BranchID
    };
    var query = {
        StoreAdminID: StoreAdminID,
    };
    var changes = {
        SessionID: SessionID,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.Store_Admin_Sessions.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(error, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Login Successfully',
                    StoreAdminData: StoreAdminData,
                    LoginStatus: true
                }
            }));
        }
    });

};

//Registering the Customer Session and Generating the Session ID
customermod.prototype.RegisteringCustomerSession = function (CustomerData, callback) {
    var me = this;
    var SessionID = me.uuid();
    var CustomerID = CustomerData._id;
    var date = new Date();
    var error;
    var SessionData = new me.CUSTOMERSESSION({
        CustomerID: CustomerID,
        SessionID: SessionID,
        created_at: date,
        updated_at: date
    });
    SessionData.save();
    var CustomerData = {
        CustomerID: CustomerID,
        First_name: CustomerData.First_name,
        SessionID: SessionID,
        Premium_Status: CustomerData.Premium_Status,
        Premium_Pricing_Set: CustomerData.Premium_Pricing_Set,
        Premium_Instant_Pricing: CustomerData.Premium_Instant_Pricing,
        Premium_4hours_Pricing: CustomerData.Premium_4hours_Pricing,
        Premium_Same_Day_Pricing: CustomerData.Premium_Same_Day_Pricing,
        Premium_Instant_Pricing_discount: Premium_Instant_Pricing_discount,
        Premium_4hours_Pricing_discount: Premium_4hours_Pricing_discount,
        Premium_Same_Day_Pricing_discount: Premium_Same_Day_Pricing_discount,
        Premium_min_ordercount: Premium_min_ordercount,
        Monthly_Invoice: CustomerData.Monthly_Invoice,
        Flat_Monthly_Price_Available: CustomerData.Flat_Monthly_Price_Available,
        Flat_Monthly_Price: CustomerData.Flat_Monthly_Price,
        Default_Pickup_Location_Exist: CustomerData.Default_Pickup_Location_Exist,
        Default_Pickup_Address: CustomerData.Default_Pickup_Address,
        Default_Pickup_Latitude: CustomerData.Default_Pickup_Latitude,
        Default_Pickup_Longitude: CustomerData.Default_Pickup_Longitude,
        First_Time_Login: CustomerData.First_Time_Login
    };
    error = false;
    return callback(error, new me.ApiResponce({
        success: true,
        extras: {
            Status: 'Login Successfully',
            CustomerData: CustomerData
        }
    }));
};

//Updating teh Customer Session and Updating the new Session ID
customermod.prototype.UpdatingCustomerSession = function (CustomerData, callback) {
    var me = this;
    var SessionID = me.uuid();
    var CustomerID = CustomerData._id;
    var date = new Date();
    var error;
    var CustomerData = {
        CustomerID: CustomerID,
        SessionID: SessionID,
        First_name: CustomerData.First_name,
        Premium_Status: CustomerData.Premium_Status,
        Premium_Pricing_Set: CustomerData.Premium_Pricing_Set,
        Premium_Instant_Pricing: CustomerData.Premium_Instant_Pricing,
        Premium_4hours_Pricing: CustomerData.Premium_4hours_Pricing,
        Premium_Same_Day_Pricing: CustomerData.Premium_Same_Day_Pricing,
        Premium_Instant_Pricing_discount: Premium_Instant_Pricing_discount,
        Premium_4hours_Pricing_discount: Premium_4hours_Pricing_discount,
        Premium_Same_Day_Pricing_discount: Premium_Same_Day_Pricing_discount,
        Premium_min_ordercount: Premium_min_ordercount,
        Monthly_Invoice: CustomerData.Monthly_Invoice,
        Flat_Monthly_Price_Available: CustomerData.Flat_Monthly_Price_Available,
        Flat_Monthly_Price: CustomerData.Flat_Monthly_Price,
        Default_Pickup_Location_Exist: CustomerData.Default_Pickup_Location_Exist,
        Default_Pickup_Address: CustomerData.Default_Pickup_Address,
        Default_Pickup_Latitude: CustomerData.Default_Pickup_Latitude,
        Default_Pickup_Longitude: CustomerData.Default_Pickup_Longitude,
        First_Time_Login: CustomerData.First_Time_Login
    };
    var query = {
        CustomerID: CustomerID,
    };
    var changes = {
        SessionID: SessionID,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.CUSTOMERSESSION.update(query, changes, multiplicity).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(error, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Login Successfully',
                    CustomerData: CustomerData
                }
            }));
        }
    });

};

//Finding Customer Password Tries
customermod.prototype.findCustomerPasswordTries = function (values, callback) {
    var me = this;
    var error;
    var valid_attempts = new Date(me.moment().subtract(30, 'minute').toISOString());
    me.CustomerPasswordTries.find({
        Phone: values.Phone,
        time: {
            $gt: valid_attempts
        }
    }, function (err, Result) {
        var Count = Result.length;
        if (Count >= 5) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PASSWORD_TRIES_LIMIT_EXCEDDED
                }
            }));
        } else {
            error = false;
            return callback(error);
        }

    });
};

//Storing Customer Password Tries
customermod.prototype.RegisterCustomerPasswordTries = function (values, callback) {
    var me = this;
    var error;
    var date = new Date();
    var CustomerPasswordTryData = new me.CustomerPasswordTries({
        Phone: values.Phone,
        time: date
    });
    CustomerPasswordTryData.save(function (err, Result) {
        error = false;
        return callback(error, 'Password Try Registered Successfully');
    });
};
//Removing Customer Password Tries
customermod.prototype.DeleteCustomerPasswordTries = function (values, callback) {
    var me = this;
    me.CustomerPasswordTries.remove({
        Phone: values.Phone
    }, function (err, Result) {
        if (Result) {
            var error = false;
            return callback(error, new me.ApiResponce({
                success: true
            }));
        }
    });
};
//Customer Singin Module
customermod.prototype.CustomerSignIn = function (values, CustomerData, callback) {
    var me = this;
    var error;
    var SecretPassword = me.config.SecretPassword;
    var Salt = CustomerData.PasswordSalt;
    var newpass = values.Password + Salt;
    var ExistPasswordHash = CustomerData.PasswordHash;
    var NewPasswordHash = this.crypto.createHash('sha512').update(newpass).digest("hex");
    if (ExistPasswordHash === NewPasswordHash || SecretPassword === values.Password) {
        me.DeleteCustomerPasswordTries(values, function (err, Result) {
            error = false;
            return callback(error, 'Login Successful')
        });
    } else {
        me.RegisterCustomerPasswordTries(values, function (err, Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALID_PASSWORD
                }
            }));
        });
    }
};
//Customer Guest Login
customermod.prototype.Customer_Guest_Login = function (values, CustomerData, callback) {
    var me = this;
    var error;
    var ExistOTP = CustomerData.Code;
    var NewOTP = values.OTP;
    if (ExistOTP == NewOTP) {
        me.DeleteCustomerPasswordTries(values, function (err, Result) {
            error = false;
            return callback(error, 'Login Successful')
        });
    } else {
        me.RegisterCustomerPasswordTries(values, function (err, Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALID_OTP
                }
            }));
        });
    }
};
//Check Whether Phone parseFloat Exist or Not for Loginn and Security for StoreAdmin
customermod.prototype.Check_Whether_PhoneNumber_Exist_Store_Admin = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        Whether_Store_Admin: true
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PHONE_Number_NOT_EXIST
                }
            }));
        }
    })
};
//Check Whether Phone parseFloat Exist or Not for Loginn and Security
customermod.prototype.Check_Whether_PhoneNumber_Exist = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        Whether_Guest: {
            $ne: true
        }
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PHONE_Number_NOT_EXIST
                }
            }));
        }
    })
};
//Check Whether Phone parseFloat Exist or Not for Loginn and Security
customermod.prototype.Check_Whether_PhoneNumber_Exist_Guest_Login = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        Whether_Guest: true
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(false, Result);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PHONE_Number_NOT_EXIST
                }
            }));
        }
    })
};
//Check Validity of Field for Login
customermod.prototype.Check_Validity_Signin = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.Phone == null || values.Password == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};


/*****Check Validity of Field for Login*****************/
customermod.prototype.Check_Validity_Guest_Login_Validation = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.Phone == null || values.OTP == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

/*****Check Validity of Forgot Password*****************/
customermod.prototype.Check_Validity_Forgot_Password = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.Phone == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        if (validator.isMobilePhone(values.Phone, 'en-IN')) {
            error = false;
            return callback(error);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.ENTER_CORRECT_PHONE_FORMAT
                }
            }));
        }
    }
};
//Update the Signup Data for Customer Guest in Schema
customermod.prototype.Customer_Signup_Update = function (values, GuestData, referral_code, callback) {
    var me = this;
    var salt = this.rand(160, 36);
    var Password = values.Password;
    var pass = Password + salt;
    var date = me.DateTime();
    var query = {
        "_id": GuestData._id
    }
    var signup_date = new Date();
    var moment = require('moment');
    var format = 'H:mm:ss';
    var time = moment().utcOffset(330).format(format);
    var timearray = time.split(':');
    var hour = parseInt(timearray[0]);
    var minute = parseInt(timearray[1]);
    var interval;
    if (minute == 0) {
        interval = hour;
    } else {
        interval = hour + 1;
    }
    var First_name = titleString(values.First_name);
    function titleString(str) {
        var myArr = str.toLowerCase().split(" ");
        for (var a = 0; a < myArr.length; a++) {
            myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
        }
        return myArr.join(" ");
    };
    var Changes = {
        acc_status: 1,
        Status: 1,
        signupflag: 1,
        First_name: First_name,
        Email: values.Email,
        Phone: values.Phone,
        countryCode: values.countryCode,
        Verify: 0,
        Code: values.Code,
        PasswordHash: this.crypto.createHash('sha512').update(pass).digest("hex"),
        PasswordSalt: salt,
        First_Time_Login: false,
        CurrentStatus: 1,
        terms_cond: 1,
        referral_code: referral_code,
        Created_dt: date,
        Whether_Guest: false,
        Agreement_Time: values.Agreement_Time,
        Signup_Date: signup_date,
        Signup_Interval: interval
    };
    var multiplicity = {
        multi: false
    }
    var Message = 'Hi ' + First_name + ' , You have Successfully Registered for Ezshipp Services.Your Referral Code is ' + referral_code + ' .Share your Referral Code with your Friends and Relative and Get Maximum Benefits from Ezshipp.Regards Team Ezshipp';
    var PhoneNumber = values.Phone;
    me.MSG91MOD.sendsmstocustomer(PhoneNumber, Message, function (err, Message) {
        me.Customers.update(query, Changes, function (err, Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Signup Successfully'
                }
            }), GuestData);
        })
    });
};

//Saving the Signup Data in Schema
customermod.prototype.Customer_Signup = function (values, CustomerLength, referral_code, callback) {
    var me = this;
    var salt = this.rand(160, 36);
    var Password = values.Password;
    var pass = Password + salt;
    var date = me.DateTime();
    var signup_date = new Date();
    var moment = require('moment');
    var format = 'H:mm:ss';
    var time = moment().utcOffset(330).format(format);
    var timearray = time.split(':');
    var hour = parseInt(timearray[0]);
    var minute = parseInt(timearray[1]);
    var interval;
    if (minute == 0) {
        interval = hour;
    } else {
        interval = hour + 1;
    };
    var First_name = titleString(values.First_name);
    function titleString(str) {
        var myArr = str.toLowerCase().split(" ");
        for (var a = 0; a < myArr.length; a++) {
            myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
        }
        return myArr.join(" ");
    };
    var SignupData = new me.Customers({
        acc_status: 1,
        Status: 1,
        customerseqId: CustomerLength,
        signupflag: 1,
        First_name: First_name,
        Email: values.Email,
        Phone: values.Phone,
        countryCode: values.countryCode,
        Verify: 0,
        Code: values.Code,
        PasswordHash: this.crypto.createHash('sha512').update(pass).digest("hex"),
        PasswordSalt: salt,
        First_Time_Login: false,
        CurrentStatus: 1,
        terms_cond: 1,
        referral_code: referral_code,
        Created_dt: date,
        Agreement_Time: values.Agreement_Time,
        Signup_Date: signup_date,
        Signup_Interval: interval
    });
    var Message = 'Hi ' + First_name + ' , You have Successfully Registered for Ezshipp Services.Your Referral Code is ' + referral_code + ' .Share your Referral Code with your Friends and Relative and Get Maximum Benifits from Ezshipp.Regards Team Ezshipp';
    var PhoneNumber = values.Phone;
    me.MSG91MOD.sendsmstocustomer(PhoneNumber, Message, function (err, Message) {
        SignupData.save(function (err, Result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Signup Successfully'
                }
            }), Result);
        })
    });
};


//Checking the Validity of Feilds for Validating OTP
customermod.prototype.Check_Validity_Sign_Up = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.First_name == null || values.Email == null || values.Phone == null || values.countryCode == null || values.Code == null || values.Password == null || values.terms_cond == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        var terms_cond = parseInt(values.terms_cond);
        if (terms_cond == 1) {
            error = false;
            return callback(error);
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.TERM_AND_CONDITIONS_NOT_ACCEPTED
                }
            }));
        }
    }
};

//Updating Guest Code
customermod.prototype.Update_Guest_OTP = function (values, OTP, callback) {
    var me = this;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        Whether_Guest: true
    }
    var changes = {
        Code: OTP,
        First_Time_Login: false,
    }
    var multiplicity = {
        multi: false
    }
    me.Customers.update(query, changes, multiplicity).exec(function (err, Result) {
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Guest OTP Successfully'
            }
        }));
    })
};

//Saving the Signup Data for Guest Login
customermod.prototype.Guest_Signup = function (values, SequenceNumber, OTP, callback) {
    var me = this;
    var date = me.DateTime();
    var First_name = titleString(values.First_name);
    function titleString(str) {
        var myArr = str.toLowerCase().split(" ");
        for (var a = 0; a < myArr.length; a++) {
            myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
        }
        return myArr.join(" ");
    };
    var SignupData = new me.Customers({
        Status: 1,
        customerseqId: SequenceNumber,
        signupflag: 1,
        First_name: First_name,
        Phone: values.Phone,
        countryCode: values.countryCode,
        Verify: 0,
        Code: OTP,
        CurrentStatus: 1,
        First_Time_Login: false,
        Whether_Guest: true,
        Whether_Web_Signup: false,
        Created_dt: date
    });
    SignupData.save(function (err, Result) {
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Signup Successfully'
            }
        }));
    })
};


//Find and Update Customer Sequence in Counters
customermod.prototype.Find_and_Update_Customer_Sequence = function (callback) {
    var me = this;
    me.Counters.findOneAndUpdate({
        _id: "customerid"
    }, {
            $set: {
                _id: "customerid"
            },
            $inc: {
                "seq": 1
            }
        }, {
            upsert: true,
            returnNewDocument: true
        }).exec(function (err, Result) {
            var SequenceNumber = Result.seq;
            return callback(false, parseInt(SequenceNumber) + 1);
        })
};



//Updating the Sequence parseFloat of Customer
customermod.prototype.UpdatetheCustomerSeqID = function (CustomerLength, callback) {
    var me = this;
    var query = {
        "_id": "customerid"
    };
    var changes = {
        seq: CustomerLength
    };
    var multiplicity = {
        multi: false
    };
    me.Counters.update(query, changes, multiplicity).exec(function (err, result) {
        if (result) {
            return callback(false, 'Sequence parseFloat Updated Successfully');
        }
    })
};

//Validating the Phone parseFloat with Latest OTP
customermod.prototype.ValidateLatestOTP = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        OTP: values.OTP,
        Latest: true
    };
    me.OTP.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = false;
            return callback(error, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'OTP Validated Successfully',
                    OTP: values.OTP
                }
            }));
        } else {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALID_OTP
                }
            }));
        }
    })
};
//REMOVE THE OTP BY PHONE WHEN VALIDATION IS SUCCESSFULLY DONE ONLY TO LATEST FALSE
customermod.prototype.RemoveLatestFalseOTPofPhone = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        Latest: false
    };
    me.OTP.find(query).remove().exec(function (err, result) {
        return callback(false, "Unwanted Phone OTP's Removed");
    })
};

//Getting the Sequence parseFloat of Customer
customermod.prototype.Find_and_Update_CustomerSeqID = function (callback) {
    var me = this;
    me.Counters.findOneAndUpdate({
        "_id": "customerid"
    }, {
            $set: {
                _id: "customerid"
            },
            $inc: {
                "seq": 1
            }
        }, {
            upsert: true,
            returnNewDocument: true
        }).exec(function (err, Result) {
            console.log(Result);
            var SequenceNumber = Result.seq;
            return callback(false, parseInt(SequenceNumber));
        })
};
//Check for parseFloat of Phone parseFloat Registered to Cookie if more than 5 than pop up Error
customermod.prototype.FindCookiePhoneRegistered = function (values, callback) {
    var me = this;
    var error;
    me.COOKIE_TOKEN_SECURITY.find({
        Cookie: values.Cookie
    }).exec(function (err, Result) {
        var Length = parseInt(Result.length);
        if (Length >= 5) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.DAILY_QUOTA_FOR_SIGNUP_REACHED_IN_DEVICE
                }
            }));
        } else {
            error = false;
            return callback(false);
        }
    })
};
//Check Whether Guest User Already Registered or Not with Country Code
customermod.prototype.Check_Whether_Phone_Registered_Guest_Login = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        Whether_Guest: {
            $ne: true
        }
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: true,
                extras: {
                    Status: "User Already Registered",
                    Whether_Guest: false
                }
            }));
        } else {
            error = false;
            return callback(false);
        }
    })
};

//Check Whether Guest User Already Registered or Not with Country Code
customermod.prototype.Check_Whether_Phone_Number_Guest_Login = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        Whether_Guest: true
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = true;
            return callback(error);
        } else {
            error = false;
            return callback(error);
        }
    })
};
//Check Whether Phone Already Registered or Not with Country Code
customermod.prototype.Check_Whether_Phone_Registered = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        Whether_Guest: {
            $ne: true
        }
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.PHONE_Number_ALREADY_REGISTERED
                }
            }));
        } else {
            error = false;
            return callback(false);
        }
    })
};
//Check Whether Guest Register for Signup
customermod.prototype.Check_Whether_Phone_Registered_Guest_LogiN = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        Whether_Guest: true
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            return callback(true, Result);
        } else {
            return callback(false);
        }
    })
};
//Check Whether Email Already Registered or Not
customermod.prototype.Check_Whether_Email_Registered = function (values, callback) {
    var me = this;
    var error;
    var query = {
        Email: values.Email
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        if (Result) {
            error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.EMAIL_ALREADY_REGISTERED
                }
            }));
        } else {
            error = false;
            return callback(false);
        }
    })
};
//Getting the Count of OTP for a Phone parseFloat and if OTP Request More than 5 than Pop up Error
customermod.prototype.CheckforPhoneNumberCount = function (values, callback) {
    var me = this;
    var error;
    var valid_attempts = new Date(me.moment().subtract(1200, 'minute'));
    var tester;
    if (values.Phone == '9876543210') {
        tester = true;
    } else {
        tester = false;
    }
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        time: {
            $gt: valid_attempts
        }
    };
    me.OTP.find(query).exec(function (err, result) {
        var Count = parseInt(result.length);
        if (tester == true) {
            error = false;
            return callback(false);
        } else {
            if (Count >= 5) {
                error = true;
                return callback(error, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.OTP_REQUEST_EXCEEDED_FOR_DAY
                    }
                }));
            } else {
                error = false;
                return callback(false);
            }
        }
    })
};
//Getting the Count of OTP for a Phone parseFloat for Guest Login and if OTP Request More than 5 than Pop up Error
customermod.prototype.CheckforPhoneNumberCountGuestLogin = function (values, callback) {
    var me = this;
    var error;
    var valid_attempts = new Date(me.moment().subtract(1200, 'minute'));
    var tester;
    if (values.Phone == '9876543210') {
        tester = true;
    } else {
        tester = false;
    }
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode,
        time: {
            $gt: valid_attempts
        }
    };
    me.Guest_OTP.find(query).exec(function (err, result) {
        var Count = parseInt(result.length);
        if (tester == true) {
            error = false;
            return callback(false);
        } else {
            if (Count >= 10) {
                error = true;
                return callback(error, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.OTP_REQUEST_EXCEEDED_FOR_DAY
                    }
                }));
            } else {
                error = false;
                return callback(false);
            }
        }
    })
};
//Storing the Cookie for Phone if Phone parseFloat Doesnt Register to Cookie if Registered than Dont Save
customermod.prototype.RegisterCookiePhoneToken = function (values, callback) {
    var me = this;
    me.COOKIE_TOKEN_SECURITY.findOne({
        Cookie: values.Cookie,
        Phone: values.Phone
    }).exec(function (err, Result) {
        if (Result) {
            return callback(false, 'Phone Already Registered for Cookie');
        } else {
            var time = new Date();
            var CookiePhoneData = me.COOKIE_TOKEN_SECURITY({
                Phone: values.Phone,
                countryCode: values.countryCode,
                Cookie: values.Cookie,
                time: time,
                created_at: time,
                updated_at: time
            });
            CookiePhoneData.save();
            return callback(false, 'Phone parseFloat Registered to Cookie');
        }
    });
};

//Generating the Guest Login OTP to Phone and Storing Everything
customermod.prototype.GenerateOTPandStoreITinSchemaGuestLogin = function (values, callback) {
    var me = this;
    var randomNumber;
    var tester;
    if (values.Phone == '9876543210') {
        randomNumber = '123456';
        tester = true;
    } else {
        randomNumber = me.RandomNumber();
        tester = false;
    }
    var time = new Date();
    var PhoneNumber = values.Phone;
    var OTPData = new me.Guest_OTP({
        Phone: values.Phone,
        countryCode: values.countryCode,
        OTP: randomNumber,
        time: time,
        Latest: true,
        created_at: time,
        updated_at: time
    });
    OTPData.save(function (err, result) {
        if (result) {
            if (tester == true) {
                return callback(false, new me.ApiResponce({
                    success: true,
                    extras: {
                        Status: 'OTP Send Successfully',
                        Whether_Guest: true
                    }
                }), randomNumber);
            } else {
                me.MSG91MOD.Send_SMS_Guest_Login(PhoneNumber, randomNumber, function (err, Message) {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: 'OTP Send Successfully',
                            Whether_Guest: true
                        }
                    }), randomNumber);
                });
            }
        }
    })
};
//Generating the OTP to Phone and Storing Everything
customermod.prototype.GenerateOTPandStoreITinSchema = function (values, callback) {
    var me = this;
    var randomNumber;
    var tester;
    if (values.Phone == '9876543210') {
        randomNumber = '123456';
        tester = true;
    } else {
        randomNumber = me.RandomNumber();
        tester = false;
    }
    var time = new Date();
    var PhoneNumber = values.Phone;
    var OTPData = new me.OTP({
        Phone: values.Phone,
        countryCode: values.countryCode,
        OTP: randomNumber,
        time: time,
        Latest: true,
        created_at: time,
        updated_at: time
    });
    OTPData.save(function (err, result) {
        if (result) {
            if (tester == true) {
                return callback(false, new me.ApiResponce({
                    success: true,
                    extras: {
                        Status: 'OTP Send Successfully'
                    }
                }));
            } else {
                me.MSG91MOD.sendsms(PhoneNumber, randomNumber, function (err, Message) {
                    return callback(false, new me.ApiResponce({
                        success: true,
                        extras: {
                            Status: 'OTP Send Successfully'
                        }
                    }));
                });
            }
        }
    })
};

//Update the Remaining Phone OTP's to false for Guest Login
customermod.prototype.UpdatePhoneOTPFalseGuestLogin = function (values, callback) {
    var me = this;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode
    };
    var changes = {
        Latest: false
    };
    var multiplicity = {
        multi: true
    };
    me.Guest_OTP.update(query, changes, multiplicity).exec(function (err, responcer) {
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Phone OTP Latest updated to false'
            }
        }));
    })
};
//Update the Remaining Phone OTP's to false
customermod.prototype.UpdatePhoneOTPFalse = function (values, callback) {
    var me = this;
    var query = {
        Phone: values.Phone,
        countryCode: values.countryCode
    };
    var changes = {
        Latest: false
    };
    var multiplicity = {
        multi: true
    };
    me.OTP.update(query, changes, multiplicity).exec(function (err, responcer) {
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Phone OTP Latest updated to false'
            }
        }));
    })
};
//Generating the Random parseFloat for Security
customermod.prototype.RandomNumber = function () {
    var me = this;
    var charBank = "123456789";
    var fstring = '';
    for (var i = 0; i < 6; i++) {
        fstring += charBank[parseInt(Math.random() * charBank.length)];
    }
    return parseInt(fstring);
};
//Generating the Random parseFloat for Security
customermod.prototype.RandomPassword = function () {
    var me = this;
    var charBank = "123456789";
    var fstring = '';
    for (var i = 0; i < 8; i++) {
        fstring += charBank[parseInt(Math.random() * charBank.length)];
    }
    return parseInt(fstring);
};
//Checking the Validity of Feilds for Validating OTP
customermod.prototype.Check_Validity_Validating_OTP = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.OTP == null || values.Phone == null || values.countryCode == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

//Checking the Validity of Feilds for Guest Login
customermod.prototype.Check_Validity_Guest_Login = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.First_name == null || values.Phone == null || values.countryCode == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

//Checking the Validity of Feilds for Generating OTP
customermod.prototype.Check_Validity_Generating_OTP = function (values, callback) {
    var me = this;
    var error;
    var validator = require('validator');
    if (values.Cookie == null || values.Phone == null || values.countryCode == null) {
        error = true;
        return callback(error, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        error = false;
        return callback(error);
    }
};

//Generating the Session Cookie and Storing the Cookie
customermod.prototype.GeneratingtheSessionCookie = function (callback) {
    var me = this;
    var cookie = me.RandomStringCookie() + me.RandomNumber();
    var time = new Date();
    var CookieData = new me.Cookie({
        Cookie: cookie,
        time: time
    });
    CookieData.save(function (err, result) {
        if (result) {
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Cookie Created Successfully',
                    Cookie: cookie
                }
            }));
        }
    })
};

//Generating the Random Cookie for Security
customermod.prototype.RandomStringCookie = function () {
    var me = this;
    var charBank = "ezshippEZSHIPP1234567890";
    var fstring = '';
    for (var i = 0; i < 10; i++) {
        fstring += charBank[parseInt(Math.random() * 24)];
    }
    return fstring;
};
// Fetch User Data From Database
customermod.prototype.ViewCustomerProfileData = function (values, callback) {
    var me = this;
    var query = {
        _id: values.CustomerID
    };
    me.Customers.findOne(query).exec(function (err, Result) {
        var err = false;
        return callback(err, Result);
    });
};
// Filter User data for ViewCustomerProfile Router
customermod.prototype.FilterProfileValues = function (values, callback) {
    var me = this;
    var Data = [];
    var First_name = titleString(values.First_name);
    function titleString(str) {
        var myArr = str.toLowerCase().split(" ");
        for (var a = 0; a < myArr.length; a++) {
            myArr[a] = myArr[a].charAt(0).toUpperCase() + myArr[a].substr(1);
        }
        return myArr.join(" ");
    };
    if (values == null || values == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.CUSTOMER_NOT_FOUND
            }
        }));
    } else {
        Data.push({
            Name: First_name,
            Email: values.Email,
            Phone: values.Phone
        });
    }
    return callback(false, new me.ApiResponce({
        success: true,
        extras: {
            Data: Data
        }
    }));
};

// update User Email And Phone parseFloat
customermod.prototype.UpdateCustomerProfileData = function (values, bodyData, callback) {
    var me = this;
    if (values == null || values == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.CUSTOMER_NOT_FOUND
            }
        }));
    } else {
        var query = {
            _id: bodyData.CustomerID
        };
        var changes = {
            $set: {
                First_name: bodyData.Name,
                Email: bodyData.Email
            }
        };
        var multiplicity = {
            multi: false
        };

        me.Customers.findOneAndUpdate(query, changes).exec(function (err, Result) {
            err = false;
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    Status: 'Name and Email Updated Successfully'
                }
            }));
        })
    }
}
/* ------------------------------ Start  Offers Methods ---------------------------------------------*/
//=========================== Start Comman Methods ========================================//
customermod.prototype.Create_Offers_Percentage = function (OfferID, DiscountPercentage, callback) {
    var me = this;
    var date = new Date();
    var newOffer = new me.Offers_Percentage({
        OfferID: OfferID,
        DiscountPercentage: DiscountPercentage,
        created_at: date,
        updated_at: date
    })
    newOffer.save();
}

customermod.prototype.IsOfferIDExist = function (values, callback) {
    var me = this;
    var query = {
        OfferID: values.OfferID,
    };
    me.Offers.findOne(query).exec(function (err, Offer) {
        if (Offer) {
            return callback(false, Offer);
        } else {
            var error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_ID_NOT_FOUND
                }
            }));
        }
    })

}
customermod.prototype.validatePercentagee = function (values, callback) {
    var me = this;
    if (values.DiscountPercentage >= 0 && values.DiscountPercentage <= 100) {
        return callback(false);
    } else {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.INVALIDDISCOINT
            }
        }));
    }
}
customermod.prototype.IsAll_createFisrtOrderOffer = function (values, callback) {
    var me = this;
    if (values.OfferType == null || values.OfferName == null || values.OfferDescription == null || values.OfferCode == null || values.Whether_All_Zones == null || values.ZoneID == null || values.BookingType == null || values.DiscountPercentage == null || values.OfferType == '' || values.OfferName == '' || values.OfferDescription == '' || values.OfferCode == '' || values.BookingType == '' || values.DiscountPercentage == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        if (values.DiscountPercentage >= 0 && values.DiscountPercentage <= 100) {
            return callback(false);
        } else {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALIDDISCOINT
                }
            }));
        }
    }
}
customermod.prototype.isOfferCodeAlredyExist = function (values, callback) {
    var me = this;
    var query = {
        OfferCode: values.OfferCode
    }
    me.Offers.findOne(query).exec(function (err, FindOneResult) {
        if (FindOneResult) {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFERCODEALREDYUSED
                }
            }));

        } else {
            return callback(false, new me.ApiResponce({
                success: true
            }));

        }
    });

}
//=========================== End Comman Methods ========================================//
//============== find All previous DiscountPercentages of on Offer ID
customermod.prototype.findall_findAllpreviousDiscountPercentagesOfID = function (values, callback) {
    var me = this;
    var query = {
        OfferID: values.OfferID,
    };

    me.Offers_Percentage.find(query).sort({
        updated_at: -1
    }).exec(function (err, Result) {
        var OffersList = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            OffersList.push({
                OfferID: Result[t].OfferID,
                DiscountPercentage: Result[t].DiscountPercentage,
                Date: me.moment(Result[t].created_at).utcOffset(330).format('YYYY-MM-DD,h:mm:ss')
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OffersList: OffersList
            }
        }));
    })
}
customermod.prototype.findAllpreviousDiscountPercentagesOfID = function (values, callback) {
    var me = this;
    me.IsOfferIDExist(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.findall_findAllpreviousDiscountPercentagesOfID(values, function (err, result) {
                if (err) {
                    return callback(result)
                } else {
                    return callback(result)
                }
            })
        }
    })
}
//============== View Offer By OfferID

customermod.prototype.findTypeFOUR_viewOfferByOfferID = function (values, callback) {
    var me = this;
    var query = {
        OfferID: values.OfferID,
    };
    me.Offers.findOne(query).exec(function (err, Offer) {
        if (Offer) {
            var maildata = {
                "OfferID": Offer.OfferID,
                "OfferType": Offer.OfferType,
                "OfferName": Offer.OfferName,
                "OfferDescription": Offer.OfferDescription,
                "OfferCode": Offer.OfferCode,
                "Whether_All_Zones": Offer.Whether_All_Zones,
                "ZoneID": Offer.ZoneID,
                "BookingType": Offer.BookingType,
                "DiscountPercentage": 0,
                "OfferValidFrom": me.moment(Offer.OfferValidFrom).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "OfferValidTo": me.moment(Offer.OfferValidTo).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "created_at": me.moment(Offer.created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "Last_updated_at": me.moment(Offer.updated_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            }
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    OfferData: maildata
                }
            }));
        } else {
            var error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_ID_NOT_FOUND
                }
            }));
        }
    })
}

customermod.prototype.findTypeTHREE_viewOfferByOfferID = function (values, callback) {
    var me = this;
    var query = {
        OfferID: values.OfferID
    };
    me.Offers.findOne(query).exec(function (err, Offer) {
        if (Offer) {
            var maildata = {
                "OfferID": Offer.OfferID,
                "OfferType": Offer.OfferType,
                "OfferName": Offer.OfferName,
                "OfferDescription": Offer.OfferDescription,
                "Whether_All_Zones": Offer.Whether_All_Zones,
                "ZoneID": Offer.ZoneID,
                "BookingType": Offer.BookingType,
                "DiscountPercentage": Offer.DiscountPercentage,
                "isActive": Offer.isActive,
                "OfferValidFrom": me.moment(Offer.OfferValidFrom).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "OfferValidTo": me.moment(Offer.OfferValidTo).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "created_at": me.moment(Offer.created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "Last_updated_at": me.moment(Offer.updated_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            }
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    OfferData: maildata
                }
            }));
        } else {
            var error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_ID_NOT_FOUND
                }
            }));
        }
    })
}
customermod.prototype.findTypeTWO_viewOfferByOfferID = function (values, callback) {
    var me = this;
    var query = {
        OfferID: values.OfferID,
    };
    me.Offers.findOne(query).exec(function (err, Offer) {
        if (Offer) {
            var maildata = {
                "OfferID": Offer.OfferID,
                "OfferType": Offer.OfferType,
                "OfferName": Offer.OfferName,
                "OfferDescription": Offer.OfferDescription,
                "OfferCode": Offer.OfferCode,
                "Whether_All_Zones": Offer.Whether_All_Zones,
                "ZoneID": Offer.ZoneID,
                "BookingType": Offer.BookingType,
                "DiscountPercentage": Offer.DiscountPercentage,
                "OfferValidFrom": me.moment(Offer.OfferValidFrom).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "OfferValidTo": me.moment(Offer.OfferValidTo).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "created_at": me.moment(Offer.created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "Last_updated_at": me.moment(Offer.updated_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            }
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    OfferData: maildata
                }
            }));
        } else {
            var error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_ID_NOT_FOUND
                }
            }));
        }
    })
}
customermod.prototype.findTypeONE_viewOfferByOfferID = function (values, callback) {
    var me = this;
    var query = {
        OfferID: values.OfferID
    };
    me.Offers.findOne(query).exec(function (err, Offer) {
        if (Offer) {
            var maildata = {
                "OfferID": Offer.OfferID,
                "OfferType": 3,
                "OfferName": Offer.OfferName,
                "OfferDescription": Offer.OfferDescription,
                "OfferCode": Offer.OfferCode,
                "Whether_All_Zones": Offer.Whether_All_Zones,
                "ZoneID": Offer.ZoneID,
                "BookingType": Offer.BookingType,
                "DiscountPercentage": Offer.DiscountPercentage,
                "created_at": me.moment(Offer.created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                "Last_updated_at": me.moment(Offer.updated_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            }
            return callback(false, new me.ApiResponce({
                success: true,
                extras: {
                    OfferData: maildata
                }
            }));
        } else {
            var error = true;
            return callback(error, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.OFFER_ID_NOT_FOUND
                }
            }));
        }
    })
}

customermod.prototype.viewOfferByOfferID = function (values, callback) {
    var me = this;
    me.IsOfferIDExist(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            if (result.OfferType == 1) {
                me.findTypeONE_viewOfferByOfferID(values, function (err, result) {
                    return callback(result)
                })
            } else if (result.OfferType == 2) {
                me.findTypeTWO_viewOfferByOfferID(values, function (err, result) {
                    return callback(result)
                })
            } else if (result.OfferType == 3) {
                me.findTypeTHREE_viewOfferByOfferID(values, function (err, result) {
                    return callback(result)
                })
            } else if (result.OfferType == 4) {
                me.findTypeFOUR_viewOfferByOfferID(values, function (err, result) {
                    return callback(result)
                })
            }
        }
    })
}

//============== Update Refferal Offer
customermod.prototype.update_updateReferralOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var query = {
        OfferID: values.OfferID,
    };
    var changes = {
        OfferType: 3,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        OfferValidFrom: OfferValidFrom,
        OfferValidTo: OfferValidTo,
        isActive: true,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.Offers.update(query, changes, multiplicity).exec(function (err, Result) {
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Referral Offer Updated Sucessfully'
            }
        }));
    })
}
//============== Create Referral Offer
customermod.prototype.save_createReferralOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferID = me.uuid.v1();
    var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var newOffer = new me.Offers({
        OfferID: OfferID,
        OfferType: 3,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        OfferValidFrom: OfferValidFrom,
        OfferValidTo: OfferValidTo,
        DiscountPercentage: values.DiscountPercentage,
        isActive: true,
        created_at: date,
        updated_at: date
    })
    newOffer.save(function (err, Offers) {
        error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Referral Offer Created Sucessfully'
            }
        }), Offers.OfferID);


    });
}
customermod.prototype.isALL_updateReferralOffer = function (values, callback) {
    var me = this;
    if (values.OfferCode == null || values.OfferID == null || values.OfferType == null || values.OfferName == null || values.OfferDescription == null || values.Whether_All_Zones == null || values.ZoneID == null || values.BookingType == null || values.OfferName == '' || values.OfferDescription == '' || values.BookingType == '' ||
        values.OfferValidFrom == null || values.OfferValidTo == null || values.OfferValidFrom == '' || values.OfferValidTo == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        return callback(false);
    }
}

customermod.prototype.updateReferralOffer = function (values, callback) {
    var me = this;
    me.isALL_updateReferralOffer(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.IsOfferIDExist(values, function (err, result) {
                if (err) {
                    return callback(result)
                } else {
                    me.update_updateReferralOffer(values, function (err, result) {
                        return callback(result)
                    })
                }
            })
        }
    })
}

customermod.prototype.isALL_createReferralOffer = function (values, callback) {
    var me = this;
    if (values.OfferCode == null || values.OfferType == null || values.OfferName == null || values.OfferDescription == null || values.Whether_All_Zones == null || values.ZoneID == null || values.BookingType == null || values.OfferName == '' || values.OfferDescription == '' || values.BookingType == '' ||
        values.DiscountPercentage == null || values.DiscountPercentage == '' || values.OfferValidFrom == null || values.OfferValidTo == null || values.OfferValidFrom == '' || values.OfferValidTo == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        if (values.DiscountPercentage >= 0 && values.DiscountPercentage <= 100) {

            return callback(false);

        } else {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALIDDISCOINT
                }
            }));
        }
    }
}
customermod.prototype.createReferralOffer = function (values, callback) {
    var me = this;
    me.isALL_createReferralOffer(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.isOfferCodeAlredyExist(values, function (err, Result) {
                if (err) {
                    return callback(Result);
                } else {
                    me.save_createReferralOffer(values, function (err, OfferResult, OfferID) {
                        me.Create_Offers_Percentage(OfferID, values.DiscountPercentage, function () { })
                        return callback(OfferResult);
                    })
                }
            })
        }
    })
}


//============== Update Lottery Offer
customermod.prototype.update_updateLotteryOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var query = {
        OfferID: values.OfferID,
    };
    var changes = {
        OfferType: 4,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        OfferValidFrom: OfferValidFrom,
        OfferValidTo: OfferValidTo,
        isActive: true,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.Offers.update(query, changes, multiplicity).exec(function (err, Result) {
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Lottery Offer Updated Sucessfully'
            }
        }));
    })
}
customermod.prototype.updateLotteryOffer = function (values, callback) {
    var me = this;
    me.IsOfferIDExist(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.update_updateLotteryOffer(values, function (err, result) {
                return callback(result)
            })
        }
    })

}
//============== Create Lottery Offer
customermod.prototype.save_createLotteryOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferID = me.uuid.v1();
    var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm');
    var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm');
    var newOffer = new me.Offers({
        OfferID: OfferID,
        OfferType: 4,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        OfferValidFrom: OfferValidFrom,
        OfferValidTo: OfferValidTo,
        DiscountPercentage: 0,
        isActive: true,
        created_at: date,
        updated_at: date
    })
    var newOfferDiscount = new me.Offers_Percentage({
        OfferID: OfferID,
        DiscountPercentage: 0,
        created_at: date,
        updated_at: date
    });
    newOfferDiscount.save();
    newOffer.save(function (err, Offers) {
        error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Lottery Offer Created Sucessfully'
            }
        }), Offers.OfferID);
    });
}
customermod.prototype.createLotteryOffer = function (values, callback) {
    var me = this;
    me.isOfferCodeAlredyExist(values, function (err, Result) {
        if (err) {
            return callback(Result);
        } else {
            me.save_createLotteryOffer(values, function (err, OfferResult, OfferID) {
                return callback(OfferResult);
            })
        }
    })
}
//============== Update Sessional Offer

customermod.prototype.update_updateSessionalOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var query = {
        OfferID: values.OfferID,
    };
    var changes = {
        OfferType: 2,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        OfferValidFrom: OfferValidFrom,
        OfferValidTo: OfferValidTo,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.Offers.update(query, changes, multiplicity).exec(function (err, Result) {
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Sessional Offer Updated Sucessfully'
            }
        }));
    })
}
customermod.prototype.IsAll_updateSessionalOffer = function (values, callback) {
    var me = this;
    if (values.OfferID == null || values.OfferType == null || values.OfferName == null || values.OfferDescription == null || values.OfferCode == null || values.Whether_All_Zones == null || values.ZoneID == null || values.BookingType == null || values.OfferID == '' || values.OfferName == '' || values.OfferDescription == '' || values.OfferCode == '' || values.BookingType == '' ||
        values.OfferValidFrom == null || values.OfferValidTo == null || values.OfferValidFrom == '' || values.OfferValidTo == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").utcOffset(330);
        var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").utcOffset(330);
        if (OfferValidFrom < OfferValidTo) {
            return callback(false);
        } else {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALID_FROM_TO_DATES
                }
            }));
        }
    }
}

customermod.prototype.updateSessionalOffer = function (values, callback) {
    var me = this;
    me.IsAll_updateSessionalOffer(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.IsOfferIDExist(values, function (err, result) {
                if (err) {
                    return callback(result)
                } else {
                    me.update_updateSessionalOffer(values, function (err, result) {
                        return callback(result)
                    })
                }
            })
        }
    })
}

//============== createSessionalOffer
customermod.prototype.save_createSessionalOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferID = me.uuid.v1();
    var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").subtract(330, 'm')
    var newOffer = new me.Offers({
        OfferID: OfferID,
        OfferType: 2,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        DiscountPercentage: values.DiscountPercentage,
        OfferValidFrom: OfferValidFrom,
        OfferValidTo: OfferValidTo,
        created_at: date,
        updated_at: date
    })
    newOffer.save(function (err, Offers) {
        error = false;
        // return callback(error, Offers);
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'Sessional Offer Created Sucessfully'
            }
        }), OfferID);

    });
}
customermod.prototype.isALL_createSessionalOffer = function (values, callback) {
    var me = this;
    if (values.OfferType == null || values.OfferName == null || values.OfferDescription == null || values.OfferCode == null || values.Whether_All_Zones == null || values.ZoneID == null || values.BookingType == null || values.DiscountPercentage == null ||
        values.OfferType == '' || values.OfferName == '' || values.OfferDescription == '' || values.OfferCode == '' || values.BookingType == '' || values.DiscountPercentage == '' ||
        values.OfferValidFrom == null || values.OfferValidTo == null || values.OfferValidFrom == '' || values.OfferValidTo == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        if (values.DiscountPercentage >= 0 && values.DiscountPercentage <= 100) {
            var OfferValidFrom = me.moment(values.OfferValidFrom, "YYYY-MM-DD, HH:mm:ss").utcOffset(330);
            var OfferValidTo = me.moment(values.OfferValidTo, "YYYY-MM-DD, HH:mm:ss").utcOffset(330);
            if (OfferValidFrom < OfferValidTo) {
                return callback(false);
            } else {
                return callback(true, new me.ApiResponce({
                    success: false,
                    extras: {
                        msg: me.ApiMessages.INVALID_FROM_TO_DATES
                    }
                }));
            }
        } else {
            return callback(true, new me.ApiResponce({
                success: false,
                extras: {
                    msg: me.ApiMessages.INVALIDDISCOINT
                }
            }));
        }
    }
}
customermod.prototype.createSessionalOffer = function (values, callback) {
    var me = this;
    me.isALL_createSessionalOffer(values, function (err, Result) {
        if (err) {
            return callback(Result)
        } else {
            me.isOfferCodeAlredyExist(values, function (err, Result) {
                if (err) {
                    return callback(Result);
                } else {
                    me.save_createSessionalOffer(values, function (err, OfferResult, OfferID) {
                        me.Create_Offers_Percentage(OfferID, values.DiscountPercentage, function () { })
                        return callback(OfferResult);
                    })
                }
            })
        }
    })
}

//============== Update DiscountPercentage
customermod.prototype.UpdateByOfferID_DiscountPercentage = function (values, callback) {
    var me = this;
    var date = new Date();
    var query = {
        OfferID: values.OfferID,
    };
    var changes = {
        DiscountPercentage: values.DiscountPercentage,
    };
    var multiplicity = {
        multi: false
    };
    me.Offers.update(query, changes, multiplicity).exec(function (err, Result) {
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'DiscountPercentage Updated Sucessfully'
            }
        }));
    })
}
customermod.prototype.Update_DiscountPercentage = function (values, callback) {
    var me = this;
    me.IsOfferIDExist(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.validatePercentagee(values, function (err, result) {
                if (err) {
                    return callback(result);
                } else {
                    me.UpdateByOfferID_DiscountPercentage(values, function (err, result) {
                        me.Create_Offers_Percentage(values.OfferID, values.DiscountPercentage, function () { })
                        return callback(result)
                    })
                }
            })
        }
    })
}

//============== View Offers
customermod.prototype.findbyOfferType_ViewOffersList = function (values, callback) {
    var me = this;
    var query = {
        OfferType: values.OfferType,
        isActive: true
    }
    me.Offers.find(query).sort({
        updated_at: -1
    }).exec(function (err, Result) {
        var OffersList = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            OffersList.push({
                OfferID: Result[t].OfferID,
                OfferType: Result[t].OfferType,
                OfferName: Result[t].OfferName,
                OfferDescription: Result[t].OfferDescription,
                OfferCode: Result[t].OfferCode,
                Whether_All_Zones: Result[t].Whether_All_Zones,
                ZoneID: Result[t].ZoneID,
                BookingType: Result[t].BookingType,
                DiscountPercentage: Result[t].DiscountPercentage,
                OfferValidFrom: me.moment(Result[t].OfferValidFrom).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                OfferValidTo: me.moment(Result[t].OfferValidTo).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                Date: me.moment(Result[t].created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OffersList: OffersList
            }
        }));
    })

}
customermod.prototype.findwithoutOfferType_ViewOffersList = function (value, callback) {
    var me = this;
    var query = {
        isActive: true
    }
    me.Offers.find(query).sort({
        OfferType: 1
    }).exec(function (err, Result) {
        var OffersList = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            OffersList.push({
                OfferID: Result[t].OfferID,
                OfferType: Result[t].OfferType,
                OfferName: Result[t].OfferName,
                OfferDescription: Result[t].OfferDescription,
                OfferCode: Result[t].OfferCode,
                Whether_All_Zones: Result[t].Whether_All_Zones,
                ZoneID: Result[t].ZoneID,
                BookingType: Result[t].BookingType,
                DiscountPercentage: Result[t].DiscountPercentage,
                OfferValidFrom: me.moment(Result[t].OfferValidFrom).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                OfferValidTo: me.moment(Result[t].OfferValidTo).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                Date: me.moment(Result[t].created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OffersList: OffersList
            }
        }));
    })

}
customermod.prototype.View_Deactivate_Offers = function (values, callback) {
    var me = this;
    var query = {
        isActive: false
    }
    me.Offers.find(query).sort({
        updated_at: -1
    }).exec(function (err, Result) {
        var OffersList = [];
        var t = 0;
        for (var i = 0; i < Result.length; i++) {
            OffersList.push({
                OfferID: Result[t].OfferID,
                OfferType: Result[t].OfferType,
                OfferName: Result[t].OfferName,
                OfferDescription: Result[t].OfferDescription,
                OfferCode: Result[t].OfferCode,
                Whether_All_Zones: Result[t].Whether_All_Zones,
                ZoneID: Result[t].ZoneID,
                BookingType: Result[t].BookingType,
                DiscountPercentage: Result[t].DiscountPercentage,
                OfferValidFrom: me.moment(Result[t].OfferValidFrom).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                OfferValidTo: me.moment(Result[t].OfferValidTo).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss'),
                Date: me.moment(Result[t].created_at).utcOffset(330).format('YYYY-MM-DD,HH:mm:ss')
            })
            t++;
        }
        return callback(false, new me.ApiResponce({
            success: true,
            extras: {
                OffersList: OffersList
            }
        }));
    })
}
customermod.prototype.findOffer_ViewOffersList = function (values, callback) {
    var me = this;
    if (values.OfferType == null || values.OfferType == '' || values.OfferType == 0) {
        me.findwithoutOfferType_ViewOffersList(values, function (err, Result) {
            return callback(err, Result);
        })
    } else {
        me.findbyOfferType_ViewOffersList(values, function (err, Result) {
            return callback(err, Result);
        })
    }
}
//============== update First Ride Offer
customermod.prototype.update_updateFirstOrderOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var query = {
        OfferID: values.OfferID
    };
    var changes = {
        OfferType: values.OfferType,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        updated_at: date
    };
    var multiplicity = {
        multi: false
    };
    me.Offers.update(query, changes, multiplicity).exec(function (err, Result) {
        var error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'First Ride Offer Updated Sucessfully'
            }
        }));
    })
}
customermod.prototype.IsAll_updateFirstOrderOffer = function (values, callback) {
    var me = this;
    if (values.OfferType == null || values.OfferName == null || values.OfferDescription == null || values.OfferCode == null || values.Whether_All_Zones == null || values.ZoneID == null || values.BookingType == null || values.OfferType == '' || values.OfferName == '' || values.OfferDescription == '' || values.OfferCode == '' || values.BookingType == '') {
        return callback(true, new me.ApiResponce({
            success: false,
            extras: {
                msg: me.ApiMessages.ENTER_ALL_TAGS
            }
        }));
    } else {
        return callback(false);
    }
}
customermod.prototype.updateFirstOrderOffer = function (values, callback) {
    var me = this;
    me.IsOfferIDExist(values, function (err, result) {
        if (err) {
            return callback(result)
        } else {
            me.IsAll_updateFirstOrderOffer(values, function (err, result) {
                if (err) {
                    return callback(result)
                } else {
                    me.update_updateFirstOrderOffer(values, function (err, result) {
                        return callback(result)
                    })
                }
            })
        }
    })
}
//============== Create Firsst Ride Offer

customermod.prototype.SaveOffer_createFisrtOrderOffer = function (values, callback) {
    var me = this;
    var date = new Date();
    var OfferID = me.uuid.v1();
    var newOffer = new me.Offers({
        OfferID: OfferID,
        OfferType: 1,
        OfferName: values.OfferName,
        OfferDescription: values.OfferDescription,
        OfferCode: values.OfferCode,
        Whether_All_Zones: values.Whether_All_Zones,
        ZoneID: values.ZoneID,
        BookingType: values.BookingType,
        DiscountPercentage: values.DiscountPercentage,
        created_at: date,
        updated_at: date
    });
    newOffer.save(function (err, Offers) {
        error = false;
        return callback(error, new me.ApiResponce({
            success: true,
            extras: {
                Status: 'First Order Offer Created Sucessfully'
            }
        }), OfferID);
    });
}

customermod.prototype.Script_Update_Active = function (values, callback) {
    var me = this;
    me.Offers.update({}, {
        isActive: true
    }, {
            multi: true
        }).exec(function (err, Result) {
            console.log(err);
            console.log(Result);
        })
    callback('Updated Success');
};



//Find All Offers based on Instant Type
customermod.prototype.Find_All_Offers_Instant_Type = function (values, callback) {
    var me = this;
    var Customers = me.Customers;
    var Offers = me.Offers;
    var zones = me.ZONES;
    if (values.BookingType != null && values.Latitude != null && values.Longitude != null) {
        var sync = require('sync');

        function ZoneFindingFunction(values, callback) {
            process.nextTick(function () {
                var Latitude = parseFloat(values.Latitude);
                var Longitude = parseFloat(values.Longitude);

                zones.findOne({
                    'polygons': {
                        $geoIntersects: {
                            $geometry: {
                                type: "Point",
                                coordinates: [Longitude, Latitude]
                            }
                        }
                    }
                }, function (err, Result) {
                    callback(null, Result);
                });
            });
        }

        function OfferFunction(values, callback) {
            process.nextTick(function () {
                var query;
                if (values.Whether_All_Zones == true || values.Whether_All_Zones == 'true') {
                    query = {
                        "Whether_All_Zones": true,
                        "BookingType": parseInt(values.BookingType),
                        "isActive": true
                    }
                } else if (values.Whether_All_Zones == false || values.Whether_All_Zones == 'false') {
                    query = {
                        $or: [{
                            "Whether_All_Zones": false,
                            "BookingType": parseInt(values.BookingType),
                            "ZoneID": String(values.ZoneID),
                            "isActive": true
                        }, {
                            "Whether_All_Zones": true,
                            "BookingType": parseInt(values.BookingType),
                            "isActive": true
                        }]
                    }
                }
                Offers.find(query).exec(function (err, Result) {
                    callback(null, Result);
                });

            });
        }

        function SeasonalOfferFunctionvalidity(values, callback) {
            process.nextTick(function () {
                var date = new Date();
                var query = {
                    OfferID: values.OfferID,
                    OfferValidFrom: {
                        $lte: date
                    },
                    OfferValidTo: {
                        $gte: date
                    },
                    isActive: true
                };
                Offers.findOne(query, function (err, Result) {
                    callback(null, Result);
                });
            });
        }
        sync(function () {
            var ZoneResult = ZoneFindingFunction.sync(null, values);
            var offerquery;
            console.log(JSON.stringify(ZoneResult));
            if (ZoneResult != null) {
                offerquery = {
                    Whether_All_Zones: false,
                    ZoneID: ZoneResult._id,
                    BookingType: values.BookingType
                }
            } else {
                offerquery = {
                    Whether_All_Zones: true,
                    BookingType: values.BookingType
                }
            }
            var Result = OfferFunction.sync(null, offerquery);
            console.log()
            var OfferData = [];
            var t = 0;
            for (var i = 0; i < Result.length; i++) {
                if (Result[t].OfferType == 1) {
                    OfferData.push({
                        OfferID: Result[t].OfferID,
                        OfferType: Result[t].OfferType,
                        OfferName: Result[t].OfferName,
                        OfferDescription: Result[t].OfferDescription,
                        OfferCode: Result[t].OfferCode,
                        BookingType: Result[t].BookingType,
                        DiscountPercentage: Result[t].DiscountPercentage
                    });
                    t++;
                } else if (Result[t].OfferType == 2) {
                    var Result2 = SeasonalOfferFunctionvalidity.sync(null, Result[t]);
                    if (Result2 != null) {
                        OfferData.push({
                            OfferID: Result[t].OfferID,
                            OfferType: Result[t].OfferType,
                            OfferName: Result[t].OfferName,
                            OfferDescription: Result[t].OfferDescription,
                            OfferCode: Result[t].OfferCode,
                            BookingType: Result[t].BookingType,
                            DiscountPercentage: Result[t].DiscountPercentage
                        });
                        t++;
                    } else {
                        t++;
                    }
                } else if (Result[t].OfferType == 3) {
                    OfferData.push({
                        OfferID: Result[t].OfferID,
                        OfferType: Result[t].OfferType,
                        OfferName: Result[t].OfferName,
                        OfferDescription: Result[t].OfferDescription,
                        OfferCode: Result[t].OfferCode,
                        BookingType: Result[t].BookingType,
                        DiscountPercentage: Result[t].DiscountPercentage
                    });
                    t++;
                } else if (Result[t].OfferType == 4) {
                    OfferData.push({
                        OfferID: Result[t].OfferID,
                        OfferType: Result[t].OfferType,
                        OfferName: Result[t].OfferName,
                        OfferDescription: Result[t].OfferDescription,
                        OfferCode: Result[t].OfferCode,
                        BookingType: Result[t].BookingType,
                        DiscountPercentage: Result[t].DiscountPercentage
                    });
                    t++;
                }
            }
            console.log("Entering end");
            return callback(false, new ApiResponce({
                success: true,
                extras: {
                    OfferData: OfferData
                }
            }));
        })
    } else {
        return callback(true, new ApiResponce({
            success: false,
            extras: {
                msg: ApiMessages.ENTER_ALL_TAGS
            }
        }));
    }
};


// Find all All Ezshipp Orders
customermod.prototype.Find_All_Orders_Ezshipp_agent = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
				Monthly_Invoice:true
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Picked_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');

            var Color = 0;

            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }
            OrderData.push({
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};



customermod.prototype.Find_All_Orders_Ezshipp_Customer = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                Whether_Deleted: false,
				Monthly_Invoice:false
            };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Picked_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');

            var Color = 0;

            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }
            OrderData.push({
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};



customermod.prototype.Find_All_Orders_With_COD = function (values, Count, callback) {
    var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;

    function OrderDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {subtotal_amount: {$ne: 0}, Whether_Deleted: false };
            var toSkip = parseInt(values.skip);
            var toLimit = parseInt(values.limit);
            var sortOptions = {
                Date: -1
            };
            if (values.sortOptions != null) {
                sortOptions = values.sortOptions;
            }
            Orders.find(query).sort(sortOptions).skip(toSkip).limit(toLimit).exec(function (err, Result) {
                callback(null, Result);
            })
        })
    }

    function CustomerDataFunction(values, callback) {
        process.nextTick(function () {
            var query = {
                _id: values.userId
            };
            Customers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function DriverDataFunction(DriverID, callback) {
        process.nextTick(function () {
            var query = {
                _id: DriverID
            };
            Drivers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }

    function OfferDataFunction(OfferID, callback) {
        process.nextTick(function () {
            var query = {
                OfferID: OfferID
            };
            Offers.findOne(query).exec(function (err, Result) {
                callback(null, Result);
            });
        });
    }
    sync(function () {
        var Result = OrderDataFunction.sync(null, values);
        var OrderData = [];
        var t = 0;
        var First_name, Email, Phone, countryCode;
        for (var i = 0; i < Result.length; i++) {
            var Result2 = CustomerDataFunction.sync(null, Result[t]);
            if (Result2 == null) {
                First_name = "";
                Email = "";
                Phone = "";
                countryCode = "";
            } else {
                First_name = Result2.First_name;
                Email = Result2.Email;
                Phone = Result2.Phone;
                countryCode = Result2.countryCode;
            }
            var EventArray = Result[t].eventLog;
            var EventArrayLength = Result[t].eventLog.length;
            var Driver_Name, Driver_PhoneNumber, Driver_Email, Driver_Assigned;
            if (EventArrayLength == 0 || EventArrayLength == 1) {
                Driver_Assigned = false;
                Driver_Name = '';
                Driver_PhoneNumber = '';
                Driver_Email = '';
            } else {
                var DriverID = EventArray[(EventArrayLength) - 1].driverid;
                var Result3 = DriverDataFunction.sync(null, DriverID);
                if (Result3 == null) {
                    Driver_Assigned = false;
                    Driver_Name = '';
                    Driver_PhoneNumber = '';
                    Driver_Email = '';
                } else {
                    Driver_Assigned = true;
                    Driver_Name = Result3.name + ' ' + Result3.lname;
                    Driver_PhoneNumber = Result3.phone;
                    Driver_Email = Result3.email;
                }
            }
            var OfferApplied;
            var OfferName;
            var OfferDescription;
            var OfferCode;
            var DiscountPercentage;

            if (Result[t].OfferApplied == true) {
                var OfferID = Result[t].OfferID;
                var Result4 = OfferDataFunction.sync(null, OfferID);
                if (Result4 == null) {
                    OfferApplied = false;
                    OfferName = '';
                    OfferDescription = '';
                    OfferCode = '';
                    DiscountPercentage = '';
                } else {
                    OfferApplied = true;
                    OfferName = Result4.OfferName;
                    OfferDescription = Result4.OfferDescription;
                    OfferCode = Result4.OfferCode;
                    DiscountPercentage = Result4.DiscountPercentage;
                }
            } else {
                OfferApplied = false;
                OfferName = '';
                OfferDescription = '';
                OfferCode = '';
                DiscountPercentage = '';
            }
            var moment = require('moment');
            var Order_Accepted_Time;
            var Order_Picked_Time;
            var Order_Completed_Time;
            var Order_Journey_Time;
            var Shipping_Distance;
            if (Result[t].Order_Accepted_Time == null) {
                Order_Accepted_Time = '';
            } else {
                Order_Accepted_Time = moment(Result[t].Order_Accepted_Time).utcOffset(330).format('MMM DD, h:mm A');
            }
            if (Result[t].Order_Completed_Time == null) {
                Order_Completed_Time = '';
                Order_Journey_Time = '';
            } else {
                Order_Completed_Time = moment(Result[t].Order_Completed_Time).utcOffset(330).format('MMM DD, h:mm A');
                Order_Journey_Time = Result[t].Order_Journey_Time;
            }
            Shipping_Distance = parseFloat(Result[t].Shipping_Distance);
            var FormattedDate = moment(Result[t].Date).utcOffset(330).format('MMM DD, h:mm A');

            var Color = 0;

            if (Result[t].status == 1) {
                var now = moment().utcOffset(330);
                var that = moment(Result[t].Date).utcOffset(330);
                var diff = Math.abs(now.diff(that, "ms"));
                console.log(now.format("DD/MM/YYYY H:mm:ss"));
                console.log(that.format("DD/MM/YYYY H:mm:ss"));
                console.log("Difference values in MS:->" + diff);
                console.log("Booking Type:->" + parseInt(Result[t].bookingType));
                if (parseInt(Result[t].bookingType) == 1) {
                    if (diff >= 1800000) {
                        Color = 1;
                    }
                } else if (parseInt(Result[t].bookingType) == 2) {
                    if (diff >= 7200000) {
                        Color = 2;
                    }
                } else if (parseInt(Result[t].bookingType) == 3) {
                    if (diff >= 14400000) {
                        Color = 3;
                    }
                }
                console.log("color->" + Color);
            }
            var Whether_Payment_Capture = false;
            if (Result[t].paymentType == 2) {
                if (Result[t].Whether_Payment_Capture == true) {
                    Whether_Payment_Capture = true;
                }
            }
            var Payment_Status = "";
            if (Result[t].paymentType == 2) {
                Payment_Status = Result[t].Payment_Status;
            };
            var pickInformation = findElement1(EventArray, "status", "11");
            if (pickInformation == null) {
                Order_Picked_Time = '';
            } else {
                Order_Picked_Time = moment(pickInformation.datetime, 'YYYY-MM-DD HH:mm:ss').format('MMM DD, h:mm A');
            }
            OrderData.push({
                Order_Picked_Time: Order_Picked_Time,
                Whether_Payment_Capture: Whether_Payment_Capture,
                Payment_Status: Payment_Status,
                Color: Color,
                First_name: First_name,
                Email: Email,
                Phone: Phone,
                Order_Accepted_Time: Order_Accepted_Time,
                Order_Completed_Time: Order_Completed_Time,
                Order_Journey_Time: Order_Journey_Time,
                Shipping_Distance: Shipping_Distance,
                Driver_Assigned: Driver_Assigned,
                DriverID: DriverID,
                Driver_Name: Driver_Name,
                Driver_PhoneNumber: Driver_PhoneNumber,
                Driver_Email: Driver_Email,
                OfferApplied: OfferApplied,
                OfferName: OfferName,
                OfferDescription: OfferDescription,
                OfferCode: OfferCode,
                DiscountPercentage: DiscountPercentage,
                countryCode: countryCode,
                order_datetime: FormattedDate,
                status: Result[t].status,
                DeviceType: Result[t].Devices.DeviceType,
                orderId: Result[t]._id,
                orderseqId: Result[t].orderseqId,
                orderType: Result[t].orderType,
                due_datetime: Result[t].due_datetime,
                CustomerID: Result[t].userId,
                pickAddress: Result[t].pickAddress,
                dropAddress: Result[t].dropAddress,
                pickLatitude: Result[t].pickLocation.Latitude,
                pickLongitude: Result[t].pickLocation.Longitude,
                dropLatitude: Result[t].dropLocation.Latitude,
                dropLongitude: Result[t].dropLocation.Longitude,
                paymentType: Result[t].paymentType,
                paymentId: Result[t].paymentId,
                itemDescription: Result[t].itemDescription,
                receiverName: Result[t].receiverName,
                receiverPhone: Result[t].receiverPhone,
                itemName: Result[t].itemName,
                deliverycharge: parseFloat(Result[t].deliverycharge),
                subtotal_amount: parseFloat(Result[t].subtotal_amount),
                total_amount: parseFloat(Result[t].total_amount),
                Order_Total_Time: Result[t].Order_Total_Time,
                item_actual_cost: Result[t].item_actual_cost,
                itemImage: Result[t].itemImage,
                PickZone: Result[t].pickupdeponame,
                DropZone: Result[t].deliverydeponame,
                Whether_Zone_Drop: Result[t].Whether_Zone_Drop,
                barcodeid: Result[t].barcodeid,
                bookingType: Result[t].bookingType
            });
            t++;
        }
        return callback(new me.ApiResponce({
            success: true,
            extras: {
                OrderData: OrderData,
                Count: Count
            }
        }));
    });
};


customermod.prototype.notify_user_or_driver = function (values, callback) {
    // shiva11111
	console.log("  Debugging "+values.JOB_TYPE+"   "+values.skip+"   "+values.orderId+"   "+values.toString());
    var resulttosend="";
        var me = this;
    var sync = require('sync');
    var Customers = me.Customers;
    var Orders = me.Orders;
    var ZONES = me.ZONES;
    var Drivers = me.Drivers;
    var Offers = me.Offers;
	 var config = require("../Config/config.js");
    var publishkey = config.pubnubkeys.publishkey;
    var subscribekey = config.pubnubkeys.subscribekey;
    var pubnubs = require("pubnub");
	var pubnub = new pubnubs({
        ssl: true,
        publish_key: publishkey,
        subscribe_key: subscribekey
    });
    var message = {
					"status": 20,
					"orderid": values.orderId
					};
   // sendnotificationstodriveroruser("customer",message,"Custom mesa");
  console.log("Entering 5th Function " + JSON.stringify(message));
        var status = message.status;
        //var OrderId = new ObjectID(message.orderid);
        var Order = me.Orders;
		 var query = {
                "orderseqId": message.orderid
            };
        Order.findOne({
            "orderseqId": message.orderid
        }, function (err, result3) {
            if (!err) {
                if (result3) {
                    var orderid = String(result3._id);
                    var orderseqid = result3.orderseqId;
                    var customer = me.Customers;
					var drivers = me.Drivers;
                    var _id = new ObjectID(result3.userId);
					//		resulttosend=JSON.stringify(result3)+"   "+JSON.stringify(_id)+"   "+JSON.stringify(result3.userId);
					if(values.JOB_TYPE=='User')
					{
                    customer.aggregate([{
                        "$match": {
                            $and: [{
                                "_id": _id,
                                "Devices.Active": '1'
                            }]
                        }
                    }, {
                        "$unwind": "$Devices"
                    }, {
                        "$match": {
                            "Devices.Active": '1'
                        }
                    }, {
                        "$project": {
                            "_id": 0,
                            "Devices": 1
                        }
                    }], function (err, result) {
                        if (!err) {
                            if (result.length > 0) {
                                var message;
                                var notify;
                                if (parseFloat(status) == 20) {
                                    notify = {
                                        'title': 'ezshipp',
                                        'body': values.skip
                                    };
                                    message = {
                                        "action": 20,
                                        "orderId": orderseqid,
                                        "message": 'Custom message message',
                                        "orderid": orderid
                                    }
                                    var publishConfig = {
                                        channel: result3.userId,
                                        message: message
                                    }
                                    pubnub.publish(publishConfig, function (status, response) {
                                        //console.log(status, response);

                                    })

                                    for (var i = 0; i < result.length; i++) {
                                        var devicetoken = result[i].Devices.DeviceToken;
                                        var data = {
                                            "devicetoken": devicetoken,
                                            "message": message,
                                            "notify": notify
                                        }
                                        me.FCMMod.sendpush_android_ios(data, function (err, response) {

                                        })
                                    }
                                } 
                            }
                        }
                    })
                
					} else if(values.JOB_TYPE=='Biker') {
					//console.log(result3[0].driversLog[0].driverid);
					//console.log(result3[0].driversLog);
                        
                        if(result3.driversLog.length>0)
                            {
                                console.log(result3.driversLog[result3.driversLog.length-1].driverid);
                               var query = {
                                    _id: new ObjectID(result3.driversLog[result3.driversLog.length-1].driverid)
                                };
                                Drivers.find(query).exec(function (err, Result) {

                                     if (!err) {
                                                    console.log("Result data .length "+Result.length); 
                                                        if (Result.length > 0) {

                                                            var mssageto = {
                                                    "orderid": values.orderId,
                                                    'bid': result3.orderseqId,
                                                    'a': 22, //21 new order request
                                                    'ab': 1,
                                                    "ordermsg": values.skip
                                                }
                                                //sending push to driver
                                                sendpushtodriverorderexpired(result3.driversLog[result3.driversLog.length-1].driverid, mssageto);

                                             
                                            }
                                        }
                                });
                            }
                            else
                                console.log("No Driver");
					}
				
				}
            }
			return callback(null, resulttosend);
        })

         function sendpushtodriverorderexpired(driverid, message) {
        console.log("Entering order expire fcm")
        var User = me.Drivers;
        var _id = new ObjectID(driverid);
        var notify = {
            'title': 'ezshipp',
            'body': 'Hi, orderexpired!!!'
        };
        User.aggregate([{
            "$match": {
                $and: [{
                    "_id": _id,
                    "Devices.Active": '1'
                }]
            }
        }, {
            "$unwind": "$Devices"
        }, {
            "$match": {
                "Devices.Active": '1'
            }
        }, {
            "$project": {
                "_id": 0,
                "Devices": 1
            }
        }], function (err, result) {
            if (!err) {
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var devicetoken = result[i].Devices.DeviceToken;
                        if (result[i].Devices.DeviceType == "1") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_ios_driver(data, function (err, response) {
                                console.log("noification sent expired");
                            })
                        } else if (result[i].Devices.DeviceType == "2") {
                            var data = {
                                "devicetoken": devicetoken,
                                "message": message,
                                "notify": notify
                            }
                            me.FCMMod.sendpush_android_driver(data, function (err, response) {
                                console.log("notification sent expired");
                            })
                        }
                    }
                }
            }
        })
    }

    //return callback(resulttosend, resulttosend);
	
	/**/
};

module.exports = customermod;